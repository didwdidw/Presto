

    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM61.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM61.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '897.39', width=5)

width < len (9) in center_string(outstring, '402750.81', width=6)

width < len (12) in center_string(outstring, '600937934.78', width=8)

width < len (7) in center_string(outstring, '3218.02', width=6)

width < len (7) in center_string(outstring, '4404.49', width=5)

width < len (16) in center_string(outstring, ' 9.6998(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.776(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254038(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4401.36', width=5)

width < len (16) in center_string(outstring, ' 9.6860(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017552(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922195(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4397.46', width=5)

width < len (16) in center_string(outstring, ' 9.6689(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026327(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924896(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3953.22', width=5)

width < len (16) in center_string(outstring, ' 7.8140(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035103(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927612(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4387.56', width=5)

width < len (16) in center_string(outstring, ' 9.6253(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043879(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930313(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4381.56', width=5)

width < len (16) in center_string(outstring, ' 9.5991(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052655(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933029(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.88', width=5)

width < len (16) in center_string(outstring, ' 9.5698(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935730(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.53', width=5)

width < len (16) in center_string(outstring, ' 9.5377(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070206(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938446(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(9.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.7)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM61.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM61.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM7.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM7.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '603.90', width=5)

width < len (9) in center_string(outstring, '182440.14', width=6)

width < len (12) in center_string(outstring, '589106224.55', width=8)

width < len (7) in center_string(outstring, '1831.61', width=6)

width < len (7) in center_string(outstring, '4357.29', width=5)

width < len (16) in center_string(outstring, ' 9.4930(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254221(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.13', width=5)

width < len (16) in center_string(outstring, ' 9.4836(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922424(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4352.17', width=5)

width < len (16) in center_string(outstring, ' 9.4707(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925247(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4348.47', width=5)

width < len (16) in center_string(outstring, ' 9.4546(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.01', width=5)

width < len (16) in center_string(outstring, ' 9.4352(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930878(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4338.83', width=5)

width < len (16) in center_string(outstring, ' 9.4127(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933701(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3902.93', width=5)

width < len (16) in center_string(outstring, ' 7.6164(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936508(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4326.27', width=5)

width < len (16) in center_string(outstring, ' 9.3583(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939331(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.5)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.440 sec (User: 0.430 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM7.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM7.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM61.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM61.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '886.39', width=5)

width < len (9) in center_string(outstring, '392937.56', width=6)

width < len (12) in center_string(outstring, '599548736.13', width=8)

width < len (7) in center_string(outstring, '3199.94', width=6)

width < len (7) in center_string(outstring, '4398.87', width=5)

width < len (16) in center_string(outstring, ' 9.6751(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252788(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4395.85', width=5)

width < len (16) in center_string(outstring, ' 9.6618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920731(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4392.09', width=5)

width < len (16) in center_string(outstring, ' 9.6452(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923294(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4387.66', width=5)

width < len (16) in center_string(outstring, ' 9.6258(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925858(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4382.55', width=5)

width < len (16) in center_string(outstring, ' 9.6034(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928421(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3937.25', width=5)

width < len (16) in center_string(outstring, ' 7.7510(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930984(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4370.38', width=5)

width < len (16) in center_string(outstring, ' 9.5501(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933533(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4363.32', width=5)

width < len (16) in center_string(outstring, ' 9.5193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM61.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM61.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM42.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM42.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '696.49', width=5)

width < len (9) in center_string(outstring, '242640.81', width=6)

width < len (12) in center_string(outstring, '611229773.38', width=8)

width < len (7) in center_string(outstring, '4330.14', width=6)

width < len (7) in center_string(outstring, '4384.34', width=5)

width < len (16) in center_string(outstring, ' 9.6112(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.980(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253917(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.87', width=5)

width < len (16) in center_string(outstring, ' 9.6004(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017960(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4378.61', width=5)

width < len (16) in center_string(outstring, ' 9.5861(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026941(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.62', width=5)

width < len (16) in center_string(outstring, ' 9.5687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035921(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927612(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.91', width=5)

width < len (16) in center_string(outstring, ' 9.5481(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044901(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930374(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.48', width=5)

width < len (16) in center_string(outstring, ' 9.5243(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053881(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933121(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4358.34', width=5)

width < len (16) in center_string(outstring, ' 9.4976(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.51', width=5)

width < len (16) in center_string(outstring, ' 9.4678(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071841(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938644(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM42.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM42.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM63.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM63.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '914.73', width=5)

width < len (9) in center_string(outstring, '418462.38', width=6)

width < len (12) in center_string(outstring, '601418584.66', width=8)

width < len (7) in center_string(outstring, '3192.16', width=6)

width < len (7) in center_string(outstring, '3971.38', width=5)

width < len (16) in center_string(outstring, ' 7.8859(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.761(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253876(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4402.58', width=5)

width < len (16) in center_string(outstring, ' 9.6914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017523(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922028(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4398.62', width=5)

width < len (16) in center_string(outstring, ' 9.6739(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026284(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924728(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4393.96', width=5)

width < len (16) in center_string(outstring, ' 9.6534(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035045(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927444(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4388.60', width=5)

width < len (16) in center_string(outstring, ' 9.6299(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043807(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930145(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4382.55', width=5)

width < len (16) in center_string(outstring, ' 9.6034(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052568(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932846(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.82', width=5)

width < len (16) in center_string(outstring, ' 9.5739(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061330(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935547(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4368.42', width=5)

width < len (16) in center_string(outstring, ' 9.5416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070091(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938248(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM63.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM63.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM67.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM67.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '992.87', width=5)

width < len (9) in center_string(outstring, '492995.22', width=6)

width < len (12) in center_string(outstring, '616368108.36', width=8)

width < len (7) in center_string(outstring, '3372.04', width=6)

width < len (7) in center_string(outstring, '4405.74', width=5)

width < len (16) in center_string(outstring, ' 9.7053(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.711(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254575(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.33', width=5)

width < len (16) in center_string(outstring, ' 9.6903(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922729(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4398.16', width=5)

width < len (16) in center_string(outstring, ' 9.6719(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026133(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925415(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4393.29', width=5)

width < len (16) in center_string(outstring, ' 9.6505(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928116(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4387.73', width=5)

width < len (16) in center_string(outstring, ' 9.6261(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930801(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4381.49', width=5)

width < len (16) in center_string(outstring, ' 9.5987(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933502(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.58', width=5)

width < len (16) in center_string(outstring, ' 9.5685(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060977(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.01', width=5)

width < len (16) in center_string(outstring, ' 9.5354(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069688(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938889(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM67.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM67.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM13.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM13.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '663.20', width=5)

width < len (9) in center_string(outstring, '220012.69', width=6)

width < len (12) in center_string(outstring, '590711246.15', width=8)

width < len (7) in center_string(outstring, '3212.47', width=6)

width < len (7) in center_string(outstring, '4363.86', width=5)

width < len (16) in center_string(outstring, ' 9.5216(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254289(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.62', width=5)

width < len (16) in center_string(outstring, ' 9.5119(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922485(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.59', width=5)

width < len (16) in center_string(outstring, ' 9.4987(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925308(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4354.81', width=5)

width < len (16) in center_string(outstring, ' 9.4822(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928131(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4350.27', width=5)

width < len (16) in center_string(outstring, ' 9.4625(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930939(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4345.00', width=5)

width < len (16) in center_string(outstring, ' 9.4395(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933762(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3905.40', width=5)

width < len (16) in center_string(outstring, ' 7.6261(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936584(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4332.27', width=5)

width < len (16) in center_string(outstring, ' 9.3843(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939392(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.580 sec (User: 0.560 sec, System: 0.020 sec)
  Total time: 0.570 sec

Final candidates in binary format are in 'Sband_DM13.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM13.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM55.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM55.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '809.10', width=5)

width < len (9) in center_string(outstring, '327420.97', width=6)

width < len (12) in center_string(outstring, '615900102.41', width=8)

width < len (7) in center_string(outstring, '3035.63', width=6)

width < len (7) in center_string(outstring, '4402.26', width=5)

width < len (16) in center_string(outstring, ' 9.6900(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.846(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4399.41', width=5)

width < len (16) in center_string(outstring, ' 9.6774(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017691(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923599(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.78', width=5)

width < len (16) in center_string(outstring, ' 9.6614(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026537(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926331(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4391.43', width=5)

width < len (16) in center_string(outstring, ' 9.6423(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035383(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929047(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.37', width=5)

width < len (16) in center_string(outstring, ' 9.6201(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044228(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931778(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4380.61', width=5)

width < len (16) in center_string(outstring, ' 9.5949(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934509(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.15', width=5)

width < len (16) in center_string(outstring, ' 9.5666(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061920(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937225(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.01', width=5)

width < len (16) in center_string(outstring, ' 9.5354(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070766(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939957(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.5)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.430 sec, System: 0.020 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM55.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM55.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM28.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM28.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 93 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  12%
Amount of optimization complete =  16%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  29%
Amount of optimization complete =  33%
Amount of optimization complete =  37%
Amount of optimization complete =  41%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  58%
Amount of optimization complete =  62%
Amount of optimization complete =  66%
Amount of optimization complete =  70%
Amount of optimization complete =  75%
Amount of optimization complete =  79%
Amount of optimization complete =  83%
Amount of optimization complete =  87%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '351.27', width=5)

width < len (8) in center_string(outstring, '61779.79', width=6)

width < len (12) in center_string(outstring, '592600056.86', width=8)

width < len (7) in center_string(outstring, '1843.84', width=6)

width < len (7) in center_string(outstring, '3944.44', width=5)

width < len (16) in center_string(outstring, ' 7.7793(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.106(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254009(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4367.20', width=5)

width < len (16) in center_string(outstring, ' 9.5362(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018212(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922195(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4364.23', width=5)

width < len (16) in center_string(outstring, ' 9.5233(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027318(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.52', width=5)

width < len (16) in center_string(outstring, ' 9.5071(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036424(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927780(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4356.07', width=5)

width < len (16) in center_string(outstring, ' 9.4877(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045530(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930573(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4350.89', width=5)

width < len (16) in center_string(outstring, ' 9.4651(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054636(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933365(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.99', width=5)

width < len (16) in center_string(outstring, ' 9.4395(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063742(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936142(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4338.38', width=5)

width < len (16) in center_string(outstring, ' 9.4108(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072848(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938934(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.4(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.710 sec (User: 0.700 sec, System: 0.010 sec)
  Total time: 0.710 sec

Final candidates in binary format are in 'Sband_DM28.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM28.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM37.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM37.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '504.73', width=5)

width < len (9) in center_string(outstring, '127464.12', width=6)

width < len (12) in center_string(outstring, '595328010.21', width=8)

width < len (7) in center_string(outstring, '3107.57', width=6)

width < len (7) in center_string(outstring, '4380.52', width=5)

width < len (16) in center_string(outstring, ' 9.5945(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.016(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253959(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3947.27', width=5)

width < len (16) in center_string(outstring, ' 7.7905(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018033(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922134(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4375.06', width=5)

width < len (16) in center_string(outstring, ' 9.5706(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027049(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924911(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.21', width=5)

width < len (16) in center_string(outstring, ' 9.5537(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036066(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927673(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4366.62', width=5)

width < len (16) in center_string(outstring, ' 9.5337(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045082(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930450(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4361.32', width=5)

width < len (16) in center_string(outstring, ' 9.5105(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054099(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933212(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.30', width=5)

width < len (16) in center_string(outstring, ' 9.4843(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063115(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935989(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4348.58', width=5)

width < len (16) in center_string(outstring, ' 9.4551(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072132(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938751(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.6)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.590 sec (User: 0.580 sec, System: 0.010 sec)
  Total time: 0.600 sec

Final candidates in binary format are in 'Sband_DM37.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM37.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM56.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM56.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '819.96', width=5)

width < len (9) in center_string(outstring, '336265.53', width=6)

width < len (12) in center_string(outstring, '615865912.65', width=8)

width < len (7) in center_string(outstring, '3063.41', width=6)

width < len (7) in center_string(outstring, '4402.21', width=5)

width < len (16) in center_string(outstring, ' 9.6897(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.830(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254984(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4399.33', width=5)

width < len (16) in center_string(outstring, ' 9.6771(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017660(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.67', width=5)

width < len (16) in center_string(outstring, ' 9.6610(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026490(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925873(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4391.31', width=5)

width < len (16) in center_string(outstring, ' 9.6418(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035320(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928589(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.23', width=5)

width < len (16) in center_string(outstring, ' 9.6195(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044150(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931305(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4380.45', width=5)

width < len (16) in center_string(outstring, ' 9.5942(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052980(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.99', width=5)

width < len (16) in center_string(outstring, ' 9.5659(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061810(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936752(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4366.84', width=5)

width < len (16) in center_string(outstring, ' 9.5346(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939468(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.5)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM56.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM56.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM31.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM31.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 81 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  13%
Amount of optimization complete =  18%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  40%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  59%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  81%
Amount of optimization complete =  86%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '366.16', width=5)

width < len (8) in center_string(outstring, '67122.73', width=6)

width < len (12) in center_string(outstring, '607811810.06', width=8)

width < len (7) in center_string(outstring, '1985.76', width=6)

width < len (7) in center_string(outstring, '4371.16', width=5)

width < len (16) in center_string(outstring, ' 9.5535(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.073(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255284(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.97', width=5)

width < len (16) in center_string(outstring, ' 9.5439(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018146(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923477(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.99', width=5)

width < len (16) in center_string(outstring, ' 9.5309(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027219(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926254(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4362.27', width=5)

width < len (16) in center_string(outstring, ' 9.5147(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036292(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929031(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.82', width=5)

width < len (16) in center_string(outstring, ' 9.4953(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045365(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931808(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.65', width=5)

width < len (16) in center_string(outstring, ' 9.4728(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054438(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934601(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.76', width=5)

width < len (16) in center_string(outstring, ' 9.4472(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063511(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937378(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.16', width=5)

width < len (16) in center_string(outstring, ' 9.4185(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072584(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940155(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.5)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(3.0)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(3.7)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.580 sec (User: 0.560 sec, System: 0.020 sec)
  Total time: 0.580 sec

Final candidates in binary format are in 'Sband_DM31.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM31.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM19.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM19.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '535.99', width=5)

width < len (9) in center_string(outstring, '143731.03', width=6)

width < len (12) in center_string(outstring, '591627939.66', width=8)

width < len (7) in center_string(outstring, '3371.54', width=6)

width < len (7) in center_string(outstring, '4366.38', width=5)

width < len (16) in center_string(outstring, ' 9.5326(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.188(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.30', width=5)

width < len (16) in center_string(outstring, ' 9.5236(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018376(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920074(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.42', width=5)

width < len (16) in center_string(outstring, ' 9.5110(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027563(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3926.34', width=5)

width < len (16) in center_string(outstring, ' 7.7081(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036751(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4353.41', width=5)

width < len (16) in center_string(outstring, ' 9.4761(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045939(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928497(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.30', width=5)

width < len (16) in center_string(outstring, ' 9.4539(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055127(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931305(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.45', width=5)

width < len (16) in center_string(outstring, ' 9.4284(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064314(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.88', width=5)

width < len (16) in center_string(outstring, ' 9.3999(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936935(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.6)x10^-1', width=10)

width < len (14) in center_string(outstring, '0.0(7.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM19.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM19.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM3.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM3.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '581.71', width=5)

width < len (9) in center_string(outstring, '169285.09', width=6)

width < len (12) in center_string(outstring, '590120353.22', width=8)

width < len (7) in center_string(outstring, '1482.94', width=6)

width < len (7) in center_string(outstring, '4359.98', width=5)

width < len (16) in center_string(outstring, ' 9.5047(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252696(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.09', width=5)

width < len (16) in center_string(outstring, ' 9.4965(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920898(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4355.41', width=5)

width < len (16) in center_string(outstring, ' 9.4848(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923721(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.98', width=5)

width < len (16) in center_string(outstring, ' 9.4699(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.81', width=5)

width < len (16) in center_string(outstring, ' 9.4517(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929352(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.89', width=5)

width < len (16) in center_string(outstring, ' 9.4303(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932159(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.61', width=5)

width < len (16) in center_string(outstring, ' 7.6347(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934982(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4330.85', width=5)

width < len (16) in center_string(outstring, ' 9.3782(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937790(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM3.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM3.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM23.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM23.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 80 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '424.45', width=5)

width < len (8) in center_string(outstring, '90164.31', width=6)

width < len (12) in center_string(outstring, '562558289.52', width=8)

width < len (7) in center_string(outstring, '2407.22', width=6)

width < len (7) in center_string(outstring, '4367.45', width=5)

width < len (16) in center_string(outstring, ' 9.5373(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.150(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252851(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3937.07', width=5)

width < len (16) in center_string(outstring, ' 7.7503(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018301(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921051(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4362.53', width=5)

width < len (16) in center_string(outstring, ' 9.5159(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027451(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923843(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4358.93', width=5)

width < len (16) in center_string(outstring, ' 9.5002(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036602(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926651(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3921.81', width=5)

width < len (16) in center_string(outstring, ' 7.6903(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045752(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929443(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4349.52', width=5)

width < len (16) in center_string(outstring, ' 9.4591(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054902(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932251(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.71', width=5)

width < len (16) in center_string(outstring, ' 9.4339(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935043(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3901.72', width=5)

width < len (16) in center_string(outstring, ' 7.6117(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073203(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937851(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(8.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.8)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.3(7.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.500 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM23.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM23.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM76.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM76.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1022.22', width=5)

width < len (9) in center_string(outstring, '522565.41', width=6)

width < len (12) in center_string(outstring, '604528839.52', width=8)

width < len (7) in center_string(outstring, '2815.65', width=6)

width < len (7) in center_string(outstring, '4420.58', width=5)

width < len (16) in center_string(outstring, ' 9.7708(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254538(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4416.77', width=5)

width < len (16) in center_string(outstring, ' 9.7539(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922745(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4412.11', width=5)

width < len (16) in center_string(outstring, ' 9.7334(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925568(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4406.68', width=5)

width < len (16) in center_string(outstring, ' 9.7094(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928391(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.48', width=5)

width < len (16) in center_string(outstring, ' 9.6821(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931198(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3951.63', width=5)

width < len (16) in center_string(outstring, ' 7.8077(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4385.83', width=5)

width < len (16) in center_string(outstring, ' 9.6178(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936844(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4377.40', width=5)

width < len (16) in center_string(outstring, ' 9.5808(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939667(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM76.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM76.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM58.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM58.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '850.05', width=5)

width < len (9) in center_string(outstring, '361387.03', width=6)

width < len (12) in center_string(outstring, '598334013.54', width=8)

width < len (7) in center_string(outstring, '3136.41', width=6)

width < len (7) in center_string(outstring, '4394.68', width=5)

width < len (16) in center_string(outstring, ' 9.6566(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.787(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255005(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4391.66', width=5)

width < len (16) in center_string(outstring, ' 9.6433(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017573(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923157(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4387.87', width=5)

width < len (16) in center_string(outstring, ' 9.6267(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026360(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925873(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4383.38', width=5)

width < len (16) in center_string(outstring, ' 9.6070(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035147(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928589(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4378.20', width=5)

width < len (16) in center_string(outstring, ' 9.5843(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043933(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931290(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.33', width=5)

width < len (16) in center_string(outstring, ' 9.5586(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934006(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4365.77', width=5)

width < len (16) in center_string(outstring, ' 9.5300(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936707(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '3918.99', width=5)

width < len (16) in center_string(outstring, ' 7.6793(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070293(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM58.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM58.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM27.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM27.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '357.20', width=5)

width < len (8) in center_string(outstring, '63882.01', width=6)

width < len (12) in center_string(outstring, '592681000.89', width=8)

width < len (7) in center_string(outstring, '1888.08', width=6)

width < len (7) in center_string(outstring, '4369.89', width=5)

width < len (16) in center_string(outstring, ' 9.5480(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.126(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255541(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4367.78', width=5)

width < len (16) in center_string(outstring, ' 9.5388(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018251(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3936.33', width=5)

width < len (16) in center_string(outstring, ' 7.7474(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027377(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4361.24', width=5)

width < len (16) in center_string(outstring, ' 9.5102(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929321(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.86', width=5)

width < len (16) in center_string(outstring, ' 9.4911(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045628(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932129(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.74', width=5)

width < len (16) in center_string(outstring, ' 9.4688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054753(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4345.90', width=5)

width < len (16) in center_string(outstring, ' 9.4434(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063879(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937714(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4339.34', width=5)

width < len (16) in center_string(outstring, ' 9.4150(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073004(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940506(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.620 sec (User: 0.610 sec, System: 0.010 sec)
  Total time: 0.620 sec

Final candidates in binary format are in 'Sband_DM27.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM27.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM8.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM8.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '610.04', width=5)

width < len (9) in center_string(outstring, '186164.12', width=6)

width < len (12) in center_string(outstring, '574688379.45', width=8)

width < len (7) in center_string(outstring, '2012.21', width=6)

width < len (7) in center_string(outstring, '4357.48', width=5)

width < len (16) in center_string(outstring, ' 9.4938(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.216(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252718(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.38', width=5)

width < len (16) in center_string(outstring, ' 9.4847(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920929(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '3926.92', width=5)

width < len (16) in center_string(outstring, ' 7.7103(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027647(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(18)', width=10)

width < len (7) in center_string(outstring, '4348.86', width=5)

width < len (16) in center_string(outstring, ' 9.4563(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926559(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.47', width=5)

width < len (16) in center_string(outstring, ' 9.4372(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046078(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929367(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4339.35', width=5)

width < len (16) in center_string(outstring, ' 9.4150(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932190(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4333.50', width=5)

width < len (16) in center_string(outstring, ' 9.3896(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064509(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '3896.48', width=5)

width < len (16) in center_string(outstring, ' 7.5913(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937820(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, '-0.2(9.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.440 sec (User: 0.430 sec, System: 0.010 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM8.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM8.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM74.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM74.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1013.23', width=5)

width < len (9) in center_string(outstring, '513420.31', width=6)

width < len (12) in center_string(outstring, '602866270.19', width=8)

width < len (7) in center_string(outstring, '2923.37', width=6)

width < len (7) in center_string(outstring, '4414.13', width=5)

width < len (16) in center_string(outstring, ' 9.7423(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254260(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4410.37', width=5)

width < len (16) in center_string(outstring, ' 9.7257(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922470(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4405.77', width=5)

width < len (16) in center_string(outstring, ' 9.7054(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4400.40', width=5)

width < len (16) in center_string(outstring, ' 9.6818(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928101(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4394.26', width=5)

width < len (16) in center_string(outstring, ' 9.6548(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930923(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3947.57', width=5)

width < len (16) in center_string(outstring, ' 7.7917(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933746(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(17)', width=10)

width < len (7) in center_string(outstring, '4379.75', width=5)

width < len (16) in center_string(outstring, ' 9.5911(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936569(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4371.39', width=5)

width < len (16) in center_string(outstring, ' 9.5545(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939392(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.270 sec, System: 0.010 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM74.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM74.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM53.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM53.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '799.08', width=5)

width < len (9) in center_string(outstring, '319357.66', width=6)

width < len (12) in center_string(outstring, '584892450.61', width=8)

width < len (7) in center_string(outstring, '3091.56', width=6)

width < len (7) in center_string(outstring, '4399.68', width=5)

width < len (16) in center_string(outstring, ' 9.6786(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.858(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254680(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4396.88', width=5)

width < len (16) in center_string(outstring, ' 9.6663(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017716(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922836(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3958.12', width=5)

width < len (16) in center_string(outstring, ' 7.8334(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026574(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925568(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4389.02', width=5)

width < len (16) in center_string(outstring, ' 9.6318(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035432(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928299(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4384.02', width=5)

width < len (16) in center_string(outstring, ' 9.6098(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931030(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4378.32', width=5)

width < len (16) in center_string(outstring, ' 9.5848(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053148(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933762(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4371.92', width=5)

width < len (16) in center_string(outstring, ' 9.5568(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062005(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936478(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3924.14', width=5)

width < len (16) in center_string(outstring, ' 7.6994(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070863(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939209(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.310 sec (User: 0.300 sec, System: 0.010 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM53.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM53.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM47.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM47.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '715.37', width=5)

width < len (9) in center_string(outstring, '255974.75', width=6)

width < len (12) in center_string(outstring, '598093854.75', width=8)

width < len (7) in center_string(outstring, '3186.07', width=6)

width < len (7) in center_string(outstring, '4392.17', width=5)

width < len (16) in center_string(outstring, ' 9.6456(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.895(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254483(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.54', width=5)

width < len (16) in center_string(outstring, ' 9.6340(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017790(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922653(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.13', width=5)

width < len (16) in center_string(outstring, ' 9.6191(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026685(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3945.54', width=5)

width < len (16) in center_string(outstring, ' 7.7837(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035580(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928131(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4377.16', width=5)

width < len (16) in center_string(outstring, ' 9.5798(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.61', width=5)

width < len (16) in center_string(outstring, ' 9.5555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053370(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933594(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4365.36', width=5)

width < len (16) in center_string(outstring, ' 9.5282(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062265(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936340(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4358.43', width=5)

width < len (16) in center_string(outstring, ' 9.4979(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071160(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939072(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM47.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM47.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM14.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM14.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '655.44', width=5)

width < len (9) in center_string(outstring, '214893.78', width=6)

width < len (12) in center_string(outstring, '590908238.99', width=8)

width < len (7) in center_string(outstring, '3307.70', width=6)

width < len (7) in center_string(outstring, '4364.21', width=5)

width < len (16) in center_string(outstring, ' 9.5232(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.08', width=5)

width < len (16) in center_string(outstring, ' 9.5139(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4359.15', width=5)

width < len (16) in center_string(outstring, ' 9.5011(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4355.46', width=5)

width < len (16) in center_string(outstring, ' 9.4850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927856(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4351.03', width=5)

width < len (16) in center_string(outstring, ' 9.4657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930679(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3912.35', width=5)

width < len (16) in center_string(outstring, ' 7.6532(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933487(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4339.95', width=5)

width < len (16) in center_string(outstring, ' 9.4176(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936310(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4333.31', width=5)

width < len (16) in center_string(outstring, ' 9.3888(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939117(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM14.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM14.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM46.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM46.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '709.13', width=5)

width < len (9) in center_string(outstring, '251524.19', width=6)

width < len (12) in center_string(outstring, '598246801.03', width=8)

width < len (7) in center_string(outstring, '3413.91', width=6)

width < len (7) in center_string(outstring, '4391.66', width=5)

width < len (16) in center_string(outstring, ' 9.6433(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251986(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.19', width=5)

width < len (16) in center_string(outstring, ' 9.6325(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919937(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3950.92', width=5)

width < len (16) in center_string(outstring, ' 7.8049(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922501(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4382.12', width=5)

width < len (16) in center_string(outstring, ' 9.6015(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925064(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4377.58', width=5)

width < len (16) in center_string(outstring, ' 9.5816(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927628(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4372.37', width=5)

width < len (16) in center_string(outstring, ' 9.5588(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930191(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4366.52', width=5)

width < len (16) in center_string(outstring, ' 9.5332(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4360.01', width=5)

width < len (16) in center_string(outstring, ' 9.5049(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.3)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(6.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.2)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM46.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM46.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM81.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM81.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  11%
Amount of optimization complete =  22%
Amount of optimization complete =  33%
Amount of optimization complete =  44%
Amount of optimization complete =  55%
Amount of optimization complete =  66%
Amount of optimization complete =  77%
Amount of optimization complete =  88%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1040.16', width=5)

width < len (9) in center_string(outstring, '541063.62', width=6)

width < len (12) in center_string(outstring, '590437046.26', width=8)

width < len (7) in center_string(outstring, '2613.16', width=6)

width < len (7) in center_string(outstring, '3989.17', width=5)

width < len (16) in center_string(outstring, ' 7.9567(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254311(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(17)', width=10)

width < len (7) in center_string(outstring, '4420.40', width=5)

width < len (16) in center_string(outstring, ' 9.7700(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4415.58', width=5)

width < len (16) in center_string(outstring, ' 9.7487(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925323(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '3969.80', width=5)

width < len (16) in center_string(outstring, ' 7.8797(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(25)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(17)', width=10)

width < len (7) in center_string(outstring, '4403.63', width=5)

width < len (16) in center_string(outstring, ' 9.6960(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046073(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4396.52', width=5)

width < len (16) in center_string(outstring, ' 9.6647(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055288(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933777(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4388.67', width=5)

width < len (16) in center_string(outstring, ' 9.6302(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936600(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4380.08', width=5)

width < len (16) in center_string(outstring, ' 9.5926(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073717(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939407(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.330 sec, System: 0.010 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM81.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM81.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM54.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM54.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '809.76', width=5)

width < len (9) in center_string(outstring, '327951.91', width=6)

width < len (12) in center_string(outstring, '615616336.45', width=8)

width < len (7) in center_string(outstring, '3073.92', width=6)

width < len (7) in center_string(outstring, '4400.95', width=5)

width < len (16) in center_string(outstring, ' 9.6842(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.802(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4398.17', width=5)

width < len (16) in center_string(outstring, ' 9.6720(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017604(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920776(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4394.62', width=5)

width < len (16) in center_string(outstring, ' 9.6563(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026405(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923492(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4390.35', width=5)

width < len (16) in center_string(outstring, ' 9.6376(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035207(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926208(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.39', width=5)

width < len (16) in center_string(outstring, ' 9.6158(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044009(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928925(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4379.72', width=5)

width < len (16) in center_string(outstring, ' 9.5910(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931641(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.37', width=5)

width < len (16) in center_string(outstring, ' 9.5632(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061612(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934357(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4366.34', width=5)

width < len (16) in center_string(outstring, ' 9.5325(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070414(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937057(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.8(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM54.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM54.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM68.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM68.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '992.87', width=5)

width < len (9) in center_string(outstring, '492998.91', width=6)

width < len (12) in center_string(outstring, '617218549.67', width=8)

width < len (7) in center_string(outstring, '3303.43', width=6)

width < len (7) in center_string(outstring, '4408.63', width=5)

width < len (16) in center_string(outstring, ' 9.7180(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.711(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254750(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4405.26', width=5)

width < len (16) in center_string(outstring, ' 9.7032(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922897(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4401.13', width=5)

width < len (16) in center_string(outstring, ' 9.6850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026133(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925598(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4396.30', width=5)

width < len (16) in center_string(outstring, ' 9.6637(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928284(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4390.78', width=5)

width < len (16) in center_string(outstring, ' 9.6395(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930984(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4384.58', width=5)

width < len (16) in center_string(outstring, ' 9.6123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933670(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4377.70', width=5)

width < len (16) in center_string(outstring, ' 9.5821(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060977(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936371(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4370.16', width=5)

width < len (16) in center_string(outstring, ' 9.5492(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069688(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939056(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM68.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM68.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM49.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM49.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '733.49', width=5)

width < len (9) in center_string(outstring, '269097.38', width=6)

width < len (12) in center_string(outstring, '613457597.54', width=8)

width < len (7) in center_string(outstring, '3083.55', width=6)

width < len (7) in center_string(outstring, '4392.90', width=5)

width < len (16) in center_string(outstring, ' 9.6488(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.893(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254763(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4390.24', width=5)

width < len (16) in center_string(outstring, ' 9.6371(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017786(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922928(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.80', width=5)

width < len (16) in center_string(outstring, ' 9.6220(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026678(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4382.64', width=5)

width < len (16) in center_string(outstring, ' 9.6038(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035571(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928406(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4377.76', width=5)

width < len (16) in center_string(outstring, ' 9.5824(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044464(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.18', width=5)

width < len (16) in center_string(outstring, ' 9.5580(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053357(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933884(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4365.90', width=5)

width < len (16) in center_string(outstring, ' 9.5305(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062250(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4358.93', width=5)

width < len (16) in center_string(outstring, ' 9.5001(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071143(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM49.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM49.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM48.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM48.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '715.25', width=5)

width < len (9) in center_string(outstring, '255882.77', width=6)

width < len (12) in center_string(outstring, '598746148.65', width=8)

width < len (7) in center_string(outstring, '3162.58', width=6)

width < len (7) in center_string(outstring, '4394.61', width=5)

width < len (16) in center_string(outstring, ' 9.6563(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.911(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253619(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4392.00', width=5)

width < len (16) in center_string(outstring, ' 9.6448(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017822(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921783(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.61', width=5)

width < len (16) in center_string(outstring, ' 9.6299(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026734(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924530(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3946.97', width=5)

width < len (16) in center_string(outstring, ' 7.7893(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035645(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927277(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4379.66', width=5)

width < len (16) in center_string(outstring, ' 9.5907(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044556(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930008(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4374.12', width=5)

width < len (16) in center_string(outstring, ' 9.5665(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053467(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4367.88', width=5)

width < len (16) in center_string(outstring, ' 9.5392(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062379(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935486(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4360.95', width=5)

width < len (16) in center_string(outstring, ' 9.5089(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.5(3.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.510 sec

Final candidates in binary format are in 'Sband_DM48.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM48.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM29.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM29.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 92 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '354.45', width=5)

width < len (8) in center_string(outstring, '62900.86', width=6)

width < len (12) in center_string(outstring, '593443234.60', width=8)

width < len (7) in center_string(outstring, '1875.63', width=6)

width < len (7) in center_string(outstring, '3946.28', width=5)

width < len (16) in center_string(outstring, ' 7.7866(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.101(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254553(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4370.40', width=5)

width < len (16) in center_string(outstring, ' 9.5502(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018203(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922745(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4367.44', width=5)

width < len (16) in center_string(outstring, ' 9.5373(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027304(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925537(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.74', width=5)

width < len (16) in center_string(outstring, ' 9.5211(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928314(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.30', width=5)

width < len (16) in center_string(outstring, ' 9.5018(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931107(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4354.14', width=5)

width < len (16) in center_string(outstring, ' 9.4793(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933899(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4348.25', width=5)

width < len (16) in center_string(outstring, ' 9.4537(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063710(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936691(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4341.65', width=5)

width < len (16) in center_string(outstring, ' 9.4250(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939468(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.1)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(2.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-2', width=12)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.670 sec (User: 0.650 sec, System: 0.020 sec)
  Total time: 0.660 sec

Final candidates in binary format are in 'Sband_DM29.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM29.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM30.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM30.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  12%
Amount of optimization complete =  16%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  29%
Amount of optimization complete =  33%
Amount of optimization complete =  37%
Amount of optimization complete =  41%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  58%
Amount of optimization complete =  62%
Amount of optimization complete =  66%
Amount of optimization complete =  70%
Amount of optimization complete =  75%
Amount of optimization complete =  79%
Amount of optimization complete =  83%
Amount of optimization complete =  87%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '360.94', width=5)

width < len (8) in center_string(outstring, '65223.48', width=6)

width < len (12) in center_string(outstring, '563507073.53', width=8)

width < len (7) in center_string(outstring, '1927.33', width=6)

width < len (7) in center_string(outstring, '4370.44', width=5)

width < len (16) in center_string(outstring, ' 9.5504(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.080(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253406(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '3942.30', width=5)

width < len (16) in center_string(outstring, ' 7.7709(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018161(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921600(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4365.32', width=5)

width < len (16) in center_string(outstring, ' 9.5280(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027241(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924377(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.62', width=5)

width < len (16) in center_string(outstring, ' 9.5119(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036321(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927155(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3926.74', width=5)

width < len (16) in center_string(outstring, ' 7.7096(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045401(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929947(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4352.04', width=5)

width < len (16) in center_string(outstring, ' 9.4701(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054482(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932724(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.17', width=5)

width < len (16) in center_string(outstring, ' 9.4446(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935501(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '3906.38', width=5)

width < len (16) in center_string(outstring, ' 7.6299(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072642(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938293(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(9.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.1)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(9.7)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.650 sec (User: 0.640 sec, System: 0.010 sec)
  Total time: 0.650 sec

Final candidates in binary format are in 'Sband_DM30.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM30.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM25.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM25.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 79 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '375.34', width=5)

width < len (8) in center_string(outstring, '70527.39', width=6)

width < len (12) in center_string(outstring, '592712914.19', width=8)

width < len (7) in center_string(outstring, '2019.87', width=6)

width < len (7) in center_string(outstring, '4370.19', width=5)

width < len (16) in center_string(outstring, ' 9.5493(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.126(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255329(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.10', width=5)

width < len (16) in center_string(outstring, ' 9.5401(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018251(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3934.75', width=5)

width < len (16) in center_string(outstring, ' 7.7411(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027377(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926315(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4361.59', width=5)

width < len (16) in center_string(outstring, ' 9.5117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929108(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.22', width=5)

width < len (16) in center_string(outstring, ' 9.4927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045628(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931915(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.12', width=5)

width < len (16) in center_string(outstring, ' 9.4705(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054753(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934708(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.29', width=5)

width < len (16) in center_string(outstring, ' 9.4451(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063879(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937500(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.75', width=5)

width < len (16) in center_string(outstring, ' 9.4167(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073004(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940292(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.500 sec, System: 0.020 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM25.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM25.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM51.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM51.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '756.26', width=5)

width < len (9) in center_string(outstring, '286059.47', width=6)

width < len (12) in center_string(outstring, '583584456.23', width=8)

width < len (7) in center_string(outstring, '3032.15', width=6)

width < len (7) in center_string(outstring, '4394.16', width=5)

width < len (16) in center_string(outstring, ' 9.6543(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.871(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254218(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.41', width=5)

width < len (16) in center_string(outstring, ' 9.6423(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017743(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922379(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3952.93', width=5)

width < len (16) in center_string(outstring, ' 7.8128(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026614(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '3947.22', width=5)

width < len (16) in center_string(outstring, ' 7.7903(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035486(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927841(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4378.70', width=5)

width < len (16) in center_string(outstring, ' 9.5865(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044357(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930573(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4373.05', width=5)

width < len (16) in center_string(outstring, ' 9.5618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053228(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933304(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4366.70', width=5)

width < len (16) in center_string(outstring, ' 9.5340(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062100(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936035(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4359.67', width=5)

width < len (16) in center_string(outstring, ' 9.5034(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.6(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.8)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM51.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM51.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM5.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM5.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '595.91', width=5)

width < len (9) in center_string(outstring, '177647.94', width=6)

width < len (12) in center_string(outstring, '589149983.09', width=8)

width < len (7) in center_string(outstring, '1665.53', width=6)

width < len (7) in center_string(outstring, '4356.91', width=5)

width < len (16) in center_string(outstring, ' 9.4914(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254357(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.89', width=5)

width < len (16) in center_string(outstring, ' 9.4825(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922562(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4352.08', width=5)

width < len (16) in center_string(outstring, ' 9.4703(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4348.51', width=5)

width < len (16) in center_string(outstring, ' 9.4548(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928192(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4344.20', width=5)

width < len (16) in center_string(outstring, ' 9.4360(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931015(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4339.15', width=5)

width < len (16) in center_string(outstring, ' 9.4141(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933823(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3903.76', width=5)

width < len (16) in center_string(outstring, ' 7.6197(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936646(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4326.87', width=5)

width < len (16) in center_string(outstring, ' 9.3609(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939468(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.440 sec (User: 0.430 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM5.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM5.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM43.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM43.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '702.66', width=5)

width < len (9) in center_string(outstring, '246958.70', width=6)

width < len (12) in center_string(outstring, '596864660.17', width=8)

width < len (7) in center_string(outstring, '4053.78', width=6)

width < len (7) in center_string(outstring, '4386.61', width=5)

width < len (16) in center_string(outstring, ' 9.6212(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.977(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253257(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4384.17', width=5)

width < len (16) in center_string(outstring, ' 9.6105(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017954(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921432(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3948.71', width=5)

width < len (16) in center_string(outstring, ' 7.7962(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026930(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924194(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4376.97', width=5)

width < len (16) in center_string(outstring, ' 9.5790(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035907(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926956(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4372.29', width=5)

width < len (16) in center_string(outstring, ' 9.5585(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044884(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929703(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4366.89', width=5)

width < len (16) in center_string(outstring, ' 9.5349(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932465(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4360.78', width=5)

width < len (16) in center_string(outstring, ' 9.5082(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062838(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4353.96', width=5)

width < len (16) in center_string(outstring, ' 9.4785(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071814(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(3.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.4(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM43.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM43.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM80.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM80.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 39 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1030.52', width=5)

width < len (9) in center_string(outstring, '531082.25', width=6)

width < len (12) in center_string(outstring, '590388365.37', width=8)

width < len (7) in center_string(outstring, '2623.72', width=6)

width < len (7) in center_string(outstring, '4424.53', width=5)

width < len (16) in center_string(outstring, ' 9.7882(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252682(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4420.58', width=5)

width < len (16) in center_string(outstring, ' 9.7708(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920883(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '3977.78', width=5)

width < len (16) in center_string(outstring, ' 7.9114(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027633(25)', width=12)

width < len (15) in center_string(outstring, ' 166.923706(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(17)', width=10)

width < len (7) in center_string(outstring, '4410.21', width=5)

width < len (16) in center_string(outstring, ' 9.7250(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926514(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '3963.21', width=5)

width < len (16) in center_string(outstring, ' 7.8535(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046055(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929337(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(17)', width=10)

width < len (7) in center_string(outstring, '4396.78', width=5)

width < len (16) in center_string(outstring, ' 9.6659(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932144(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4388.95', width=5)

width < len (16) in center_string(outstring, ' 9.6314(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064478(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4380.39', width=5)

width < len (16) in center_string(outstring, ' 9.5939(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073689(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937775(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(9.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.360 sec (User: 0.350 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM80.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM80.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM29.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM29.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '352.30', width=5)

width < len (8) in center_string(outstring, '62143.55', width=6)

width < len (12) in center_string(outstring, '593258675.79', width=8)

width < len (7) in center_string(outstring, '1855.43', width=6)

width < len (7) in center_string(outstring, '4370.86', width=5)

width < len (16) in center_string(outstring, ' 9.5522(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256479(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3941.97', width=5)

width < len (16) in center_string(outstring, ' 7.7696(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(26)', width=12)

width < len (13) in center_string(outstring, ' 0.257766(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(17)', width=10)

width < len (7) in center_string(outstring, '4366.15', width=5)

width < len (16) in center_string(outstring, ' 9.5317(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927002(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (7) in center_string(outstring, '4362.77', width=5)

width < len (16) in center_string(outstring, ' 9.5169(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929565(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4358.73', width=5)

width < len (16) in center_string(outstring, ' 9.4993(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932129(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4354.03', width=5)

width < len (16) in center_string(outstring, ' 9.4788(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934692(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4348.67', width=5)

width < len (16) in center_string(outstring, ' 9.4555(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4342.67', width=5)

width < len (16) in center_string(outstring, ' 9.4294(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939835(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.2)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(6.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.620 sec (User: 0.610 sec, System: 0.010 sec)
  Total time: 0.620 sec

Final candidates in binary format are in 'Sband_DM29.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM29.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM8.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM8.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 58 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '610.95', width=5)

width < len (9) in center_string(outstring, '186719.67', width=6)

width < len (12) in center_string(outstring, '574810160.42', width=8)

width < len (7) in center_string(outstring, '2023.21', width=6)

width < len (7) in center_string(outstring, '4358.22', width=5)

width < len (16) in center_string(outstring, ' 9.4971(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255176(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4356.12', width=5)

width < len (16) in center_string(outstring, ' 9.4879(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923386(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.22', width=5)

width < len (16) in center_string(outstring, ' 9.4753(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926193(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4349.58', width=5)

width < len (16) in center_string(outstring, ' 9.4594(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929016(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3916.60', width=5)

width < len (16) in center_string(outstring, ' 7.6699(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931824(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3910.50', width=5)

width < len (16) in center_string(outstring, ' 7.6460(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934647(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4334.19', width=5)

width < len (16) in center_string(outstring, ' 9.3926(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937454(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4327.61', width=5)

width < len (16) in center_string(outstring, ' 9.3641(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940277(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(4.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(7.6)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.360 sec (User: 0.350 sec, System: 0.010 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM8.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM8.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM59.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM59.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '872.84', width=5)

width < len (9) in center_string(outstring, '381024.12', width=6)

width < len (12) in center_string(outstring, '598620289.46', width=8)

width < len (7) in center_string(outstring, '3223.13', width=6)

width < len (7) in center_string(outstring, '4395.05', width=5)

width < len (16) in center_string(outstring, ' 9.6582(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4392.12', width=5)

width < len (16) in center_string(outstring, ' 9.6454(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921295(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4388.45', width=5)

width < len (16) in center_string(outstring, ' 9.6293(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923859(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4384.11', width=5)

width < len (16) in center_string(outstring, ' 9.6102(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926422(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.11', width=5)

width < len (16) in center_string(outstring, ' 9.5883(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928986(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3935.02', width=5)

width < len (16) in center_string(outstring, ' 7.7422(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931549(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4367.13', width=5)

width < len (16) in center_string(outstring, ' 9.5359(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934113(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4360.17', width=5)

width < len (16) in center_string(outstring, ' 9.5055(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936661(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM59.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM59.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM5.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM5.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '592.93', width=5)

width < len (9) in center_string(outstring, '175875.11', width=6)

width < len (12) in center_string(outstring, '589029699.44', width=8)

width < len (7) in center_string(outstring, '1694.37', width=6)

width < len (7) in center_string(outstring, '4356.39', width=5)

width < len (16) in center_string(outstring, ' 9.4891(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253341(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.36', width=5)

width < len (16) in center_string(outstring, ' 9.4802(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921539(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4351.54', width=5)

width < len (16) in center_string(outstring, ' 9.4680(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924362(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4347.97', width=5)

width < len (16) in center_string(outstring, ' 9.4524(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927170(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4343.66', width=5)

width < len (16) in center_string(outstring, ' 9.4337(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929993(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3909.80', width=5)

width < len (16) in center_string(outstring, ' 7.6433(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932816(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4332.82', width=5)

width < len (16) in center_string(outstring, ' 9.3867(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935623(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4326.31', width=5)

width < len (16) in center_string(outstring, ' 9.3585(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938446(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM5.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM5.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM7.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM7.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '604.10', width=5)

width < len (9) in center_string(outstring, '182562.95', width=6)

width < len (12) in center_string(outstring, '589398381.57', width=8)

width < len (7) in center_string(outstring, '1866.40', width=6)

width < len (7) in center_string(outstring, '4358.32', width=5)

width < len (16) in center_string(outstring, ' 9.4975(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254669(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.20', width=5)

width < len (16) in center_string(outstring, ' 9.4883(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922867(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4353.29', width=5)

width < len (16) in center_string(outstring, ' 9.4756(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4349.63', width=5)

width < len (16) in center_string(outstring, ' 9.4597(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928513(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.22', width=5)

width < len (16) in center_string(outstring, ' 9.4405(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931320(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4340.08', width=5)

width < len (16) in center_string(outstring, ' 9.4181(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934143(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3903.25', width=5)

width < len (16) in center_string(outstring, ' 7.6177(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936951(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4327.60', width=5)

width < len (16) in center_string(outstring, ' 9.3641(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939774(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(9.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.6(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.8(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.430 sec, System: 0.020 sec)
  Total time: 0.450 sec

Final candidates in binary format are in 'Sband_DM7.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM7.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM35.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM35.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 80 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '420.53', width=5)

width < len (8) in center_string(outstring, '88508.97', width=6)

width < len (12) in center_string(outstring, '595179426.42', width=8)

width < len (7) in center_string(outstring, '2371.19', width=6)

width < len (7) in center_string(outstring, '4379.71', width=5)

width < len (16) in center_string(outstring, ' 9.5910(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.041(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254619(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '3946.07', width=5)

width < len (16) in center_string(outstring, ' 7.7857(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018082(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922806(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4374.45', width=5)

width < len (16) in center_string(outstring, ' 9.5679(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925583(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4370.69', width=5)

width < len (16) in center_string(outstring, ' 9.5515(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036163(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928360(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4366.20', width=5)

width < len (16) in center_string(outstring, ' 9.5319(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045204(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4360.98', width=5)

width < len (16) in center_string(outstring, ' 9.5091(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054245(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933899(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.05', width=5)

width < len (16) in center_string(outstring, ' 9.4832(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4348.41', width=5)

width < len (16) in center_string(outstring, ' 9.4543(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072326(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939453(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.7)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM35.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM35.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM8.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM8.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '607.84', width=5)

width < len (9) in center_string(outstring, '184825.45', width=6)

width < len (12) in center_string(outstring, '589192473.55', width=8)

width < len (7) in center_string(outstring, '1986.41', width=6)

width < len (7) in center_string(outstring, '4357.40', width=5)

width < len (16) in center_string(outstring, ' 9.4935(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253094(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.29', width=5)

width < len (16) in center_string(outstring, ' 9.4843(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921295(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4352.39', width=5)

width < len (16) in center_string(outstring, ' 9.4716(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924118(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4348.74', width=5)

width < len (16) in center_string(outstring, ' 9.4558(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.34', width=5)

width < len (16) in center_string(outstring, ' 9.4366(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929749(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3909.36', width=5)

width < len (16) in center_string(outstring, ' 7.6416(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932556(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4333.34', width=5)

width < len (16) in center_string(outstring, ' 9.3889(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935379(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4326.75', width=5)

width < len (16) in center_string(outstring, ' 9.3604(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938187(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(7.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM8.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM8.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM73.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM73.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1010.53', width=5)

width < len (9) in center_string(outstring, '510681.56', width=6)

width < len (12) in center_string(outstring, '587878920.43', width=8)

width < len (7) in center_string(outstring, '3000.83', width=6)

width < len (7) in center_string(outstring, '4412.36', width=5)

width < len (16) in center_string(outstring, ' 9.7345(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254091(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4409.02', width=5)

width < len (16) in center_string(outstring, ' 9.7197(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922043(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4404.94', width=5)

width < len (16) in center_string(outstring, ' 9.7017(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4400.17', width=5)

width < len (16) in center_string(outstring, ' 9.6808(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927170(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3957.25', width=5)

width < len (16) in center_string(outstring, ' 7.8299(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929733(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4388.63', width=5)

width < len (16) in center_string(outstring, ' 9.6301(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932281(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3942.47', width=5)

width < len (16) in center_string(outstring, ' 7.7715(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934845(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4374.48', width=5)

width < len (16) in center_string(outstring, ' 9.5680(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937408(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(7.5)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.330 sec, System: 0.010 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM73.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM73.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM10.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM10.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '634.52', width=5)

width < len (9) in center_string(outstring, '201403.66', width=6)

width < len (12) in center_string(outstring, '590182862.59', width=8)

width < len (7) in center_string(outstring, '2354.28', width=6)

width < len (7) in center_string(outstring, '4361.06', width=5)

width < len (16) in center_string(outstring, ' 9.5094(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254098(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.93', width=5)

width < len (16) in center_string(outstring, ' 9.5001(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922302(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4356.00', width=5)

width < len (16) in center_string(outstring, ' 9.4874(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4352.32', width=5)

width < len (16) in center_string(outstring, ' 9.4713(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4347.89', width=5)

width < len (16) in center_string(outstring, ' 9.4521(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930756(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3913.22', width=5)

width < len (16) in center_string(outstring, ' 7.6567(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933563(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4336.82', width=5)

width < len (16) in center_string(outstring, ' 9.4040(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936386(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4330.20', width=5)

width < len (16) in center_string(outstring, ' 9.3753(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939194(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM10.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM10.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM20.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM20.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '527.33', width=5)

width < len (9) in center_string(outstring, '139126.83', width=6)

width < len (12) in center_string(outstring, '606784796.08', width=8)

width < len (7) in center_string(outstring, '3299.74', width=6)

width < len (7) in center_string(outstring, '4367.22', width=5)

width < len (16) in center_string(outstring, ' 9.5363(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.185(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4365.13', width=5)

width < len (16) in center_string(outstring, ' 9.5272(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018370(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924088(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4362.24', width=5)

width < len (16) in center_string(outstring, ' 9.5146(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027554(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926895(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.59', width=5)

width < len (16) in center_string(outstring, ' 9.4987(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036739(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929703(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4354.21', width=5)

width < len (16) in center_string(outstring, ' 9.4796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045924(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932510(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4349.08', width=5)

width < len (16) in center_string(outstring, ' 9.4572(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055109(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.22', width=5)

width < len (16) in center_string(outstring, ' 9.4318(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4336.64', width=5)

width < len (16) in center_string(outstring, ' 9.4032(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073478(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940933(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.670 sec (User: 0.660 sec, System: 0.010 sec)
  Total time: 0.670 sec

Final candidates in binary format are in 'Sband_DM20.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM20.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM79.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM79.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1028.94', width=5)

width < len (9) in center_string(outstring, '529457.06', width=6)

width < len (12) in center_string(outstring, '605768243.19', width=8)

width < len (7) in center_string(outstring, '2704.55', width=6)

width < len (7) in center_string(outstring, '4424.63', width=5)

width < len (16) in center_string(outstring, ' 9.7887(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253984(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3983.12', width=5)

width < len (16) in center_string(outstring, ' 7.9326(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4416.09', width=5)

width < len (16) in center_string(outstring, ' 9.7509(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925003(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4410.62', width=5)

width < len (16) in center_string(outstring, ' 9.7268(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927811(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4404.39', width=5)

width < len (16) in center_string(outstring, ' 9.6993(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '4397.40', width=5)

width < len (16) in center_string(outstring, ' 9.6686(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933456(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4389.67', width=5)

width < len (16) in center_string(outstring, ' 9.6346(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4381.20', width=5)

width < len (16) in center_string(outstring, ' 9.5975(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939087(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM79.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM79.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM19.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM19.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '539.44', width=5)

width < len (9) in center_string(outstring, '145589.14', width=6)

width < len (12) in center_string(outstring, '607070425.24', width=8)

width < len (7) in center_string(outstring, '3372.39', width=6)

width < len (7) in center_string(outstring, '4368.21', width=5)

width < len (16) in center_string(outstring, ' 9.5407(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253978(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.14', width=5)

width < len (16) in center_string(outstring, ' 9.5316(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.26', width=5)

width < len (16) in center_string(outstring, ' 9.5190(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4359.62', width=5)

width < len (16) in center_string(outstring, ' 9.5032(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927811(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4355.24', width=5)

width < len (16) in center_string(outstring, ' 9.4841(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.12', width=5)

width < len (16) in center_string(outstring, ' 9.4618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055218(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.25', width=5)

width < len (16) in center_string(outstring, ' 9.4363(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936249(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4337.67', width=5)

width < len (16) in center_string(outstring, ' 9.4077(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939072(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.450 sec, System: 0.000 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM19.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM19.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM81.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM81.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1039.79', width=5)

width < len (9) in center_string(outstring, '540683.31', width=6)

width < len (12) in center_string(outstring, '605857024.33', width=8)

width < len (7) in center_string(outstring, '2607.88', width=6)

width < len (7) in center_string(outstring, '4425.29', width=5)

width < len (16) in center_string(outstring, ' 9.7916(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253675(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '3984.13', width=5)

width < len (16) in center_string(outstring, ' 7.9367(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4416.52', width=5)

width < len (16) in center_string(outstring, ' 9.7528(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924698(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4410.94', width=5)

width < len (16) in center_string(outstring, ' 9.7282(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927505(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4404.59', width=5)

width < len (16) in center_string(outstring, ' 9.7002(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930328(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4397.49', width=5)

width < len (16) in center_string(outstring, ' 9.6690(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933136(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(16)', width=10)

width < len (7) in center_string(outstring, '4389.64', width=5)

width < len (16) in center_string(outstring, ' 9.6345(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935959(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4381.07', width=5)

width < len (16) in center_string(outstring, ' 9.5969(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(2.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM81.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM81.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM28.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM28.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 93 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '351.68', width=5)

width < len (8) in center_string(outstring, '61925.47', width=6)

width < len (12) in center_string(outstring, '607545552.52', width=8)

width < len (7) in center_string(outstring, '1853.72', width=6)

width < len (7) in center_string(outstring, '4370.18', width=5)

width < len (16) in center_string(outstring, ' 9.5493(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.106(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253863(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4368.00', width=5)

width < len (16) in center_string(outstring, ' 9.5397(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018211(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922058(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4365.04', width=5)

width < len (16) in center_string(outstring, ' 9.5268(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027317(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4361.33', width=5)

width < len (16) in center_string(outstring, ' 9.5106(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036423(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927628(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4356.88', width=5)

width < len (16) in center_string(outstring, ' 9.4912(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045528(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930420(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.71', width=5)

width < len (16) in center_string(outstring, ' 9.4687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933212(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.81', width=5)

width < len (16) in center_string(outstring, ' 9.4430(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063739(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936005(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4339.20', width=5)

width < len (16) in center_string(outstring, ' 9.4143(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072845(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938797(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.690 sec (User: 0.680 sec, System: 0.010 sec)
  Total time: 0.690 sec

Final candidates in binary format are in 'Sband_DM28.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM28.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM39.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM39.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '586.25', width=5)

width < len (9) in center_string(outstring, '171937.31', width=6)

width < len (12) in center_string(outstring, '595700633.59', width=8)

width < len (7) in center_string(outstring, '3717.54', width=6)

width < len (7) in center_string(outstring, '3952.05', width=5)

width < len (16) in center_string(outstring, ' 7.8094(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.003(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254229(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(17)', width=10)

width < len (7) in center_string(outstring, '4379.46', width=5)

width < len (16) in center_string(outstring, ' 9.5898(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018006(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922409(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.31', width=5)

width < len (16) in center_string(outstring, ' 9.5760(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027009(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925171(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4372.42', width=5)

width < len (16) in center_string(outstring, ' 9.5590(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036012(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.81', width=5)

width < len (16) in center_string(outstring, ' 9.5389(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930695(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4362.48', width=5)

width < len (16) in center_string(outstring, ' 9.5156(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054019(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933472(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.44', width=5)

width < len (16) in center_string(outstring, ' 9.4893(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063022(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936234(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.70', width=5)

width < len (16) in center_string(outstring, ' 9.4599(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072025(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938995(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(8.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.600 sec (User: 0.580 sec, System: 0.020 sec)
  Total time: 0.590 sec

Final candidates in binary format are in 'Sband_DM39.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM39.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM17.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM17.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '599.67', width=5)

width < len (9) in center_string(outstring, '179892.53', width=6)

width < len (12) in center_string(outstring, '576948298.22', width=8)

width < len (7) in center_string(outstring, '3588.51', width=6)

width < len (7) in center_string(outstring, '4365.62', width=5)

width < len (16) in center_string(outstring, ' 9.5293(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.216(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256228(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.67', width=5)

width < len (16) in center_string(outstring, ' 9.5208(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924194(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '3932.08', width=5)

width < len (16) in center_string(outstring, ' 7.7306(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027647(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926773(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(18)', width=10)

width < len (7) in center_string(outstring, '4357.68', width=5)

width < len (16) in center_string(outstring, ' 9.4947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929352(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4353.68', width=5)

width < len (16) in center_string(outstring, ' 9.4773(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046078(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931931(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4349.02', width=5)

width < len (16) in center_string(outstring, ' 9.4570(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934525(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4343.70', width=5)

width < len (16) in center_string(outstring, ' 9.4339(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064509(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937103(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(16)', width=10)

width < len (7) in center_string(outstring, '3903.59', width=5)

width < len (16) in center_string(outstring, ' 7.6190(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939682(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.7)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.570 sec (User: 0.560 sec, System: 0.010 sec)
  Total time: 0.570 sec

Final candidates in binary format are in 'Sband_DM17.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM17.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM13.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM13.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '661.16', width=5)

width < len (9) in center_string(outstring, '218662.78', width=6)

width < len (12) in center_string(outstring, '590903638.85', width=8)

width < len (7) in center_string(outstring, '3236.50', width=6)

width < len (7) in center_string(outstring, '4364.41', width=5)

width < len (16) in center_string(outstring, ' 9.5241(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253796(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.20', width=5)

width < len (16) in center_string(outstring, ' 9.5144(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921997(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4359.20', width=5)

width < len (16) in center_string(outstring, ' 9.5013(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924820(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4355.45', width=5)

width < len (16) in center_string(outstring, ' 9.4850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927628(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4350.94', width=5)

width < len (16) in center_string(outstring, ' 9.4654(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930450(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.48', width=5)

width < len (16) in center_string(outstring, ' 7.6537(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933258(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4339.72', width=5)

width < len (16) in center_string(outstring, ' 9.4166(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936081(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4333.01', width=5)

width < len (16) in center_string(outstring, ' 9.3875(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938889(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.530 sec, System: 0.010 sec)
  Total time: 0.540 sec

Final candidates in binary format are in 'Sband_DM13.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM13.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM52.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM52.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '775.49', width=5)

width < len (9) in center_string(outstring, '300789.31', width=6)

width < len (12) in center_string(outstring, '614123410.75', width=8)

width < len (7) in center_string(outstring, '3092.28', width=6)

width < len (7) in center_string(outstring, '4395.55', width=5)

width < len (16) in center_string(outstring, ' 9.6605(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.869(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251640(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4392.81', width=5)

width < len (16) in center_string(outstring, ' 9.6484(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017738(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919800(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4389.28', width=5)

width < len (16) in center_string(outstring, ' 9.6329(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026607(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4385.04', width=5)

width < len (16) in center_string(outstring, ' 9.6143(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925262(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4380.09', width=5)

width < len (16) in center_string(outstring, ' 9.5926(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044344(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927994(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4374.43', width=5)

width < len (16) in center_string(outstring, ' 9.5678(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053213(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930725(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4368.08', width=5)

width < len (16) in center_string(outstring, ' 9.5401(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062082(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933456(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4361.05', width=5)

width < len (16) in center_string(outstring, ' 9.5094(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070951(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=10)

width < len (14) in center_string(outstring, '-0.3(3.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM52.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM52.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM57.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM57.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '843.94', width=5)

width < len (9) in center_string(outstring, '356217.66', width=6)

width < len (12) in center_string(outstring, '613508456.44', width=8)

width < len (7) in center_string(outstring, '3110.26', width=6)

width < len (7) in center_string(outstring, '4394.12', width=5)

width < len (16) in center_string(outstring, ' 9.6541(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.795(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253863(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4391.13', width=5)

width < len (16) in center_string(outstring, ' 9.6410(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017589(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922028(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4387.38', width=5)

width < len (16) in center_string(outstring, ' 9.6245(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026384(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924728(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4382.92', width=5)

width < len (16) in center_string(outstring, ' 9.6050(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035178(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927444(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4377.76', width=5)

width < len (16) in center_string(outstring, ' 9.5824(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043973(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930161(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.91', width=5)

width < len (16) in center_string(outstring, ' 9.5568(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052767(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932877(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4365.39', width=5)

width < len (16) in center_string(outstring, ' 9.5283(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935577(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4358.18', width=5)

width < len (16) in center_string(outstring, ' 9.4969(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070356(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.1)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM57.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM57.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM24.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM24.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 87 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '396.68', width=5)

width < len (8) in center_string(outstring, '78764.85', width=6)

width < len (12) in center_string(outstring, '592373703.11', width=8)

width < len (7) in center_string(outstring, '2178.17', width=6)

width < len (7) in center_string(outstring, '3942.51', width=5)

width < len (16) in center_string(outstring, ' 7.7717(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.129(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255768(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(17)', width=10)

width < len (7) in center_string(outstring, '4366.41', width=5)

width < len (16) in center_string(outstring, ' 9.5328(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923965(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4363.49', width=5)

width < len (16) in center_string(outstring, ' 9.5200(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027387(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926758(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4359.82', width=5)

width < len (16) in center_string(outstring, ' 9.5040(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929550(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.41', width=5)

width < len (16) in center_string(outstring, ' 9.4848(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932358(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(16)', width=10)

width < len (7) in center_string(outstring, '4350.27', width=5)

width < len (16) in center_string(outstring, ' 9.4624(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054774(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4344.41', width=5)

width < len (16) in center_string(outstring, ' 9.4369(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063903(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937943(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4337.83', width=5)

width < len (16) in center_string(outstring, ' 9.4084(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073032(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940750(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(4.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.9)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.550 sec (User: 0.540 sec, System: 0.010 sec)
  Total time: 0.540 sec

Final candidates in binary format are in 'Sband_DM24.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM24.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM13.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM13.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '663.70', width=5)

width < len (9) in center_string(outstring, '220341.02', width=6)

width < len (12) in center_string(outstring, '590596538.99', width=8)

width < len (7) in center_string(outstring, '3172.57', width=6)

width < len (7) in center_string(outstring, '4363.38', width=5)

width < len (16) in center_string(outstring, ' 9.5196(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254004(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.14', width=5)

width < len (16) in center_string(outstring, ' 9.5098(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922211(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.10', width=5)

width < len (16) in center_string(outstring, ' 9.4965(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925018(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4354.30', width=5)

width < len (16) in center_string(outstring, ' 9.4800(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927841(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4349.76', width=5)

width < len (16) in center_string(outstring, ' 9.4602(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930649(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3911.58', width=5)

width < len (16) in center_string(outstring, ' 7.6503(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933472(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4338.47', width=5)

width < len (16) in center_string(outstring, ' 9.4112(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936295(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.74', width=5)

width < len (16) in center_string(outstring, ' 9.3820(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939102(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.590 sec (User: 0.580 sec, System: 0.010 sec)
  Total time: 0.590 sec

Final candidates in binary format are in 'Sband_DM13.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM13.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM61.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM61.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '887.28', width=5)

width < len (9) in center_string(outstring, '393732.53', width=6)

width < len (12) in center_string(outstring, '584392336.05', width=8)

width < len (7) in center_string(outstring, '3198.81', width=6)

width < len (7) in center_string(outstring, '4399.20', width=5)

width < len (16) in center_string(outstring, ' 9.6765(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.757(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254093(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4396.07', width=5)

width < len (16) in center_string(outstring, ' 9.6627(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017515(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922241(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4392.19', width=5)

width < len (16) in center_string(outstring, ' 9.6457(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026272(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924957(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4387.60', width=5)

width < len (16) in center_string(outstring, ' 9.6255(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035029(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927658(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3943.69', width=5)

width < len (16) in center_string(outstring, ' 7.7763(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043787(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930359(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(17)', width=10)

width < len (7) in center_string(outstring, '3936.66', width=5)

width < len (16) in center_string(outstring, ' 7.7487(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052544(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(17)', width=10)

width < len (7) in center_string(outstring, '4369.70', width=5)

width < len (16) in center_string(outstring, ' 9.5471(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061302(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935760(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4362.38', width=5)

width < len (16) in center_string(outstring, ' 9.5152(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070059(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938461(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.510 sec, System: 0.010 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM61.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM61.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM44.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM44.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '699.64', width=5)

width < len (9) in center_string(outstring, '244841.91', width=6)

width < len (12) in center_string(outstring, '597754061.17', width=8)

width < len (7) in center_string(outstring, '3816.87', width=6)

width < len (7) in center_string(outstring, '4389.48', width=5)

width < len (16) in center_string(outstring, ' 9.6338(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253019(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4387.12', width=5)

width < len (16) in center_string(outstring, ' 9.6234(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920959(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.04', width=5)

width < len (16) in center_string(outstring, ' 9.6099(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '3945.13', width=5)

width < len (16) in center_string(outstring, ' 7.7820(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926086(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(17)', width=10)

width < len (7) in center_string(outstring, '4375.86', width=5)

width < len (16) in center_string(outstring, ' 9.5741(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928650(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4370.78', width=5)

width < len (16) in center_string(outstring, ' 9.5519(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931213(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4365.04', width=5)

width < len (16) in center_string(outstring, ' 9.5268(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933762(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4358.65', width=5)

width < len (16) in center_string(outstring, ' 9.4989(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936325(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.5)x10^-1', width=10)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.6(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.510 sec, System: 0.020 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM44.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM44.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM30.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM30.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 89 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  12%
Amount of optimization complete =  16%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  29%
Amount of optimization complete =  33%
Amount of optimization complete =  37%
Amount of optimization complete =  41%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  58%
Amount of optimization complete =  62%
Amount of optimization complete =  66%
Amount of optimization complete =  70%
Amount of optimization complete =  75%
Amount of optimization complete =  79%
Amount of optimization complete =  83%
Amount of optimization complete =  87%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '357.12', width=5)

width < len (8) in center_string(outstring, '63851.82', width=6)

width < len (12) in center_string(outstring, '608242306.60', width=8)

width < len (7) in center_string(outstring, '1906.16', width=6)

width < len (7) in center_string(outstring, '4372.66', width=5)

width < len (16) in center_string(outstring, ' 9.5601(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.097(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255013(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4370.49', width=5)

width < len (16) in center_string(outstring, ' 9.5506(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018193(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923203(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4367.53', width=5)

width < len (16) in center_string(outstring, ' 9.5377(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925995(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4363.82', width=5)

width < len (16) in center_string(outstring, ' 9.5215(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036386(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928772(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.38', width=5)

width < len (16) in center_string(outstring, ' 9.5021(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045483(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931564(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4354.21', width=5)

width < len (16) in center_string(outstring, ' 9.4796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054579(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934357(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4348.32', width=5)

width < len (16) in center_string(outstring, ' 9.4539(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937134(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4341.72', width=5)

width < len (16) in center_string(outstring, ' 9.4253(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072772(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(7.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.660 sec (User: 0.640 sec, System: 0.020 sec)
  Total time: 0.690 sec

Final candidates in binary format are in 'Sband_DM30.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM30.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM63.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM63.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '912.32', width=5)

width < len (9) in center_string(outstring, '416260.38', width=6)

width < len (12) in center_string(outstring, '601290198.78', width=8)

width < len (7) in center_string(outstring, '3250.13', width=6)

width < len (7) in center_string(outstring, '4405.54', width=5)

width < len (16) in center_string(outstring, ' 9.7044(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253174(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.48', width=5)

width < len (16) in center_string(outstring, ' 9.6909(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921127(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4398.69', width=5)

width < len (16) in center_string(outstring, ' 9.6742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4394.22', width=5)

width < len (16) in center_string(outstring, ' 9.6546(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926239(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4389.08', width=5)

width < len (16) in center_string(outstring, ' 9.6320(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928802(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3941.71', width=5)

width < len (16) in center_string(outstring, ' 7.7685(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931366(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4376.81', width=5)

width < len (16) in center_string(outstring, ' 9.5783(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933929(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4369.71', width=5)

width < len (16) in center_string(outstring, ' 9.5472(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936493(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(8.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.360 sec, System: 0.020 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM63.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM63.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM5.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM5.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '596.31', width=5)

width < len (9) in center_string(outstring, '177884.62', width=6)

width < len (12) in center_string(outstring, '588811745.93', width=8)

width < len (7) in center_string(outstring, '1710.51', width=6)

width < len (7) in center_string(outstring, '4355.81', width=5)

width < len (16) in center_string(outstring, ' 9.4866(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254670(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4353.75', width=5)

width < len (16) in center_string(outstring, ' 9.4776(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922867(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4350.91', width=5)

width < len (16) in center_string(outstring, ' 9.4652(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4347.31', width=5)

width < len (16) in center_string(outstring, ' 9.4496(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928513(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4342.97', width=5)

width < len (16) in center_string(outstring, ' 9.4307(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931320(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4337.89', width=5)

width < len (16) in center_string(outstring, ' 9.4086(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934143(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3902.32', width=5)

width < len (16) in center_string(outstring, ' 7.6141(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936966(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4325.55', width=5)

width < len (16) in center_string(outstring, ' 9.3552(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939774(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.7)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM5.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM5.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM36.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM36.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  13%
Amount of optimization complete =  18%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  40%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  59%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  81%
Amount of optimization complete =  86%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '470.02', width=5)

width < len (9) in center_string(outstring, '110549.03', width=6)

width < len (12) in center_string(outstring, '595565424.99', width=8)

width < len (7) in center_string(outstring, '2821.80', width=6)

width < len (7) in center_string(outstring, '4380.14', width=5)

width < len (16) in center_string(outstring, ' 9.5928(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256474(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3947.57', width=5)

width < len (16) in center_string(outstring, ' 7.7917(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(26)', width=12)

width < len (13) in center_string(outstring, ' 0.257761(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(17)', width=10)

width < len (7) in center_string(outstring, '4375.17', width=5)

width < len (16) in center_string(outstring, ' 9.5711(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926987(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4371.66', width=5)

width < len (16) in center_string(outstring, ' 9.5557(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929565(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4367.47', width=5)

width < len (16) in center_string(outstring, ' 9.5374(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932129(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4362.63', width=5)

width < len (16) in center_string(outstring, ' 9.5163(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934692(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788818(16)', width=10)

width < len (7) in center_string(outstring, '4357.13', width=5)

width < len (16) in center_string(outstring, ' 9.4923(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789505(16)', width=10)

width < len (7) in center_string(outstring, '4350.98', width=5)

width < len (16) in center_string(outstring, ' 9.4655(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939819(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.620 sec (User: 0.610 sec, System: 0.010 sec)
  Total time: 0.620 sec

Final candidates in binary format are in 'Sband_DM36.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM36.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM33.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM33.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 97 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '379.19', width=5)

width < len (8) in center_string(outstring, '71976.62', width=6)

width < len (12) in center_string(outstring, '593263294.30', width=8)

width < len (7) in center_string(outstring, '2067.69', width=6)

width < len (7) in center_string(outstring, '4372.37', width=5)

width < len (16) in center_string(outstring, ' 9.5588(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.063(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255490(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4370.17', width=5)

width < len (16) in center_string(outstring, ' 9.5492(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018126(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '3937.89', width=5)

width < len (16) in center_string(outstring, ' 7.7535(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027189(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926453(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(17)', width=10)

width < len (7) in center_string(outstring, '4363.46', width=5)

width < len (16) in center_string(outstring, ' 9.5199(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036252(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929230(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.01', width=5)

width < len (16) in center_string(outstring, ' 9.5005(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045316(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932022(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.83', width=5)

width < len (16) in center_string(outstring, ' 9.4779(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054379(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934799(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4347.94', width=5)

width < len (16) in center_string(outstring, ' 9.4523(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4341.34', width=5)

width < len (16) in center_string(outstring, ' 9.4236(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940353(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.570 sec (User: 0.560 sec, System: 0.010 sec)
  Total time: 0.570 sec

Final candidates in binary format are in 'Sband_DM33.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM33.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM35.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM35.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 76 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '429.40', width=5)

width < len (8) in center_string(outstring, '92278.48', width=6)

width < len (12) in center_string(outstring, '595628386.47', width=8)

width < len (7) in center_string(outstring, '2437.23', width=6)

width < len (7) in center_string(outstring, '4381.84', width=5)

width < len (16) in center_string(outstring, ' 9.6002(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.056(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254408(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4379.58', width=5)

width < len (16) in center_string(outstring, ' 9.5904(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018112(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922592(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.54', width=5)

width < len (16) in center_string(outstring, ' 9.5771(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027168(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925369(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3937.97', width=5)

width < len (16) in center_string(outstring, ' 7.7538(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036224(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(17)', width=10)

width < len (7) in center_string(outstring, '4368.24', width=5)

width < len (16) in center_string(outstring, ' 9.5408(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930923(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4363.00', width=5)

width < len (16) in center_string(outstring, ' 9.5179(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054336(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933701(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4357.04', width=5)

width < len (16) in center_string(outstring, ' 9.4919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063392(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936478(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.36', width=5)

width < len (16) in center_string(outstring, ' 9.4628(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072448(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939255(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.520 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM35.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM35.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM6.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM6.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '599.38', width=5)

width < len (9) in center_string(outstring, '179721.42', width=6)

width < len (12) in center_string(outstring, '574945155.89', width=8)

width < len (7) in center_string(outstring, '1762.75', width=6)

width < len (7) in center_string(outstring, '4358.33', width=5)

width < len (16) in center_string(outstring, ' 9.4975(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.212(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251741(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3931.54', width=5)

width < len (16) in center_string(outstring, ' 7.7285(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(26)', width=12)

width < len (15) in center_string(outstring, ' 166.919937(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(18)', width=10)

width < len (7) in center_string(outstring, '4353.39', width=5)

width < len (16) in center_string(outstring, ' 9.4760(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027635(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922760(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4349.77', width=5)

width < len (16) in center_string(outstring, ' 9.4602(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036847(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925583(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.40', width=5)

width < len (16) in center_string(outstring, ' 9.4413(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046058(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928391(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4340.30', width=5)

width < len (16) in center_string(outstring, ' 9.4191(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055270(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931213(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4334.46', width=5)

width < len (16) in center_string(outstring, ' 9.3938(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064482(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3896.83', width=5)

width < len (16) in center_string(outstring, ' 7.5926(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073693(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936844(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM6.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM6.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM45.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM45.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '705.18', width=5)

width < len (9) in center_string(outstring, '248732.31', width=6)

width < len (12) in center_string(outstring, '612951882.67', width=8)

width < len (7) in center_string(outstring, '3585.66', width=6)

width < len (7) in center_string(outstring, '4390.61', width=5)

width < len (16) in center_string(outstring, ' 9.6387(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.931(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254974(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4388.09', width=5)

width < len (16) in center_string(outstring, ' 9.6277(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.79', width=5)

width < len (16) in center_string(outstring, ' 9.6132(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026793(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925888(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4380.77', width=5)

width < len (16) in center_string(outstring, ' 9.5956(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928635(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4376.04', width=5)

width < len (16) in center_string(outstring, ' 9.5749(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044654(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931381(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4370.59', width=5)

width < len (16) in center_string(outstring, ' 9.5510(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053585(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4364.43', width=5)

width < len (16) in center_string(outstring, ' 9.5241(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4357.58', width=5)

width < len (16) in center_string(outstring, ' 9.4943(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071447(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939621(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(3.7)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM45.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM45.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM60.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM60.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '888.58', width=5)

width < len (9) in center_string(outstring, '394889.25', width=6)

width < len (12) in center_string(outstring, '619260526.34', width=8)

width < len (7) in center_string(outstring, '3292.18', width=6)

width < len (7) in center_string(outstring, '4399.15', width=5)

width < len (16) in center_string(outstring, ' 9.6763(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017142(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915649(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4399.14', width=5)

width < len (16) in center_string(outstring, ' 9.6762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913467(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4399.13', width=5)

width < len (16) in center_string(outstring, ' 9.6762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911285(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4399.11', width=5)

width < len (16) in center_string(outstring, ' 9.6761(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068570(23)', width=12)

width < len (15) in center_string(outstring, ' 166.909119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (7) in center_string(outstring, '4399.08', width=5)

width < len (16) in center_string(outstring, ' 9.6760(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00085712(23)', width=12)

width < len (15) in center_string(outstring, ' 166.906937(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (7) in center_string(outstring, '4399.05', width=5)

width < len (16) in center_string(outstring, ' 9.6758(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00102855(23)', width=12)

width < len (15) in center_string(outstring, ' 166.904755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (7) in center_string(outstring, '4399.00', width=5)

width < len (16) in center_string(outstring, ' 9.6756(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00119997(23)', width=12)

width < len (15) in center_string(outstring, ' 166.902573(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4398.95', width=5)

width < len (16) in center_string(outstring, ' 9.6754(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00137139(23)', width=12)

width < len (15) in center_string(outstring, ' 166.900391(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM60.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM60.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM36.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM36.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 73 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '445.71', width=5)

width < len (8) in center_string(outstring, '99415.35', width=6)

width < len (12) in center_string(outstring, '595638052.45', width=8)

width < len (7) in center_string(outstring, '2584.09', width=6)

width < len (7) in center_string(outstring, '4381.24', width=5)

width < len (16) in center_string(outstring, ' 9.5977(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.035(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253530(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3948.38', width=5)

width < len (16) in center_string(outstring, ' 7.7949(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018070(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921722(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4376.01', width=5)

width < len (16) in center_string(outstring, ' 9.5747(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027105(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924484(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4372.25', width=5)

width < len (16) in center_string(outstring, ' 9.5583(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036140(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4367.77', width=5)

width < len (16) in center_string(outstring, ' 9.5387(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045175(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930038(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4362.56', width=5)

width < len (16) in center_string(outstring, ' 9.5160(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054210(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932816(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.63', width=5)

width < len (16) in center_string(outstring, ' 9.4901(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063245(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935593(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.00', width=5)

width < len (16) in center_string(outstring, ' 9.4613(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938370(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.7)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM36.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM36.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM27.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM27.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 87 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '358.85', width=5)

width < len (8) in center_string(outstring, '64471.12', width=6)

width < len (12) in center_string(outstring, '577807819.36', width=8)

width < len (7) in center_string(outstring, '1898.43', width=6)

width < len (7) in center_string(outstring, '4370.11', width=5)

width < len (16) in center_string(outstring, ' 9.5489(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.121(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252834(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4367.99', width=5)

width < len (16) in center_string(outstring, ' 9.5397(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018243(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4365.07', width=5)

width < len (16) in center_string(outstring, ' 9.5269(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027364(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.41', width=5)

width < len (16) in center_string(outstring, ' 9.5110(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036486(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926620(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '3925.69', width=5)

width < len (16) in center_string(outstring, ' 7.7055(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045607(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929413(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4351.89', width=5)

width < len (16) in center_string(outstring, ' 9.4695(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054729(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932205(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3912.70', width=5)

width < len (16) in center_string(outstring, ' 7.6546(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063850(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4339.46', width=5)

width < len (16) in center_string(outstring, ' 9.4155(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072972(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937790(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.530 sec, System: 0.010 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM27.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM27.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM60.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM60.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '890.40', width=5)

width < len (9) in center_string(outstring, '396508.53', width=6)

width < len (12) in center_string(outstring, '615029132.07', width=8)

width < len (7) in center_string(outstring, '3232.12', width=6)

width < len (7) in center_string(outstring, '4399.89', width=5)

width < len (16) in center_string(outstring, ' 9.6795(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.769(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253475(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4396.80', width=5)

width < len (16) in center_string(outstring, ' 9.6659(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017538(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921631(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4392.95', width=5)

width < len (16) in center_string(outstring, ' 9.6490(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026308(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924332(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4388.39', width=5)

width < len (16) in center_string(outstring, ' 9.6290(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927048(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4383.13', width=5)

width < len (16) in center_string(outstring, ' 9.6059(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929749(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4377.19', width=5)

width < len (16) in center_string(outstring, ' 9.5799(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052615(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932449(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4370.56', width=5)

width < len (16) in center_string(outstring, ' 9.5509(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061385(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4363.27', width=5)

width < len (16) in center_string(outstring, ' 9.5191(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070154(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM60.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM60.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM4.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM4.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '596.91', width=5)

width < len (9) in center_string(outstring, '178244.22', width=6)

width < len (12) in center_string(outstring, '589521920.39', width=8)

width < len (7) in center_string(outstring, '1648.72', width=6)

width < len (7) in center_string(outstring, '4356.49', width=5)

width < len (16) in center_string(outstring, ' 9.4895(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.671(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256000(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.66', width=5)

width < len (16) in center_string(outstring, ' 9.4815(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017343(23)', width=12)

width < len (13) in center_string(outstring, ' 0.257477(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3927.22', width=5)

width < len (16) in center_string(outstring, ' 7.7115(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026014(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926819(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(18)', width=10)

width < len (7) in center_string(outstring, '4348.89', width=5)

width < len (16) in center_string(outstring, ' 9.4564(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929504(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4344.99', width=5)

width < len (16) in center_string(outstring, ' 9.4395(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043357(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932190(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4340.43', width=5)

width < len (16) in center_string(outstring, ' 9.4197(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052029(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934875(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4335.21', width=5)

width < len (16) in center_string(outstring, ' 9.3970(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060700(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937546(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(16)', width=10)

width < len (7) in center_string(outstring, '4329.33', width=5)

width < len (16) in center_string(outstring, ' 9.3716(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069371(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940231(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.2)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.4)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM4.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM4.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM52.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM52.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '783.13', width=5)

width < len (9) in center_string(outstring, '306744.56', width=6)

width < len (12) in center_string(outstring, '598661697.99', width=8)

width < len (7) in center_string(outstring, '3076.63', width=6)

width < len (7) in center_string(outstring, '4394.74', width=5)

width < len (16) in center_string(outstring, ' 9.6569(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.860(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.95', width=5)

width < len (16) in center_string(outstring, ' 9.6446(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017721(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923294(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.39', width=5)

width < len (16) in center_string(outstring, ' 9.6290(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026581(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926025(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.12', width=5)

width < len (16) in center_string(outstring, ' 9.6103(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928757(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3942.62', width=5)

width < len (16) in center_string(outstring, ' 7.7721(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044302(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931473(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4373.45', width=5)

width < len (16) in center_string(outstring, ' 9.5635(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053163(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934204(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4367.07', width=5)

width < len (16) in center_string(outstring, ' 9.5357(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062023(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936935(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4360.01', width=5)

width < len (16) in center_string(outstring, ' 9.5048(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070883(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939667(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(6.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM52.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM52.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM78.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM78.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1040.24', width=5)

width < len (9) in center_string(outstring, '541145.44', width=6)

width < len (12) in center_string(outstring, '605428118.10', width=8)

width < len (7) in center_string(outstring, '2765.96', width=6)

width < len (7) in center_string(outstring, '4423.41', width=5)

width < len (16) in center_string(outstring, ' 9.7833(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253978(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3982.13', width=5)

width < len (16) in center_string(outstring, ' 7.9287(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4414.85', width=5)

width < len (16) in center_string(outstring, ' 9.7455(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925003(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4409.37', width=5)

width < len (16) in center_string(outstring, ' 9.7213(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927811(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4403.13', width=5)

width < len (16) in center_string(outstring, ' 9.6938(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4396.13', width=5)

width < len (16) in center_string(outstring, ' 9.6630(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4388.39', width=5)

width < len (16) in center_string(outstring, ' 9.6290(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4379.92', width=5)

width < len (16) in center_string(outstring, ' 9.5919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939072(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, '0.0(9.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(1.9)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM78.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM78.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM55.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM55.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '818.12', width=5)

width < len (9) in center_string(outstring, '334757.38', width=6)

width < len (12) in center_string(outstring, '619895705.09', width=8)

width < len (7) in center_string(outstring, '3075.60', width=6)

width < len (7) in center_string(outstring, '4404.02', width=5)

width < len (16) in center_string(outstring, ' 9.6977(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00014627(23)', width=12)

width < len (13) in center_string(outstring, ' 0.251215(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4403.40', width=5)

width < len (16) in center_string(outstring, ' 9.6950(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029255(23)', width=12)

width < len (13) in center_string(outstring, ' 0.250423(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4402.71', width=5)

width < len (16) in center_string(outstring, ' 9.6919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043882(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916306(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4401.94', width=5)

width < len (16) in center_string(outstring, ' 9.6886(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058510(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915512(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4401.10', width=5)

width < len (16) in center_string(outstring, ' 9.6848(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073137(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914719(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4400.18', width=5)

width < len (16) in center_string(outstring, ' 9.6808(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00087764(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913925(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(16)', width=10)

width < len (7) in center_string(outstring, '4399.19', width=5)

width < len (16) in center_string(outstring, ' 9.6764(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00102392(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913132(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4398.12', width=5)

width < len (16) in center_string(outstring, ' 9.6717(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00117019(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912338(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.460 sec, System: 0.020 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM55.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM55.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM14.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM14.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '661.23', width=5)

width < len (9) in center_string(outstring, '218707.94', width=6)

width < len (12) in center_string(outstring, '590980782.89', width=8)

width < len (7) in center_string(outstring, '3321.50', width=6)

width < len (7) in center_string(outstring, '4364.53', width=5)

width < len (16) in center_string(outstring, ' 9.5246(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253397(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.38', width=5)

width < len (16) in center_string(outstring, ' 9.5152(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921600(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4359.43', width=5)

width < len (16) in center_string(outstring, ' 9.5023(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924423(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4355.73', width=5)

width < len (16) in center_string(outstring, ' 9.4862(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927231(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.28', width=5)

width < len (16) in center_string(outstring, ' 9.4668(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930054(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.65', width=5)

width < len (16) in center_string(outstring, ' 7.6544(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932861(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4340.16', width=5)

width < len (16) in center_string(outstring, ' 9.4185(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935684(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4333.51', width=5)

width < len (16) in center_string(outstring, ' 9.3897(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938492(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM14.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM14.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM21.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM21.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  12%
Amount of optimization complete =  16%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  29%
Amount of optimization complete =  33%
Amount of optimization complete =  37%
Amount of optimization complete =  41%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  58%
Amount of optimization complete =  62%
Amount of optimization complete =  66%
Amount of optimization complete =  70%
Amount of optimization complete =  75%
Amount of optimization complete =  79%
Amount of optimization complete =  83%
Amount of optimization complete =  87%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '465.79', width=5)

width < len (9) in center_string(outstring, '108569.67', width=6)

width < len (12) in center_string(outstring, '592124116.56', width=8)

width < len (7) in center_string(outstring, '2738.65', width=6)

width < len (7) in center_string(outstring, '4368.09', width=5)

width < len (16) in center_string(outstring, ' 9.5401(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.167(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253446(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.01', width=5)

width < len (16) in center_string(outstring, ' 9.5310(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018333(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921646(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.14', width=5)

width < len (16) in center_string(outstring, ' 9.5185(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027500(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924454(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3928.64', width=5)

width < len (16) in center_string(outstring, ' 7.7171(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036667(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(18)', width=10)

width < len (7) in center_string(outstring, '4355.14', width=5)

width < len (16) in center_string(outstring, ' 9.4836(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045833(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930069(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.04', width=5)

width < len (16) in center_string(outstring, ' 9.4614(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932861(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.20', width=5)

width < len (16) in center_string(outstring, ' 9.4361(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064167(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935669(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4337.65', width=5)

width < len (16) in center_string(outstring, ' 9.4076(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073333(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938477(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.0)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.9)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.9(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.700 sec (User: 0.690 sec, System: 0.010 sec)
  Total time: 0.690 sec

Final candidates in binary format are in 'Sband_DM21.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM21.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM34.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM34.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  12%
Amount of optimization complete =  16%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  29%
Amount of optimization complete =  33%
Amount of optimization complete =  37%
Amount of optimization complete =  41%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  58%
Amount of optimization complete =  62%
Amount of optimization complete =  66%
Amount of optimization complete =  70%
Amount of optimization complete =  75%
Amount of optimization complete =  79%
Amount of optimization complete =  83%
Amount of optimization complete =  87%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '401.66', width=5)

width < len (8) in center_string(outstring, '80752.14', width=6)

width < len (12) in center_string(outstring, '593760532.56', width=8)

width < len (7) in center_string(outstring, '2234.89', width=6)

width < len (7) in center_string(outstring, '4374.37', width=5)

width < len (16) in center_string(outstring, ' 9.5676(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.051(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253518(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4372.16', width=5)

width < len (16) in center_string(outstring, ' 9.5579(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018101(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921707(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(16)', width=10)

width < len (7) in center_string(outstring, '4369.16', width=5)

width < len (16) in center_string(outstring, ' 9.5448(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027152(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924484(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3934.82', width=5)

width < len (16) in center_string(outstring, ' 7.7414(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036202(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(17)', width=10)

width < len (7) in center_string(outstring, '4360.97', width=5)

width < len (16) in center_string(outstring, ' 9.5090(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045253(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930038(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4355.78', width=5)

width < len (16) in center_string(outstring, ' 9.4864(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054304(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932800(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4349.88', width=5)

width < len (16) in center_string(outstring, ' 9.4607(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063354(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935577(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4343.27', width=5)

width < len (16) in center_string(outstring, ' 9.4320(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072405(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(4.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.510 sec, System: 0.020 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM34.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM34.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM81.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM81.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1027.29', width=5)

width < len (9) in center_string(outstring, '527760.31', width=6)

width < len (12) in center_string(outstring, '605829073.01', width=8)

width < len (7) in center_string(outstring, '2572.41', width=6)

width < len (7) in center_string(outstring, '4425.24', width=5)

width < len (16) in center_string(outstring, ' 9.7914(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253807(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3983.67', width=5)

width < len (16) in center_string(outstring, ' 7.9348(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922012(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4416.47', width=5)

width < len (16) in center_string(outstring, ' 9.7526(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924820(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4410.89', width=5)

width < len (16) in center_string(outstring, ' 9.7280(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4404.54', width=5)

width < len (16) in center_string(outstring, ' 9.7000(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930450(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4397.44', width=5)

width < len (16) in center_string(outstring, ' 9.6687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933273(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4389.59', width=5)

width < len (16) in center_string(outstring, ' 9.6343(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4381.02', width=5)

width < len (16) in center_string(outstring, ' 9.5967(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938904(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM81.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM81.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM70.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM70.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1002.70', width=5)

width < len (9) in center_string(outstring, '502804.12', width=6)

width < len (12) in center_string(outstring, '602292223.25', width=8)

width < len (7) in center_string(outstring, '3127.40', width=6)

width < len (7) in center_string(outstring, '4409.75', width=5)

width < len (16) in center_string(outstring, ' 9.7230(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253225(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4406.41', width=5)

width < len (16) in center_string(outstring, ' 9.7082(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921173(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4402.33', width=5)

width < len (16) in center_string(outstring, ' 9.6903(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4397.57', width=5)

width < len (16) in center_string(outstring, ' 9.6693(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926300(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.14', width=5)

width < len (16) in center_string(outstring, ' 9.6455(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928848(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3947.69', width=5)

width < len (16) in center_string(outstring, ' 7.7921(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055283(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931412(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(17)', width=10)

width < len (7) in center_string(outstring, '4379.30', width=5)

width < len (16) in center_string(outstring, ' 9.5892(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064497(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933975(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4371.92', width=5)

width < len (16) in center_string(outstring, ' 9.5568(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073711(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936539(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.9)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.5)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM70.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM70.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM39.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM39.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '594.64', width=5)

width < len (9) in center_string(outstring, '176889.97', width=6)

width < len (12) in center_string(outstring, '595605609.71', width=8)

width < len (7) in center_string(outstring, '3939.69', width=6)

width < len (7) in center_string(outstring, '4381.58', width=5)

width < len (16) in center_string(outstring, ' 9.5991(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.011(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254950(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.22', width=5)

width < len (16) in center_string(outstring, ' 9.5888(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3945.26', width=5)

width < len (16) in center_string(outstring, ' 7.7826(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027032(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925903(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4372.21', width=5)

width < len (16) in center_string(outstring, ' 9.5581(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036042(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928665(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4367.60', width=5)

width < len (16) in center_string(outstring, ' 9.5380(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931427(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4362.28', width=5)

width < len (16) in center_string(outstring, ' 9.5148(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054064(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934189(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.25', width=5)

width < len (16) in center_string(outstring, ' 9.4885(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936966(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4349.51', width=5)

width < len (16) in center_string(outstring, ' 9.4591(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072085(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939728(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(9.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.590 sec (User: 0.570 sec, System: 0.020 sec)
  Total time: 0.590 sec

Final candidates in binary format are in 'Sband_DM39.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM39.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM83.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM83.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 35 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  11%
Amount of optimization complete =  22%
Amount of optimization complete =  33%
Amount of optimization complete =  44%
Amount of optimization complete =  55%
Amount of optimization complete =  66%
Amount of optimization complete =  77%
Amount of optimization complete =  88%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1051.22', width=5)

width < len (9) in center_string(outstring, '552632.19', width=6)

width < len (12) in center_string(outstring, '607226004.20', width=8)

width < len (7) in center_string(outstring, '2560.28', width=6)

width < len (7) in center_string(outstring, '4428.89', width=5)

width < len (16) in center_string(outstring, ' 9.8076(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.608(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255323(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '3987.35', width=5)

width < len (16) in center_string(outstring, ' 7.9495(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017216(25)', width=12)

width < len (15) in center_string(outstring, ' 166.923462(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4420.67', width=5)

width < len (16) in center_string(outstring, ' 9.7712(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025824(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926132(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4415.49', width=5)

width < len (16) in center_string(outstring, ' 9.7483(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928787(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4409.62', width=5)

width < len (16) in center_string(outstring, ' 9.7224(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4403.08', width=5)

width < len (16) in center_string(outstring, ' 9.6936(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051647(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4395.87', width=5)

width < len (16) in center_string(outstring, ' 9.6619(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060255(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936798(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4388.01', width=5)

width < len (16) in center_string(outstring, ' 9.6273(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068863(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939453(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.310 sec, System: 0.020 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM83.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM83.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM12.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM12.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '650.93', width=5)

width < len (9) in center_string(outstring, '211947.98', width=6)

width < len (12) in center_string(outstring, '605515760.32', width=8)

width < len (7) in center_string(outstring, '2944.78', width=6)

width < len (7) in center_string(outstring, '4363.12', width=5)

width < len (16) in center_string(outstring, ' 9.5184(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252036(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4360.90', width=5)

width < len (16) in center_string(outstring, ' 9.5087(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920242(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4357.88', width=5)

width < len (16) in center_string(outstring, ' 9.4956(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923050(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4354.11', width=5)

width < len (16) in center_string(outstring, ' 9.4791(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925873(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4349.59', width=5)

width < len (16) in center_string(outstring, ' 9.4595(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928696(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4344.32', width=5)

width < len (16) in center_string(outstring, ' 9.4366(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055283(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931503(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4338.33', width=5)

width < len (16) in center_string(outstring, ' 9.4106(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064497(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934326(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.62', width=5)

width < len (16) in center_string(outstring, ' 9.3815(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073710(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937134(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM12.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM12.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM21.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM21.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '477.61', width=5)

width < len (9) in center_string(outstring, '114142.49', width=6)

width < len (12) in center_string(outstring, '563000725.94', width=8)

width < len (7) in center_string(outstring, '2875.81', width=6)

width < len (7) in center_string(outstring, '3942.51', width=5)

width < len (16) in center_string(outstring, ' 7.7717(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.174(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254234(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4366.57', width=5)

width < len (16) in center_string(outstring, ' 9.5335(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018349(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922440(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4363.67', width=5)

width < len (16) in center_string(outstring, ' 9.5208(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027523(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925247(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3928.83', width=5)

width < len (16) in center_string(outstring, ' 7.7178(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036697(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(18)', width=10)

width < len (7) in center_string(outstring, '4355.62', width=5)

width < len (16) in center_string(outstring, ' 9.4857(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045872(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.49', width=5)

width < len (16) in center_string(outstring, ' 9.4634(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055046(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933670(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3910.21', width=5)

width < len (16) in center_string(outstring, ' 7.6449(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064220(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936478(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4338.03', width=5)

width < len (16) in center_string(outstring, ' 9.4093(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073395(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939285(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(8.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM21.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM21.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM5.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM5.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '595.40', width=5)

width < len (9) in center_string(outstring, '177342.52', width=6)

width < len (12) in center_string(outstring, '588909649.01', width=8)

width < len (7) in center_string(outstring, '1711.32', width=6)

width < len (7) in center_string(outstring, '4356.01', width=5)

width < len (16) in center_string(outstring, ' 9.4874(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253471(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4353.96', width=5)

width < len (16) in center_string(outstring, ' 9.4785(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921677(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4351.12', width=5)

width < len (16) in center_string(outstring, ' 9.4661(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924484(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4347.53', width=5)

width < len (16) in center_string(outstring, ' 9.4505(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4343.19', width=5)

width < len (16) in center_string(outstring, ' 9.4317(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930115(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3909.43', width=5)

width < len (16) in center_string(outstring, ' 7.6418(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932938(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4332.32', width=5)

width < len (16) in center_string(outstring, ' 9.3845(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935760(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4325.79', width=5)

width < len (16) in center_string(outstring, ' 9.3563(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938568(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM5.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM5.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM80.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM80.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1031.43', width=5)

width < len (9) in center_string(outstring, '532028.69', width=6)

width < len (12) in center_string(outstring, '605401502.49', width=8)

width < len (7) in center_string(outstring, '2637.83', width=6)

width < len (7) in center_string(outstring, '4424.20', width=5)

width < len (16) in center_string(outstring, ' 9.7868(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254993(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4420.27', width=5)

width < len (16) in center_string(outstring, ' 9.7694(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923203(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4415.49', width=5)

width < len (16) in center_string(outstring, ' 9.7483(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926025(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4409.93', width=5)

width < len (16) in center_string(outstring, ' 9.7238(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928833(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4403.61', width=5)

width < len (16) in center_string(outstring, ' 9.6959(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931656(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3954.21', width=5)

width < len (16) in center_string(outstring, ' 7.8179(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934479(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4388.71', width=5)

width < len (16) in center_string(outstring, ' 9.6304(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937302(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4380.16', width=5)

width < len (16) in center_string(outstring, ' 9.5929(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940125(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.310 sec, System: 0.010 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM80.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM80.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM56.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM56.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '831.68', width=5)

width < len (9) in center_string(outstring, '345946.75', width=6)

width < len (12) in center_string(outstring, '600482752.46', width=8)

width < len (7) in center_string(outstring, '3101.85', width=6)

width < len (7) in center_string(outstring, '4402.35', width=5)

width < len (16) in center_string(outstring, ' 9.6904(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.822(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253497(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4399.42', width=5)

width < len (16) in center_string(outstring, ' 9.6775(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921661(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.71', width=5)

width < len (16) in center_string(outstring, ' 9.6611(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924377(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4391.29', width=5)

width < len (16) in center_string(outstring, ' 9.6417(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035288(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927094(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.16', width=5)

width < len (16) in center_string(outstring, ' 9.6192(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4380.34', width=5)

width < len (16) in center_string(outstring, ' 9.5937(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052932(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932526(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3933.03', width=5)

width < len (16) in center_string(outstring, ' 7.7344(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061754(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935257(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4366.63', width=5)

width < len (16) in center_string(outstring, ' 9.5337(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070576(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM56.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM56.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM34.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM34.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 97 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '394.91', width=5)

width < len (8) in center_string(outstring, '78064.28', width=6)

width < len (12) in center_string(outstring, '593664422.45', width=8)

width < len (7) in center_string(outstring, '2176.83', width=6)

width < len (7) in center_string(outstring, '3948.37', width=5)

width < len (16) in center_string(outstring, ' 7.7948(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.052(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252272(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(17)', width=10)

width < len (7) in center_string(outstring, '4371.14', width=5)

width < len (16) in center_string(outstring, ' 9.5535(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018103(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920456(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4368.13', width=5)

width < len (16) in center_string(outstring, ' 9.5403(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027155(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923233(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4364.39', width=5)

width < len (16) in center_string(outstring, ' 9.5239(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036206(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926010(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.91', width=5)

width < len (16) in center_string(outstring, ' 9.5044(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928787(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4354.71', width=5)

width < len (16) in center_string(outstring, ' 9.4818(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054309(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931564(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4348.80', width=5)

width < len (16) in center_string(outstring, ' 9.4560(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063361(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934341(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4342.18', width=5)

width < len (16) in center_string(outstring, ' 9.4273(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072413(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(3.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(2.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.550 sec, System: 0.010 sec)
  Total time: 0.560 sec

Final candidates in binary format are in 'Sband_DM34.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM34.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM77.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM77.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1036.52', width=5)

width < len (9) in center_string(outstring, '537286.31', width=6)

width < len (12) in center_string(outstring, '604598913.03', width=8)

width < len (7) in center_string(outstring, '2871.20', width=6)

width < len (7) in center_string(outstring, '4420.96', width=5)

width < len (16) in center_string(outstring, ' 9.7725(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254798(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4417.12', width=5)

width < len (16) in center_string(outstring, ' 9.7555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923004(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4412.43', width=5)

width < len (16) in center_string(outstring, ' 9.7348(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925827(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4406.97', width=5)

width < len (16) in center_string(outstring, ' 9.7107(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928650(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.74', width=5)

width < len (16) in center_string(outstring, ' 9.6833(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3951.68', width=5)

width < len (16) in center_string(outstring, ' 7.8079(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934280(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4386.03', width=5)

width < len (16) in center_string(outstring, ' 9.6186(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937103(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4377.57', width=5)

width < len (16) in center_string(outstring, ' 9.5816(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.310 sec (User: 0.300 sec, System: 0.010 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM77.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM77.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM22.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM22.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 76 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  13%
Amount of optimization complete =  18%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  40%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  59%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  81%
Amount of optimization complete =  86%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '443.26', width=5)

width < len (8) in center_string(outstring, '98328.19', width=6)

width < len (12) in center_string(outstring, '591788794.18', width=8)

width < len (7) in center_string(outstring, '2617.64', width=6)

width < len (7) in center_string(outstring, '4366.46', width=5)

width < len (16) in center_string(outstring, ' 9.5330(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.153(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252826(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3936.85', width=5)

width < len (16) in center_string(outstring, ' 7.7494(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018307(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921021(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(17)', width=10)

width < len (7) in center_string(outstring, '4361.49', width=5)

width < len (16) in center_string(outstring, ' 9.5113(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027460(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.87', width=5)

width < len (16) in center_string(outstring, ' 9.4955(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036613(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926620(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4353.50', width=5)

width < len (16) in center_string(outstring, ' 9.4765(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045767(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929428(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.40', width=5)

width < len (16) in center_string(outstring, ' 9.4543(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054920(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932220(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.57', width=5)

width < len (16) in center_string(outstring, ' 9.4289(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064073(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935028(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4336.02', width=5)

width < len (16) in center_string(outstring, ' 9.4005(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073227(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937836(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(7.0)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.570 sec (User: 0.560 sec, System: 0.010 sec)
  Total time: 0.560 sec

Final candidates in binary format are in 'Sband_DM22.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM22.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM23.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM23.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '404.51', width=5)

width < len (8) in center_string(outstring, '81901.73', width=6)

width < len (12) in center_string(outstring, '607171101.97', width=8)

width < len (7) in center_string(outstring, '2261.86', width=6)

width < len (7) in center_string(outstring, '4368.62', width=5)

width < len (16) in center_string(outstring, ' 9.5424(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.139(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.51', width=5)

width < len (16) in center_string(outstring, ' 9.5332(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018277(23)', width=12)

width < len (13) in center_string(outstring, ' 0.257682(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.61', width=5)

width < len (16) in center_string(outstring, ' 9.5206(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027416(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927139(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4359.96', width=5)

width < len (16) in center_string(outstring, ' 9.5047(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929947(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.58', width=5)

width < len (16) in center_string(outstring, ' 9.4855(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932739(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.46', width=5)

width < len (16) in center_string(outstring, ' 9.4633(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054832(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935547(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.61', width=5)

width < len (16) in center_string(outstring, ' 9.4378(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938339(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.05', width=5)

width < len (16) in center_string(outstring, ' 9.4094(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941132(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.520 sec, System: 0.020 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM23.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM23.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM26.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM26.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 77 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '364.86', width=5)

width < len (8) in center_string(outstring, '66646.44', width=6)

width < len (12) in center_string(outstring, '577576129.55', width=8)

width < len (7) in center_string(outstring, '1959.22', width=6)

width < len (7) in center_string(outstring, '4369.00', width=5)

width < len (16) in center_string(outstring, ' 9.5441(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.140(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253917(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.91', width=5)

width < len (16) in center_string(outstring, ' 9.5350(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018281(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3935.01', width=5)

width < len (16) in center_string(outstring, ' 7.7422(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027421(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924911(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4360.42', width=5)

width < len (16) in center_string(outstring, ' 9.5066(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927704(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.05', width=5)

width < len (16) in center_string(outstring, ' 9.4876(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045702(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930511(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.96', width=5)

width < len (16) in center_string(outstring, ' 9.4654(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933304(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.13', width=5)

width < len (16) in center_string(outstring, ' 9.4401(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063983(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '3904.04', width=5)

width < len (16) in center_string(outstring, ' 7.6208(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073123(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938904(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.530 sec, System: 0.010 sec)
  Total time: 0.540 sec

Final candidates in binary format are in 'Sband_DM26.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM26.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM46.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM46.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '711.60', width=5)

width < len (9) in center_string(outstring, '253282.81', width=6)

width < len (12) in center_string(outstring, '598090135.50', width=8)

width < len (7) in center_string(outstring, '3426.89', width=6)

width < len (7) in center_string(outstring, '4391.70', width=5)

width < len (16) in center_string(outstring, ' 9.6435(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.915(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255538(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3955.89', width=5)

width < len (16) in center_string(outstring, ' 7.8246(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017830(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923706(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4385.69', width=5)

width < len (16) in center_string(outstring, ' 9.6172(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026745(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926453(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4381.58', width=5)

width < len (16) in center_string(outstring, ' 9.5991(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035660(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929199(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4376.75', width=5)

width < len (16) in center_string(outstring, ' 9.5780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044575(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931931(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.21', width=5)

width < len (16) in center_string(outstring, ' 9.5537(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053490(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934677(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4364.97', width=5)

width < len (16) in center_string(outstring, ' 9.5265(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062405(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937424(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4358.04', width=5)

width < len (16) in center_string(outstring, ' 9.4963(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071320(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940155(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.6)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.5(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.330 sec, System: 0.010 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM46.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM46.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM8.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM8.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 53 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '615.58', width=5)

width < len (9) in center_string(outstring, '189563.80', width=6)

width < len (12) in center_string(outstring, '589726649.72', width=8)

width < len (7) in center_string(outstring, '2093.41', width=6)

width < len (7) in center_string(outstring, '4359.39', width=5)

width < len (16) in center_string(outstring, ' 9.5022(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.26', width=5)

width < len (16) in center_string(outstring, ' 9.4929(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921356(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4354.34', width=5)

width < len (16) in center_string(outstring, ' 9.4801(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924179(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.67', width=5)

width < len (16) in center_string(outstring, ' 9.4642(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926987(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.25', width=5)

width < len (16) in center_string(outstring, ' 9.4449(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3911.47', width=5)

width < len (16) in center_string(outstring, ' 7.6498(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932617(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4335.20', width=5)

width < len (16) in center_string(outstring, ' 9.3970(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935440(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4328.58', width=5)

width < len (16) in center_string(outstring, ' 9.3683(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938248(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^3', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.490 sec, System: 0.020 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM8.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM8.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM15.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM15.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '643.35', width=5)

width < len (9) in center_string(outstring, '207045.67', width=6)

width < len (12) in center_string(outstring, '591170239.10', width=8)

width < len (7) in center_string(outstring, '3515.03', width=6)

width < len (7) in center_string(outstring, '4365.21', width=5)

width < len (16) in center_string(outstring, ' 9.5275(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254556(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.07', width=5)

width < len (16) in center_string(outstring, ' 9.5182(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922760(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4360.13', width=5)

width < len (16) in center_string(outstring, ' 9.5054(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925583(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4356.43', width=5)

width < len (16) in center_string(outstring, ' 9.4893(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928391(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.99', width=5)

width < len (16) in center_string(outstring, ' 9.4699(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931213(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4346.80', width=5)

width < len (16) in center_string(outstring, ' 9.4474(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.30', width=5)

width < len (16) in center_string(outstring, ' 7.6335(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936844(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4334.24', width=5)

width < len (16) in center_string(outstring, ' 9.3928(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939667(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM15.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM15.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM18.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM18.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '572.50', width=5)

width < len (9) in center_string(outstring, '163971.94', width=6)

width < len (12) in center_string(outstring, '606533170.95', width=8)

width < len (7) in center_string(outstring, '3537.12', width=6)

width < len (7) in center_string(outstring, '4366.28', width=5)

width < len (16) in center_string(outstring, ' 9.5322(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.205(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.21', width=5)

width < len (16) in center_string(outstring, ' 9.5232(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018410(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921341(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.33', width=5)

width < len (16) in center_string(outstring, ' 9.5106(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027615(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924149(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4357.69', width=5)

width < len (16) in center_string(outstring, ' 9.4948(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036819(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926971(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4353.31', width=5)

width < len (16) in center_string(outstring, ' 9.4757(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046024(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929779(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.19', width=5)

width < len (16) in center_string(outstring, ' 9.4534(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055229(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932602(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.33', width=5)

width < len (16) in center_string(outstring, ' 9.4279(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064434(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935410(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.75', width=5)

width < len (16) in center_string(outstring, ' 9.3994(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073639(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(5.6)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.570 sec (User: 0.560 sec, System: 0.010 sec)
  Total time: 0.570 sec

Final candidates in binary format are in 'Sband_DM18.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM18.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM14.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM14.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '657.93', width=5)

width < len (9) in center_string(outstring, '216526.91', width=6)

width < len (12) in center_string(outstring, '591082274.86', width=8)

width < len (7) in center_string(outstring, '3422.73', width=6)

width < len (7) in center_string(outstring, '4365.01', width=5)

width < len (16) in center_string(outstring, ' 9.5267(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254680(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.86', width=5)

width < len (16) in center_string(outstring, ' 9.5173(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4359.91', width=5)

width < len (16) in center_string(outstring, ' 9.5044(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925705(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4356.21', width=5)

width < len (16) in center_string(outstring, ' 9.4883(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928513(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.76', width=5)

width < len (16) in center_string(outstring, ' 9.4689(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931335(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4346.56', width=5)

width < len (16) in center_string(outstring, ' 9.4463(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934158(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.31', width=5)

width < len (16) in center_string(outstring, ' 7.6296(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936966(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4333.98', width=5)

width < len (16) in center_string(outstring, ' 9.3917(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939789(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.9)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM14.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM14.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM63.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM63.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '924.79', width=5)

width < len (9) in center_string(outstring, '427712.62', width=6)

width < len (12) in center_string(outstring, '620543609.35', width=8)

width < len (7) in center_string(outstring, '3244.52', width=6)

width < len (7) in center_string(outstring, '4406.88', width=5)

width < len (16) in center_string(outstring, ' 9.7103(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00014515(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916595(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4406.11', width=5)

width < len (16) in center_string(outstring, ' 9.7069(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029031(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915878(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4405.27', width=5)

width < len (16) in center_string(outstring, ' 9.7032(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043546(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915161(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4404.34', width=5)

width < len (16) in center_string(outstring, ' 9.6991(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058061(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914429(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4403.33', width=5)

width < len (16) in center_string(outstring, ' 9.6947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072576(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913712(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4402.24', width=5)

width < len (16) in center_string(outstring, ' 9.6899(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00087092(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912994(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4401.07', width=5)

width < len (16) in center_string(outstring, ' 9.6847(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00101607(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912262(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4399.82', width=5)

width < len (16) in center_string(outstring, ' 9.6792(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00116122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM63.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM63.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM40.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM40.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '653.25', width=5)

width < len (9) in center_string(outstring, '213463.17', width=6)

width < len (12) in center_string(outstring, '611214671.31', width=8)

width < len (7) in center_string(outstring, '4216.43', width=6)

width < len (7) in center_string(outstring, '4384.03', width=5)

width < len (16) in center_string(outstring, ' 9.6099(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.985(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255598(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.63', width=5)

width < len (16) in center_string(outstring, ' 9.5993(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017970(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923782(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.44', width=5)

width < len (16) in center_string(outstring, ' 9.5854(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026954(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.53', width=5)

width < len (16) in center_string(outstring, ' 9.5683(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035939(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.89', width=5)

width < len (16) in center_string(outstring, ' 9.5480(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044924(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932053(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.54', width=5)

width < len (16) in center_string(outstring, ' 9.5246(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053909(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934814(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4358.48', width=5)

width < len (16) in center_string(outstring, ' 9.4982(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062894(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.71', width=5)

width < len (16) in center_string(outstring, ' 9.4687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071879(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940323(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.5)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.3(7.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.450 sec

Final candidates in binary format are in 'Sband_DM40.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM40.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM26.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM26.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '367.10', width=5)

width < len (8) in center_string(outstring, '67466.79', width=6)

width < len (12) in center_string(outstring, '592776047.18', width=8)

width < len (7) in center_string(outstring, '1978.36', width=6)

width < len (7) in center_string(outstring, '4370.33', width=5)

width < len (16) in center_string(outstring, ' 9.5499(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.126(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253769(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.24', width=5)

width < len (16) in center_string(outstring, ' 9.5408(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018252(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3935.43', width=5)

width < len (16) in center_string(outstring, ' 7.7438(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027378(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924759(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4361.75', width=5)

width < len (16) in center_string(outstring, ' 9.5124(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036504(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927551(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.39', width=5)

width < len (16) in center_string(outstring, ' 9.4934(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045630(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930344(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.29', width=5)

width < len (16) in center_string(outstring, ' 9.4712(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054756(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933151(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.47', width=5)

width < len (16) in center_string(outstring, ' 9.4459(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063882(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935944(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4339.94', width=5)

width < len (16) in center_string(outstring, ' 9.4175(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073008(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938736(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(9.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(8.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.500 sec, System: 0.010 sec)
  Total time: 0.510 sec

Final candidates in binary format are in 'Sband_DM26.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM26.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM4.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM4.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '592.79', width=5)

width < len (9) in center_string(outstring, '175793.39', width=6)

width < len (12) in center_string(outstring, '574556034.17', width=8)

width < len (7) in center_string(outstring, '1625.89', width=6)

width < len (7) in center_string(outstring, '4356.69', width=5)

width < len (16) in center_string(outstring, ' 9.4904(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255077(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.69', width=5)

width < len (16) in center_string(outstring, ' 9.4817(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923279(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4351.90', width=5)

width < len (16) in center_string(outstring, ' 9.4695(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926102(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4348.35', width=5)

width < len (16) in center_string(outstring, ' 9.4541(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928909(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3916.42', width=5)

width < len (16) in center_string(outstring, ' 7.6692(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931732(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3910.43', width=5)

width < len (16) in center_string(outstring, ' 7.6457(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934540(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4333.28', width=5)

width < len (16) in center_string(outstring, ' 9.3886(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937363(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4326.79', width=5)

width < len (16) in center_string(outstring, ' 9.3606(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940186(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(4.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.1(8.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.450 sec, System: 0.020 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM4.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM4.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM82.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM82.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  11%
Amount of optimization complete =  22%
Amount of optimization complete =  33%
Amount of optimization complete =  44%
Amount of optimization complete =  55%
Amount of optimization complete =  66%
Amount of optimization complete =  77%
Amount of optimization complete =  88%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1041.27', width=5)

width < len (9) in center_string(outstring, '542226.81', width=6)

width < len (12) in center_string(outstring, '591437733.67', width=8)

width < len (7) in center_string(outstring, '2574.10', width=6)

width < len (7) in center_string(outstring, '3991.04', width=5)

width < len (16) in center_string(outstring, ' 7.9642(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.608(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255209(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4422.88', width=5)

width < len (16) in center_string(outstring, ' 9.7809(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017216(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923340(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4418.40', width=5)

width < len (16) in center_string(outstring, ' 9.7611(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025824(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926010(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '3972.89', width=5)

width < len (16) in center_string(outstring, ' 7.8919(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034432(25)', width=12)

width < len (15) in center_string(outstring, ' 166.928680(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(17)', width=10)

width < len (7) in center_string(outstring, '4407.38', width=5)

width < len (16) in center_string(outstring, ' 9.7125(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043040(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931351(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4400.86', width=5)

width < len (16) in center_string(outstring, ' 9.6838(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4393.67', width=5)

width < len (16) in center_string(outstring, ' 9.6522(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060256(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4385.83', width=5)

width < len (16) in center_string(outstring, ' 9.6178(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068864(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.320 sec, System: 0.010 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM82.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM82.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM39.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM39.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '572.89', width=5)

width < len (9) in center_string(outstring, '164195.83', width=6)

width < len (12) in center_string(outstring, '595784633.76', width=8)

width < len (7) in center_string(outstring, '3652.51', width=6)

width < len (7) in center_string(outstring, '4382.71', width=5)

width < len (16) in center_string(outstring, ' 9.6041(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.920(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4380.37', width=5)

width < len (16) in center_string(outstring, ' 9.5938(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017840(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919388(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4377.26', width=5)

width < len (16) in center_string(outstring, ' 9.5802(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026759(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922134(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4373.43', width=5)

width < len (16) in center_string(outstring, ' 9.5635(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035679(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924881(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '3933.01', width=5)

width < len (16) in center_string(outstring, ' 7.7343(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044599(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927628(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(17)', width=10)

width < len (7) in center_string(outstring, '4363.63', width=5)

width < len (16) in center_string(outstring, ' 9.5206(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053519(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930374(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4357.67', width=5)

width < len (16) in center_string(outstring, ' 9.4947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062438(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933121(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4351.02', width=5)

width < len (16) in center_string(outstring, ' 9.4657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071358(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935867(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(3.9)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.5(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM39.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM39.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM68.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM68.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '985.86', width=5)

width < len (9) in center_string(outstring, '486061.69', width=6)

width < len (12) in center_string(outstring, '587308071.50', width=8)

width < len (7) in center_string(outstring, '3187.23', width=6)

width < len (7) in center_string(outstring, '3977.47', width=5)

width < len (16) in center_string(outstring, ' 7.9102(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.708(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253533(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4406.42', width=5)

width < len (16) in center_string(outstring, ' 9.7083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017416(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921677(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4402.27', width=5)

width < len (16) in center_string(outstring, ' 9.6900(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026125(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924377(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4397.42', width=5)

width < len (16) in center_string(outstring, ' 9.6687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034833(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927078(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3953.48', width=5)

width < len (16) in center_string(outstring, ' 7.8150(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043541(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929764(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(17)', width=10)

width < len (7) in center_string(outstring, '4385.65', width=5)

width < len (16) in center_string(outstring, ' 9.6170(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052249(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932465(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4378.75', width=5)

width < len (16) in center_string(outstring, ' 9.5868(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060957(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4371.19', width=5)

width < len (16) in center_string(outstring, ' 9.5537(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069666(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937851(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.4)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.620 sec (User: 0.560 sec, System: 0.060 sec)
  Total time: 0.620 sec

Final candidates in binary format are in 'Sband_DM68.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM68.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM16.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM16.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 64 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '626.86', width=5)

width < len (9) in center_string(outstring, '196568.62', width=6)

width < len (12) in center_string(outstring, '576832730.38', width=8)

width < len (7) in center_string(outstring, '3490.11', width=6)

width < len (7) in center_string(outstring, '4366.55', width=5)

width < len (16) in center_string(outstring, ' 9.5334(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254934(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.46', width=5)

width < len (16) in center_string(outstring, ' 9.5243(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4361.58', width=5)

width < len (16) in center_string(outstring, ' 9.5117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925949(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.93', width=5)

width < len (16) in center_string(outstring, ' 9.4958(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928772(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3921.42', width=5)

width < len (16) in center_string(outstring, ' 7.6888(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931580(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3915.24', width=5)

width < len (16) in center_string(outstring, ' 7.6646(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934402(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4342.53', width=5)

width < len (16) in center_string(outstring, ' 9.4288(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937225(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.93', width=5)

width < len (16) in center_string(outstring, ' 9.4001(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940033(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.450 sec

Final candidates in binary format are in 'Sband_DM16.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM16.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM39.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM39.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '564.41', width=5)

width < len (9) in center_string(outstring, '159368.48', width=6)

width < len (12) in center_string(outstring, '581081485.74', width=8)

width < len (7) in center_string(outstring, '3592.65', width=6)

width < len (7) in center_string(outstring, '3953.65', width=5)

width < len (16) in center_string(outstring, ' 7.8157(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.005(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255735(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(17)', width=10)

width < len (7) in center_string(outstring, '4380.61', width=5)

width < len (16) in center_string(outstring, ' 9.5949(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018011(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4377.46', width=5)

width < len (16) in center_string(outstring, ' 9.5811(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027016(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926682(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4373.58', width=5)

width < len (16) in center_string(outstring, ' 9.5641(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036022(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929443(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3933.14', width=5)

width < len (16) in center_string(outstring, ' 7.7348(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045027(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932205(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(17)', width=10)

width < len (7) in center_string(outstring, '4363.63', width=5)

width < len (16) in center_string(outstring, ' 9.5206(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054032(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4357.59', width=5)

width < len (16) in center_string(outstring, ' 9.4943(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063038(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937729(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.84', width=5)

width < len (16) in center_string(outstring, ' 9.4649(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072043(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940506(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.6)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.2(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.520 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM39.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM39.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM53.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM53.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '802.02', width=5)

width < len (9) in center_string(outstring, '321716.38', width=6)

width < len (12) in center_string(outstring, '600150658.32', width=8)

width < len (7) in center_string(outstring, '3093.72', width=6)

width < len (7) in center_string(outstring, '3968.19', width=5)

width < len (16) in center_string(outstring, ' 7.8733(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.855(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254020(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(17)', width=10)

width < len (7) in center_string(outstring, '4396.67', width=5)

width < len (16) in center_string(outstring, ' 9.6654(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017710(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4393.12', width=5)

width < len (16) in center_string(outstring, ' 9.6497(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026566(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924911(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4388.84', width=5)

width < len (16) in center_string(outstring, ' 9.6310(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4383.86', width=5)

width < len (16) in center_string(outstring, ' 9.6091(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044276(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930359(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4378.17', width=5)

width < len (16) in center_string(outstring, ' 9.5842(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053131(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933090(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4371.79', width=5)

width < len (16) in center_string(outstring, ' 9.5563(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061987(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935822(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4364.72', width=5)

width < len (16) in center_string(outstring, ' 9.5254(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938553(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.330 sec, System: 0.010 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM53.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM53.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM41.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM41.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '672.08', width=5)

width < len (9) in center_string(outstring, '225939.72', width=6)

width < len (12) in center_string(outstring, '611185882.67', width=8)

width < len (7) in center_string(outstring, '4306.47', width=6)

width < len (7) in center_string(outstring, '4383.93', width=5)

width < len (16) in center_string(outstring, ' 9.6094(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.985(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255313(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.53', width=5)

width < len (16) in center_string(outstring, ' 9.5989(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923492(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.34', width=5)

width < len (16) in center_string(outstring, ' 9.5850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026956(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926254(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.43', width=5)

width < len (16) in center_string(outstring, ' 9.5678(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035942(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929016(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.79', width=5)

width < len (16) in center_string(outstring, ' 9.5475(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044927(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931763(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.43', width=5)

width < len (16) in center_string(outstring, ' 9.5241(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053913(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934525(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4358.37', width=5)

width < len (16) in center_string(outstring, ' 9.4977(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062898(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937286(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.60', width=5)

width < len (16) in center_string(outstring, ' 9.4682(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071884(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940048(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.4)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM41.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM41.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM25.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM25.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '377.27', width=5)

width < len (8) in center_string(outstring, '71251.55', width=6)

width < len (12) in center_string(outstring, '592877564.78', width=8)

width < len (7) in center_string(outstring, '2049.66', width=6)

width < len (7) in center_string(outstring, '3944.01', width=5)

width < len (16) in center_string(outstring, ' 7.7776(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.129(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253774(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(17)', width=10)

width < len (7) in center_string(outstring, '4368.13', width=5)

width < len (16) in center_string(outstring, ' 9.5403(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.26', width=5)

width < len (16) in center_string(outstring, ' 9.5277(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027387(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924759(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.64', width=5)

width < len (16) in center_string(outstring, ' 9.5120(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927567(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.29', width=5)

width < len (16) in center_string(outstring, ' 9.4930(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930359(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.20', width=5)

width < len (16) in center_string(outstring, ' 9.4708(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054774(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933151(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.39', width=5)

width < len (16) in center_string(outstring, ' 9.4456(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063903(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935959(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.86', width=5)

width < len (16) in center_string(outstring, ' 9.4172(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073032(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938751(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.520 sec, System: 0.010 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM25.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM25.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM37.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM37.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '478.10', width=5)

width < len (9) in center_string(outstring, '114377.41', width=6)

width < len (12) in center_string(outstring, '610348934.84', width=8)

width < len (7) in center_string(outstring, '2863.66', width=6)

width < len (7) in center_string(outstring, '4380.63', width=5)

width < len (16) in center_string(outstring, ' 9.5950(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.032(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255411(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4378.33', width=5)

width < len (16) in center_string(outstring, ' 9.5849(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018063(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923599(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.24', width=5)

width < len (16) in center_string(outstring, ' 9.5714(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027095(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926361(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.41', width=5)

width < len (16) in center_string(outstring, ' 9.5546(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036127(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929138(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4366.85', width=5)

width < len (16) in center_string(outstring, ' 9.5347(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045159(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931900(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4361.57', width=5)

width < len (16) in center_string(outstring, ' 9.5117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054190(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934677(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.58', width=5)

width < len (16) in center_string(outstring, ' 9.4855(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063222(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937454(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4348.87', width=5)

width < len (16) in center_string(outstring, ' 9.4564(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072254(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.8(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.630 sec (User: 0.610 sec, System: 0.020 sec)
  Total time: 0.620 sec

Final candidates in binary format are in 'Sband_DM37.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM37.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM38.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM38.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '521.19', width=5)

width < len (9) in center_string(outstring, '135910.66', width=6)

width < len (12) in center_string(outstring, '610369668.09', width=8)

width < len (7) in center_string(outstring, '3245.25', width=6)

width < len (7) in center_string(outstring, '4380.86', width=5)

width < len (16) in center_string(outstring, ' 9.5960(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.005(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252178(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4378.50', width=5)

width < len (16) in center_string(outstring, ' 9.5857(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018010(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920364(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.36', width=5)

width < len (16) in center_string(outstring, ' 9.5719(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4371.49', width=5)

width < len (16) in center_string(outstring, ' 9.5550(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036020(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925888(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4366.89', width=5)

width < len (16) in center_string(outstring, ' 9.5349(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045025(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928650(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4361.58', width=5)

width < len (16) in center_string(outstring, ' 9.5117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054030(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931412(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.55', width=5)

width < len (16) in center_string(outstring, ' 9.4854(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063035(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934174(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4348.82', width=5)

width < len (16) in center_string(outstring, ' 9.4561(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936935(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(8.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.510 sec, System: 0.010 sec)
  Total time: 0.510 sec

Final candidates in binary format are in 'Sband_DM38.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM38.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM71.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM71.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1000.73', width=5)

width < len (9) in center_string(outstring, '500832.44', width=6)

width < len (12) in center_string(outstring, '602572820.13', width=8)

width < len (7) in center_string(outstring, '3094.53', width=6)

width < len (7) in center_string(outstring, '4410.39', width=5)

width < len (16) in center_string(outstring, ' 9.7258(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.206(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256092(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4407.03', width=5)

width < len (16) in center_string(outstring, ' 9.7110(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018412(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924042(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3968.10', width=5)

width < len (16) in center_string(outstring, ' 7.8729(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027618(25)', width=12)

width < len (15) in center_string(outstring, ' 166.926590(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4398.15', width=5)

width < len (16) in center_string(outstring, ' 9.6719(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036824(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.70', width=5)

width < len (16) in center_string(outstring, ' 9.6479(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046030(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931717(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4386.59', width=5)

width < len (16) in center_string(outstring, ' 9.6211(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055236(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.83', width=5)

width < len (16) in center_string(outstring, ' 9.5914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936829(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4372.42', width=5)

width < len (16) in center_string(outstring, ' 9.5590(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939392(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.9)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM71.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM71.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM33.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM33.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 91 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '381.35', width=5)

width < len (8) in center_string(outstring, '72800.72', width=6)

width < len (12) in center_string(outstring, '563703058.72', width=8)

width < len (7) in center_string(outstring, '2080.81', width=6)

width < len (7) in center_string(outstring, '4372.91', width=5)

width < len (16) in center_string(outstring, ' 9.5612(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.058(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253901(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4370.70', width=5)

width < len (16) in center_string(outstring, ' 9.5515(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018115(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4367.70', width=5)

width < len (16) in center_string(outstring, ' 9.5384(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027173(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.96', width=5)

width < len (16) in center_string(outstring, ' 9.5221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036231(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.50', width=5)

width < len (16) in center_string(outstring, ' 9.5026(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930420(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(16)', width=10)

width < len (7) in center_string(outstring, '3921.03', width=5)

width < len (16) in center_string(outstring, ' 7.6872(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054346(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933197(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '3914.20', width=5)

width < len (16) in center_string(outstring, ' 7.6605(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063404(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935974(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '3906.87', width=5)

width < len (16) in center_string(outstring, ' 7.6318(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072462(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938751(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.6)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.540 sec, System: 0.020 sec)
  Total time: 0.560 sec

Final candidates in binary format are in 'Sband_DM33.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM33.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM32.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM32.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 79 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '372.07', width=5)

width < len (8) in center_string(outstring, '69302.34', width=6)

width < len (12) in center_string(outstring, '593066678.26', width=8)

width < len (7) in center_string(outstring, '2019.27', width=6)

width < len (7) in center_string(outstring, '4372.15', width=5)

width < len (16) in center_string(outstring, ' 9.5578(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.064(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253904(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4369.98', width=5)

width < len (16) in center_string(outstring, ' 9.5484(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018127(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4367.02', width=5)

width < len (16) in center_string(outstring, ' 9.5354(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027191(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.33', width=5)

width < len (16) in center_string(outstring, ' 9.5193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036254(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.90', width=5)

width < len (16) in center_string(outstring, ' 9.5000(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045318(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930420(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.76', width=5)

width < len (16) in center_string(outstring, ' 9.4776(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054382(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933212(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '3913.82', width=5)

width < len (16) in center_string(outstring, ' 7.6590(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063445(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935989(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4341.32', width=5)

width < len (16) in center_string(outstring, ' 9.4235(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072509(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.4)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.550 sec (User: 0.540 sec, System: 0.010 sec)
  Total time: 0.550 sec

Final candidates in binary format are in 'Sband_DM32.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM32.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM78.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM78.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1037.24', width=5)

width < len (9) in center_string(outstring, '538035.50', width=6)

width < len (12) in center_string(outstring, '605597764.83', width=8)

width < len (7) in center_string(outstring, '2799.89', width=6)

width < len (7) in center_string(outstring, '4422.89', width=5)

width < len (16) in center_string(outstring, ' 9.7810(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253308(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4419.33', width=5)

width < len (16) in center_string(outstring, ' 9.7652(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921249(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4415.01', width=5)

width < len (16) in center_string(outstring, ' 9.7462(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923813(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4410.01', width=5)

width < len (16) in center_string(outstring, ' 9.7241(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036856(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926376(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4404.34', width=5)

width < len (16) in center_string(outstring, ' 9.6991(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046070(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928940(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '3956.25', width=5)

width < len (16) in center_string(outstring, ' 7.8260(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055284(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931503(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4391.01', width=5)

width < len (16) in center_string(outstring, ' 9.6405(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064498(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934052(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4383.37', width=5)

width < len (16) in center_string(outstring, ' 9.6070(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073712(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM78.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM78.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM49.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM49.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 56 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '729.46', width=5)

width < len (9) in center_string(outstring, '266150.19', width=6)

width < len (12) in center_string(outstring, '598726381.65', width=8)

width < len (7) in center_string(outstring, '3116.78', width=6)

width < len (7) in center_string(outstring, '4393.37', width=5)

width < len (16) in center_string(outstring, ' 9.6508(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252047(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3957.58', width=5)

width < len (16) in center_string(outstring, ' 7.8312(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(26)', width=12)

width < len (15) in center_string(outstring, ' 166.919998(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4387.59', width=5)

width < len (16) in center_string(outstring, ' 9.6255(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922562(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4383.65', width=5)

width < len (16) in center_string(outstring, ' 9.6082(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.05', width=5)

width < len (16) in center_string(outstring, ' 9.5881(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927673(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4373.79', width=5)

width < len (16) in center_string(outstring, ' 9.5650(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930237(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4367.87', width=5)

width < len (16) in center_string(outstring, ' 9.5392(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932800(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4361.31', width=5)

width < len (16) in center_string(outstring, ' 9.5105(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935364(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM49.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM49.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM29.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM29.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 95 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '354.85', width=5)

width < len (8) in center_string(outstring, '63044.21', width=6)

width < len (12) in center_string(outstring, '608101849.81', width=8)

width < len (7) in center_string(outstring, '1884.70', width=6)

width < len (7) in center_string(outstring, '4372.17', width=5)

width < len (16) in center_string(outstring, ' 9.5579(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.102(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254131(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4369.99', width=5)

width < len (16) in center_string(outstring, ' 9.5484(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018204(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4367.03', width=5)

width < len (16) in center_string(outstring, ' 9.5355(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027306(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4363.32', width=5)

width < len (16) in center_string(outstring, ' 9.5193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036409(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927902(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.88', width=5)

width < len (16) in center_string(outstring, ' 9.4999(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045511(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930679(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.70', width=5)

width < len (16) in center_string(outstring, ' 9.4774(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054613(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933472(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4347.81', width=5)

width < len (16) in center_string(outstring, ' 9.4517(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4341.20', width=5)

width < len (16) in center_string(outstring, ' 9.4230(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072817(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939056(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.8)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(1.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(8.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(8.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.610 sec (User: 0.600 sec, System: 0.010 sec)
  Total time: 0.600 sec

Final candidates in binary format are in 'Sband_DM29.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM29.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM44.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM44.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '709.32', width=5)

width < len (9) in center_string(outstring, '251660.38', width=6)

width < len (12) in center_string(outstring, '597674833.48', width=8)

width < len (7) in center_string(outstring, '3827.38', width=6)

width < len (7) in center_string(outstring, '4389.81', width=5)

width < len (16) in center_string(outstring, ' 9.6352(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.935(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4387.34', width=5)

width < len (16) in center_string(outstring, ' 9.6244(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017870(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3950.13', width=5)

width < len (16) in center_string(outstring, ' 7.8018(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026805(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924896(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4380.11', width=5)

width < len (16) in center_string(outstring, ' 9.5927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035741(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.42', width=5)

width < len (16) in center_string(outstring, ' 9.5722(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930389(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4370.01', width=5)

width < len (16) in center_string(outstring, ' 9.5485(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053611(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933136(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4363.90', width=5)

width < len (16) in center_string(outstring, ' 9.5218(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062546(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4357.09', width=5)

width < len (16) in center_string(outstring, ' 9.4921(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071481(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938629(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM44.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM44.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM77.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM77.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1034.45', width=5)

width < len (9) in center_string(outstring, '535140.38', width=6)

width < len (12) in center_string(outstring, '604949181.03', width=8)

width < len (7) in center_string(outstring, '2827.31', width=6)

width < len (7) in center_string(outstring, '4421.40', width=5)

width < len (16) in center_string(outstring, ' 9.7744(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254156(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3981.14', width=5)

width < len (16) in center_string(outstring, ' 7.9247(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922363(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4412.94', width=5)

width < len (16) in center_string(outstring, ' 9.7370(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925171(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4407.51', width=5)

width < len (16) in center_string(outstring, ' 9.7131(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927994(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4401.31', width=5)

width < len (16) in center_string(outstring, ' 9.6858(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930801(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '4394.36', width=5)

width < len (16) in center_string(outstring, ' 9.6552(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933624(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4386.67', width=5)

width < len (16) in center_string(outstring, ' 9.6215(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936432(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4378.25', width=5)

width < len (16) in center_string(outstring, ' 9.5846(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939255(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.440 sec (User: 0.430 sec, System: 0.010 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM77.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM77.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM27.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM27.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '351.35', width=5)

width < len (8) in center_string(outstring, '61806.57', width=6)

width < len (12) in center_string(outstring, '592548482.99', width=8)

width < len (7) in center_string(outstring, '1850.49', width=6)

width < len (7) in center_string(outstring, '4370.15', width=5)

width < len (16) in center_string(outstring, ' 9.5491(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.117(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254009(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4367.99', width=5)

width < len (16) in center_string(outstring, ' 9.5397(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018233(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922195(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.04', width=5)

width < len (16) in center_string(outstring, ' 9.5268(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027350(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.35', width=5)

width < len (16) in center_string(outstring, ' 9.5107(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927795(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.92', width=5)

width < len (16) in center_string(outstring, ' 9.4914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930588(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4351.76', width=5)

width < len (16) in center_string(outstring, ' 9.4689(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054699(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933380(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3912.73', width=5)

width < len (16) in center_string(outstring, ' 7.6547(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063816(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936172(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4339.28', width=5)

width < len (16) in center_string(outstring, ' 9.4147(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072933(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938965(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.600 sec (User: 0.590 sec, System: 0.010 sec)
  Total time: 0.590 sec

Final candidates in binary format are in 'Sband_DM27.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM27.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM0.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM0.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '591.50', width=5)

width < len (9) in center_string(outstring, '175025.92', width=6)

width < len (12) in center_string(outstring, '589774833.13', width=8)

width < len (7) in center_string(outstring, '1436.80', width=6)

width < len (7) in center_string(outstring, '4358.23', width=5)

width < len (16) in center_string(outstring, ' 9.4971(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252906(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4356.42', width=5)

width < len (16) in center_string(outstring, ' 9.4892(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921112(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.83', width=5)

width < len (16) in center_string(outstring, ' 9.4779(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.49', width=5)

width < len (16) in center_string(outstring, ' 9.4634(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4346.39', width=5)

width < len (16) in center_string(outstring, ' 9.4456(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929550(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.56', width=5)

width < len (16) in center_string(outstring, ' 9.4246(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932373(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.95', width=5)

width < len (16) in center_string(outstring, ' 7.6360(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935196(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.70', width=5)

width < len (16) in center_string(outstring, ' 9.3731(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938004(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM0.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM0.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM76.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM76.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1028.81', width=5)

width < len (9) in center_string(outstring, '529321.31', width=6)

width < len (12) in center_string(outstring, '604636036.80', width=8)

width < len (7) in center_string(outstring, '2848.63', width=6)

width < len (7) in center_string(outstring, '4420.99', width=5)

width < len (16) in center_string(outstring, ' 9.7726(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254481(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4417.20', width=5)

width < len (16) in center_string(outstring, ' 9.7558(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922684(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4412.55', width=5)

width < len (16) in center_string(outstring, ' 9.7353(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925507(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4407.14', width=5)

width < len (16) in center_string(outstring, ' 9.7114(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928329(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.95', width=5)

width < len (16) in center_string(outstring, ' 9.6842(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3951.49', width=5)

width < len (16) in center_string(outstring, ' 7.8071(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4386.33', width=5)

width < len (16) in center_string(outstring, ' 9.6200(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936783(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4377.92', width=5)

width < len (16) in center_string(outstring, ' 9.5831(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, '0.0(8.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM76.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM76.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM15.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM15.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '648.01', width=5)

width < len (9) in center_string(outstring, '210053.83', width=6)

width < len (12) in center_string(outstring, '606389903.81', width=8)

width < len (7) in center_string(outstring, '3521.67', width=6)

width < len (7) in center_string(outstring, '4365.73', width=5)

width < len (16) in center_string(outstring, ' 9.5298(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.978(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251168(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4363.63', width=5)

width < len (16) in center_string(outstring, ' 9.5207(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017956(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919403(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4360.75', width=5)

width < len (16) in center_string(outstring, ' 9.5081(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026934(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922211(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.13', width=5)

width < len (16) in center_string(outstring, ' 9.4923(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035913(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925018(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.78', width=5)

width < len (16) in center_string(outstring, ' 9.4733(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044891(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927826(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4347.69', width=5)

width < len (16) in center_string(outstring, ' 9.4512(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053869(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930649(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4341.89', width=5)

width < len (16) in center_string(outstring, ' 9.4260(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062847(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933456(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4335.37', width=5)

width < len (16) in center_string(outstring, ' 9.3977(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071825(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936264(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM15.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM15.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM78.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM78.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1040.61', width=5)

width < len (9) in center_string(outstring, '541533.06', width=6)

width < len (12) in center_string(outstring, '605337421.67', width=8)

width < len (7) in center_string(outstring, '2781.88', width=6)

width < len (7) in center_string(outstring, '4423.89', width=5)

width < len (16) in center_string(outstring, ' 9.7854(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254559(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4420.00', width=5)

width < len (16) in center_string(outstring, ' 9.7682(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922760(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4415.27', width=5)

width < len (16) in center_string(outstring, ' 9.7473(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925583(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4409.75', width=5)

width < len (16) in center_string(outstring, ' 9.7230(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928406(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4403.47', width=5)

width < len (16) in center_string(outstring, ' 9.6953(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931229(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3953.55', width=5)

width < len (16) in center_string(outstring, ' 7.8153(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934052(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4388.66', width=5)

width < len (16) in center_string(outstring, ' 9.6302(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936859(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4380.15', width=5)

width < len (16) in center_string(outstring, ' 9.5929(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939682(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.2)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.360 sec (User: 0.350 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM78.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM78.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM17.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM17.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 74 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '614.28', width=5)

width < len (9) in center_string(outstring, '188761.00', width=6)

width < len (12) in center_string(outstring, '576701734.45', width=8)

width < len (7) in center_string(outstring, '3654.95', width=6)

width < len (7) in center_string(outstring, '4365.96', width=5)

width < len (16) in center_string(outstring, ' 9.5308(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252858(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.81', width=5)

width < len (16) in center_string(outstring, ' 9.5214(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921066(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4360.86', width=5)

width < len (16) in center_string(outstring, ' 9.5086(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923874(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3926.39', width=5)

width < len (16) in center_string(outstring, ' 7.7083(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926697(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '3920.71', width=5)

width < len (16) in center_string(outstring, ' 7.6860(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929504(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4347.52', width=5)

width < len (16) in center_string(outstring, ' 9.4505(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932327(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.59', width=5)

width < len (16) in center_string(outstring, ' 9.4247(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4334.94', width=5)

width < len (16) in center_string(outstring, ' 9.3959(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937958(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.2)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=10)

width < len (13) in center_string(outstring, '0.0(4.8)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM17.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM17.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM51.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM51.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '753.39', width=5)

width < len (9) in center_string(outstring, '283893.75', width=6)

width < len (12) in center_string(outstring, '583544240.36', width=8)

width < len (7) in center_string(outstring, '3009.34', width=6)

width < len (7) in center_string(outstring, '4394.02', width=5)

width < len (16) in center_string(outstring, ' 9.6537(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.871(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254998(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.25', width=5)

width < len (16) in center_string(outstring, ' 9.6416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017743(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923157(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3952.96', width=5)

width < len (16) in center_string(outstring, ' 7.8130(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026614(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925888(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '3947.24', width=5)

width < len (16) in center_string(outstring, ' 7.7904(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035486(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928619(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4378.49', width=5)

width < len (16) in center_string(outstring, ' 9.5856(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044357(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931351(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.83', width=5)

width < len (16) in center_string(outstring, ' 9.5608(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053228(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934082(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4366.46', width=5)

width < len (16) in center_string(outstring, ' 9.5330(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062100(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936813(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4359.41', width=5)

width < len (16) in center_string(outstring, ' 9.5022(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.5)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.380 sec, System: 0.020 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM51.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM51.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM2.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM2.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '578.82', width=5)

width < len (9) in center_string(outstring, '167606.56', width=6)

width < len (12) in center_string(outstring, '589832156.48', width=8)

width < len (7) in center_string(outstring, '1439.64', width=6)

width < len (7) in center_string(outstring, '4358.78', width=5)

width < len (16) in center_string(outstring, ' 9.4995(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254314(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.90', width=5)

width < len (16) in center_string(outstring, ' 9.4913(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.24', width=5)

width < len (16) in center_string(outstring, ' 9.4797(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925339(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.82', width=5)

width < len (16) in center_string(outstring, ' 9.4648(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.65', width=5)

width < len (16) in center_string(outstring, ' 9.4467(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.74', width=5)

width < len (16) in center_string(outstring, ' 9.4254(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933777(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.37', width=5)

width < len (16) in center_string(outstring, ' 7.6338(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936600(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.73', width=5)

width < len (16) in center_string(outstring, ' 9.3733(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939407(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM2.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM2.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM31.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM31.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 91 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   3%
Amount of optimization complete =   7%
Amount of optimization complete =  11%
Amount of optimization complete =  15%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  46%
Amount of optimization complete =  50%
Amount of optimization complete =  53%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  84%
Amount of optimization complete =  88%
Amount of optimization complete =  92%
Amount of optimization complete =  96%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '361.36', width=5)

width < len (8) in center_string(outstring, '65376.16', width=6)

width < len (12) in center_string(outstring, '593166005.23', width=8)

width < len (7) in center_string(outstring, '1926.17', width=6)

width < len (7) in center_string(outstring, '4371.79', width=5)

width < len (16) in center_string(outstring, ' 9.5563(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.080(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4369.62', width=5)

width < len (16) in center_string(outstring, ' 9.5468(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018160(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921310(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3938.29', width=5)

width < len (16) in center_string(outstring, ' 7.7551(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027240(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924103(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4362.98', width=5)

width < len (16) in center_string(outstring, ' 9.5178(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036320(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926880(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.56', width=5)

width < len (16) in center_string(outstring, ' 9.4985(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045401(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929672(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.41', width=5)

width < len (16) in center_string(outstring, ' 9.4761(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054481(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932449(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4347.54', width=5)

width < len (16) in center_string(outstring, ' 9.4506(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063561(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.97', width=5)

width < len (16) in center_string(outstring, ' 9.4220(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938019(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(9.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.720 sec (User: 0.710 sec, System: 0.010 sec)
  Total time: 0.720 sec

Final candidates in binary format are in 'Sband_DM31.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM31.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM68.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM68.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 37 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '980.33', width=5)

width < len (9) in center_string(outstring, '480622.06', width=6)

width < len (12) in center_string(outstring, '617820310.07', width=8)

width < len (7) in center_string(outstring, '3173.99', width=6)

width < len (7) in center_string(outstring, '4410.76', width=5)

width < len (16) in center_string(outstring, ' 9.7274(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.725(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254442(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4407.40', width=5)

width < len (16) in center_string(outstring, ' 9.7126(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017450(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922592(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4403.28', width=5)

width < len (16) in center_string(outstring, ' 9.6944(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026174(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.45', width=5)

width < len (16) in center_string(outstring, ' 9.6732(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034899(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927979(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.93', width=5)

width < len (16) in center_string(outstring, ' 9.6489(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930679(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4386.72', width=5)

width < len (16) in center_string(outstring, ' 9.6217(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052349(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933365(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.84', width=5)

width < len (16) in center_string(outstring, ' 9.5915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936066(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4372.29', width=5)

width < len (16) in center_string(outstring, ' 9.5585(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069798(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.7)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM68.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM68.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM63.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM63.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '922.67', width=5)

width < len (9) in center_string(outstring, '425762.84', width=6)

width < len (12) in center_string(outstring, '601272024.55', width=8)

width < len (7) in center_string(outstring, '3208.02', width=6)

width < len (7) in center_string(outstring, '4405.84', width=5)

width < len (16) in center_string(outstring, ' 9.7057(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.748(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254123(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.63', width=5)

width < len (16) in center_string(outstring, ' 9.6916(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017496(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922272(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4398.66', width=5)

width < len (16) in center_string(outstring, ' 9.6741(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026244(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3955.12', width=5)

width < len (16) in center_string(outstring, ' 7.8215(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034992(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927673(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4388.62', width=5)

width < len (16) in center_string(outstring, ' 9.6300(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043740(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930374(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4382.57', width=5)

width < len (16) in center_string(outstring, ' 9.6035(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052488(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933075(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.83', width=5)

width < len (16) in center_string(outstring, ' 9.5740(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061236(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935776(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4368.43', width=5)

width < len (16) in center_string(outstring, ' 9.5416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069984(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938477(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(9.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.8)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM63.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM63.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM66.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM66.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '968.11', width=5)

width < len (9) in center_string(outstring, '468719.88', width=6)

width < len (12) in center_string(outstring, '586187247.85', width=8)

width < len (7) in center_string(outstring, '3321.40', width=6)

width < len (7) in center_string(outstring, '4406.84', width=5)

width < len (16) in center_string(outstring, ' 9.7101(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.737(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253696(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.52', width=5)

width < len (16) in center_string(outstring, ' 9.6955(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017474(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921844(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4399.43', width=5)

width < len (16) in center_string(outstring, ' 9.6775(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026211(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4394.65', width=5)

width < len (16) in center_string(outstring, ' 9.6565(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034948(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927246(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4389.16', width=5)

width < len (16) in center_string(outstring, ' 9.6324(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043685(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929947(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4383.00', width=5)

width < len (16) in center_string(outstring, ' 9.6053(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932632(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3935.75', width=5)

width < len (16) in center_string(outstring, ' 7.7451(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061159(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935333(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '3927.59', width=5)

width < len (16) in center_string(outstring, ' 7.7130(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069896(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938034(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(7.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.470 sec, System: 0.020 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM66.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM66.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM31.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM31.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 81 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  13%
Amount of optimization complete =  18%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  40%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  59%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  81%
Amount of optimization complete =  86%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '364.18', width=5)

width < len (8) in center_string(outstring, '66399.07', width=6)

width < len (12) in center_string(outstring, '607771689.38', width=8)

width < len (7) in center_string(outstring, '1959.35', width=6)

width < len (7) in center_string(outstring, '4370.98', width=5)

width < len (16) in center_string(outstring, ' 9.5527(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.075(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253739(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.80', width=5)

width < len (16) in center_string(outstring, ' 9.5432(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018150(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.83', width=5)

width < len (16) in center_string(outstring, ' 9.5302(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027226(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924713(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4362.12', width=5)

width < len (16) in center_string(outstring, ' 9.5141(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036301(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927490(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.69', width=5)

width < len (16) in center_string(outstring, ' 9.4947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045376(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930283(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.52', width=5)

width < len (16) in center_string(outstring, ' 9.4722(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054451(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.64', width=5)

width < len (16) in center_string(outstring, ' 9.4466(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063526(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935837(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.05', width=5)

width < len (16) in center_string(outstring, ' 9.4180(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072602(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938629(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(2.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.5)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.9(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.570 sec (User: 0.560 sec, System: 0.010 sec)
  Total time: 0.570 sec

Final candidates in binary format are in 'Sband_DM31.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM31.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM7.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM7.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '603.08', width=5)

width < len (9) in center_string(outstring, '181945.83', width=6)

width < len (12) in center_string(outstring, '589107660.30', width=8)

width < len (7) in center_string(outstring, '1902.88', width=6)

width < len (7) in center_string(outstring, '4357.21', width=5)

width < len (16) in center_string(outstring, ' 9.4926(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254211(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4355.06', width=5)

width < len (16) in center_string(outstring, ' 9.4833(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922409(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4352.12', width=5)

width < len (16) in center_string(outstring, ' 9.4705(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4348.44', width=5)

width < len (16) in center_string(outstring, ' 9.4545(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.00', width=5)

width < len (16) in center_string(outstring, ' 9.4352(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4338.83', width=5)

width < len (16) in center_string(outstring, ' 9.4127(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933685(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3903.16', width=5)

width < len (16) in center_string(outstring, ' 7.6173(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936493(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4326.31', width=5)

width < len (16) in center_string(outstring, ' 9.3585(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939316(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM7.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM7.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM64.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM64.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '931.64', width=5)

width < len (9) in center_string(outstring, '434072.22', width=6)

width < len (12) in center_string(outstring, '586111328.54', width=8)

width < len (7) in center_string(outstring, '3249.33', width=6)

width < len (7) in center_string(outstring, '4406.42', width=5)

width < len (16) in center_string(outstring, ' 9.7083(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.753(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254002(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4403.19', width=5)

width < len (16) in center_string(outstring, ' 9.6941(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4399.20', width=5)

width < len (16) in center_string(outstring, ' 9.6765(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.50', width=5)

width < len (16) in center_string(outstring, ' 9.6558(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035010(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927551(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3948.65', width=5)

width < len (16) in center_string(outstring, ' 7.7959(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043763(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930267(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4383.03', width=5)

width < len (16) in center_string(outstring, ' 9.6055(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932968(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '3933.90', width=5)

width < len (16) in center_string(outstring, ' 7.7378(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061268(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935669(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4368.83', width=5)

width < len (16) in center_string(outstring, ' 9.5434(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938370(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.2)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.650 sec (User: 0.630 sec, System: 0.020 sec)
  Total time: 0.630 sec

Final candidates in binary format are in 'Sband_DM64.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM64.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM40.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM40.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '639.14', width=5)

width < len (9) in center_string(outstring, '204342.41', width=6)

width < len (12) in center_string(outstring, '595946060.51', width=8)

width < len (7) in center_string(outstring, '4134.06', width=6)

width < len (7) in center_string(outstring, '4383.46', width=5)

width < len (16) in center_string(outstring, ' 9.6074(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.000(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254347(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.07', width=5)

width < len (16) in center_string(outstring, ' 9.5969(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017999(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4377.88', width=5)

width < len (16) in center_string(outstring, ' 9.5829(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026999(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4373.97', width=5)

width < len (16) in center_string(outstring, ' 9.5658(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035999(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3934.38', width=5)

width < len (16) in center_string(outstring, ' 7.7397(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044999(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930817(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4363.97', width=5)

width < len (16) in center_string(outstring, ' 9.5221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053998(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933578(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4357.91', width=5)

width < len (16) in center_string(outstring, ' 9.4957(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062998(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936340(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.14', width=5)

width < len (16) in center_string(outstring, ' 9.4662(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071998(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939102(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(8.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.550 sec, System: 0.010 sec)
  Total time: 0.560 sec

Final candidates in binary format are in 'Sband_DM40.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM40.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM46.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM46.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '710.90', width=5)

width < len (9) in center_string(outstring, '252784.72', width=6)

width < len (12) in center_string(outstring, '597987967.72', width=8)

width < len (7) in center_string(outstring, '3456.80', width=6)

width < len (7) in center_string(outstring, '4391.54', width=5)

width < len (16) in center_string(outstring, ' 9.6428(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.919(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253563(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4388.97', width=5)

width < len (16) in center_string(outstring, ' 9.6315(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017838(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921738(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4385.62', width=5)

width < len (16) in center_string(outstring, ' 9.6168(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026757(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924469(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3945.54', width=5)

width < len (16) in center_string(outstring, ' 7.7837(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035676(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927216(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4376.75', width=5)

width < len (16) in center_string(outstring, ' 9.5780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044595(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929962(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.25', width=5)

width < len (16) in center_string(outstring, ' 9.5539(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053514(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932709(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4365.05', width=5)

width < len (16) in center_string(outstring, ' 9.5268(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062433(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935455(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4358.16', width=5)

width < len (16) in center_string(outstring, ' 9.4968(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071352(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938187(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.5(9.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM46.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM46.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM18.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM18.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 73 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '587.87', width=5)

width < len (9) in center_string(outstring, '172886.81', width=6)

width < len (12) in center_string(outstring, '606439990.70', width=8)

width < len (7) in center_string(outstring, '3587.41', width=6)

width < len (7) in center_string(outstring, '4366.07', width=5)

width < len (16) in center_string(outstring, ' 9.5313(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.95', width=5)

width < len (16) in center_string(outstring, ' 9.5221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921814(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.04', width=5)

width < len (16) in center_string(outstring, ' 9.5093(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.37', width=5)

width < len (16) in center_string(outstring, ' 9.4934(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927429(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.96', width=5)

width < len (16) in center_string(outstring, ' 9.4741(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930252(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4347.80', width=5)

width < len (16) in center_string(outstring, ' 9.4517(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055218(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.91', width=5)

width < len (16) in center_string(outstring, ' 9.4261(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4335.30', width=5)

width < len (16) in center_string(outstring, ' 9.3974(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938690(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(4.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.570 sec (User: 0.560 sec, System: 0.010 sec)
  Total time: 0.560 sec

Final candidates in binary format are in 'Sband_DM18.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM18.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM2.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM2.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '584.03', width=5)

width < len (9) in center_string(outstring, '170635.66', width=6)

width < len (12) in center_string(outstring, '589960937.08', width=8)

width < len (7) in center_string(outstring, '1467.32', width=6)

width < len (7) in center_string(outstring, '4359.26', width=5)

width < len (16) in center_string(outstring, ' 9.5016(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254772(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.39', width=5)

width < len (16) in center_string(outstring, ' 9.4934(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922974(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4354.73', width=5)

width < len (16) in center_string(outstring, ' 9.4818(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925797(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.32', width=5)

width < len (16) in center_string(outstring, ' 9.4670(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928604(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.16', width=5)

width < len (16) in center_string(outstring, ' 9.4489(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931427(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.25', width=5)

width < len (16) in center_string(outstring, ' 9.4276(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055263(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934235(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.61', width=5)

width < len (16) in center_string(outstring, ' 7.6347(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064474(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937057(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4330.26', width=5)

width < len (16) in center_string(outstring, ' 9.3756(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073684(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939865(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM2.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM2.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM23.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM23.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 84 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '422.33', width=5)

width < len (8) in center_string(outstring, '89267.84', width=6)

width < len (12) in center_string(outstring, '562594322.92', width=8)

width < len (7) in center_string(outstring, '2400.96', width=6)

width < len (7) in center_string(outstring, '4367.85', width=5)

width < len (16) in center_string(outstring, ' 9.5390(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.150(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254043(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3936.92', width=5)

width < len (16) in center_string(outstring, ' 7.7497(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018301(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922241(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4362.89', width=5)

width < len (16) in center_string(outstring, ' 9.5174(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027451(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4359.27', width=5)

width < len (16) in center_string(outstring, ' 9.5016(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036602(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927841(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3921.62', width=5)

width < len (16) in center_string(outstring, ' 7.6895(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045752(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4349.81', width=5)

width < len (16) in center_string(outstring, ' 9.4604(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054902(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.99', width=5)

width < len (16) in center_string(outstring, ' 9.4351(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936249(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3901.47', width=5)

width < len (16) in center_string(outstring, ' 7.6107(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073203(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939041(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.510 sec, System: 0.010 sec)
  Total time: 0.510 sec

Final candidates in binary format are in 'Sband_DM23.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM23.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM64.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM64.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '931.52', width=5)

width < len (9) in center_string(outstring, '433967.12', width=6)

width < len (12) in center_string(outstring, '586023897.96', width=8)

width < len (7) in center_string(outstring, '3229.99', width=6)

width < len (7) in center_string(outstring, '4406.26', width=5)

width < len (16) in center_string(outstring, ' 9.7076(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.753(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254140(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.02', width=5)

width < len (16) in center_string(outstring, ' 9.6933(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922287(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4399.02', width=5)

width < len (16) in center_string(outstring, ' 9.6757(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.32', width=5)

width < len (16) in center_string(outstring, ' 9.6550(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035010(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927689(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '3947.93', width=5)

width < len (16) in center_string(outstring, ' 7.7931(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043763(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930405(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(17)', width=10)

width < len (7) in center_string(outstring, '4382.83', width=5)

width < len (16) in center_string(outstring, ' 9.6046(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933105(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3933.17', width=5)

width < len (16) in center_string(outstring, ' 7.7349(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061268(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935806(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4368.63', width=5)

width < len (16) in center_string(outstring, ' 9.5425(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938507(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(8.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM64.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM64.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM9.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM9.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '624.38', width=5)

width < len (9) in center_string(outstring, '195019.47', width=6)

width < len (12) in center_string(outstring, '589827648.64', width=8)

width < len (7) in center_string(outstring, '2171.95', width=6)

width < len (7) in center_string(outstring, '4359.85', width=5)

width < len (16) in center_string(outstring, ' 9.5041(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.70', width=5)

width < len (16) in center_string(outstring, ' 9.4948(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921906(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4354.77', width=5)

width < len (16) in center_string(outstring, ' 9.4820(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924713(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4351.09', width=5)

width < len (16) in center_string(outstring, ' 9.4660(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927536(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.66', width=5)

width < len (16) in center_string(outstring, ' 9.4467(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930344(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3911.47', width=5)

width < len (16) in center_string(outstring, ' 7.6498(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933167(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4335.59', width=5)

width < len (16) in center_string(outstring, ' 9.3987(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935989(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4328.97', width=5)

width < len (16) in center_string(outstring, ' 9.3700(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938797(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM9.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM9.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM50.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM50.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '742.86', width=5)

width < len (9) in center_string(outstring, '276017.28', width=6)

width < len (12) in center_string(outstring, '598528825.37', width=8)

width < len (7) in center_string(outstring, '2984.99', width=6)

width < len (7) in center_string(outstring, '4394.16', width=5)

width < len (16) in center_string(outstring, ' 9.6543(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.880(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255273(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.40', width=5)

width < len (16) in center_string(outstring, ' 9.6422(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017760(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923447(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4387.86', width=5)

width < len (16) in center_string(outstring, ' 9.6267(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926178(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3947.41', width=5)

width < len (16) in center_string(outstring, ' 7.7910(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035519(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928909(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4378.63', width=5)

width < len (16) in center_string(outstring, ' 9.5862(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044399(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931641(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.95', width=5)

width < len (16) in center_string(outstring, ' 9.5614(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053279(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934372(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4366.58', width=5)

width < len (16) in center_string(outstring, ' 9.5335(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062159(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937103(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4359.52', width=5)

width < len (16) in center_string(outstring, ' 9.5027(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939835(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(3.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.510 sec, System: 0.010 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM50.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM50.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM43.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM43.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '701.51', width=5)

width < len (9) in center_string(outstring, '246153.61', width=6)

width < len (12) in center_string(outstring, '611401682.64', width=8)

width < len (7) in center_string(outstring, '4132.30', width=6)

width < len (7) in center_string(outstring, '4384.88', width=5)

width < len (16) in center_string(outstring, ' 9.6136(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.971(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252353(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4382.43', width=5)

width < len (16) in center_string(outstring, ' 9.6028(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017942(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920532(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4379.19', width=5)

width < len (16) in center_string(outstring, ' 9.5886(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026912(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923279(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4375.22', width=5)

width < len (16) in center_string(outstring, ' 9.5713(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035883(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926041(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4370.53', width=5)

width < len (16) in center_string(outstring, ' 9.5508(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928802(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4365.13', width=5)

width < len (16) in center_string(outstring, ' 9.5272(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053825(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931549(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4359.02', width=5)

width < len (16) in center_string(outstring, ' 9.5005(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062796(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934311(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4352.21', width=5)

width < len (16) in center_string(outstring, ' 9.4709(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071767(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937057(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(9.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM43.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM43.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM20.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM20.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 64 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '515.52', width=5)

width < len (9) in center_string(outstring, '132972.84', width=6)

width < len (12) in center_string(outstring, '577141367.91', width=8)

width < len (7) in center_string(outstring, '3223.80', width=6)

width < len (7) in center_string(outstring, '4368.32', width=5)

width < len (16) in center_string(outstring, ' 9.5411(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.187(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253841(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.22', width=5)

width < len (16) in center_string(outstring, ' 9.5319(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018374(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922043(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4363.32', width=5)

width < len (16) in center_string(outstring, ' 9.5193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027561(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4359.66', width=5)

width < len (16) in center_string(outstring, ' 9.5033(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036748(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927658(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4355.26', width=5)

width < len (16) in center_string(outstring, ' 9.4842(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045935(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930466(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3915.85', width=5)

width < len (16) in center_string(outstring, ' 7.6669(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055122(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933273(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4344.25', width=5)

width < len (16) in center_string(outstring, ' 9.4363(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064309(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3901.85', width=5)

width < len (16) in center_string(outstring, ' 7.6122(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073495(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938904(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.620 sec (User: 0.610 sec, System: 0.010 sec)
  Total time: 0.620 sec

Final candidates in binary format are in 'Sband_DM20.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM20.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM3.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM3.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '582.07', width=5)

width < len (9) in center_string(outstring, '169494.64', width=6)

width < len (12) in center_string(outstring, '575339578.42', width=8)

width < len (7) in center_string(outstring, '1517.59', width=6)

width < len (7) in center_string(outstring, '4359.14', width=5)

width < len (16) in center_string(outstring, ' 9.5011(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254971(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.22', width=5)

width < len (16) in center_string(outstring, ' 9.4927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923172(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4354.51', width=5)

width < len (16) in center_string(outstring, ' 9.4809(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925995(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.05', width=5)

width < len (16) in center_string(outstring, ' 9.4658(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928802(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3919.84', width=5)

width < len (16) in center_string(outstring, ' 7.6826(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931625(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3913.91', width=5)

width < len (16) in center_string(outstring, ' 7.6594(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934433(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4336.20', width=5)

width < len (16) in center_string(outstring, ' 9.4013(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4329.79', width=5)

width < len (16) in center_string(outstring, ' 9.3735(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940079(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM3.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM3.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM39.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM39.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 73 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '609.08', width=5)

width < len (9) in center_string(outstring, '185581.11', width=6)

width < len (12) in center_string(outstring, '581010739.43', width=8)

width < len (7) in center_string(outstring, '3919.35', width=6)

width < len (7) in center_string(outstring, '3954.55', width=5)

width < len (16) in center_string(outstring, ' 7.8192(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.012(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253090(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(17)', width=10)

width < len (7) in center_string(outstring, '4379.93', width=5)

width < len (16) in center_string(outstring, ' 9.5919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018024(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.79', width=5)

width < len (16) in center_string(outstring, ' 9.5781(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027035(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924042(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4372.91', width=5)

width < len (16) in center_string(outstring, ' 9.5612(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036047(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926804(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3934.08', width=5)

width < len (16) in center_string(outstring, ' 7.7385(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045059(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929565(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4362.99', width=5)

width < len (16) in center_string(outstring, ' 9.5179(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054071(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932327(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4356.96', width=5)

width < len (16) in center_string(outstring, ' 9.4915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063083(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935104(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.22', width=5)

width < len (16) in center_string(outstring, ' 9.4622(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072094(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.600 sec (User: 0.590 sec, System: 0.010 sec)
  Total time: 0.590 sec

Final candidates in binary format are in 'Sband_DM39.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM39.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM46.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM46.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '711.60', width=5)

width < len (9) in center_string(outstring, '253279.25', width=6)

width < len (12) in center_string(outstring, '598047415.66', width=8)

width < len (7) in center_string(outstring, '3374.38', width=6)

width < len (7) in center_string(outstring, '4391.48', width=5)

width < len (16) in center_string(outstring, ' 9.6426(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.915(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253689(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3955.73', width=5)

width < len (16) in center_string(outstring, ' 7.8239(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017830(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921860(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4385.51', width=5)

width < len (16) in center_string(outstring, ' 9.6164(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026745(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4381.41', width=5)

width < len (16) in center_string(outstring, ' 9.5984(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035660(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927338(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4376.60', width=5)

width < len (16) in center_string(outstring, ' 9.5773(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044575(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930084(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.08', width=5)

width < len (16) in center_string(outstring, ' 9.5532(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053490(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932831(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4364.85', width=5)

width < len (16) in center_string(outstring, ' 9.5260(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062405(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935562(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4357.94', width=5)

width < len (16) in center_string(outstring, ' 9.4958(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071320(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938309(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.3)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.360 sec (User: 0.350 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM46.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM46.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM18.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM18.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '581.52', width=5)

width < len (9) in center_string(outstring, '169172.38', width=6)

width < len (12) in center_string(outstring, '591894539.86', width=8)

width < len (7) in center_string(outstring, '3608.73', width=6)

width < len (7) in center_string(outstring, '3940.60', width=5)

width < len (16) in center_string(outstring, ' 7.7642(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.207(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252260(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4364.60', width=5)

width < len (16) in center_string(outstring, ' 9.5249(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018414(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920456(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.73', width=5)

width < len (16) in center_string(outstring, ' 9.5123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027621(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923279(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.09', width=5)

width < len (16) in center_string(outstring, ' 9.4965(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036828(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926086(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4353.71', width=5)

width < len (16) in center_string(outstring, ' 9.4774(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046034(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928909(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.59', width=5)

width < len (16) in center_string(outstring, ' 9.4551(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055241(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931717(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.74', width=5)

width < len (16) in center_string(outstring, ' 9.4297(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064448(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934540(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4336.15', width=5)

width < len (16) in center_string(outstring, ' 9.4011(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073655(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937347(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM18.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM18.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM70.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM70.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '990.66', width=5)

width < len (9) in center_string(outstring, '490799.59', width=6)

width < len (12) in center_string(outstring, '602857112.44', width=8)

width < len (7) in center_string(outstring, '3128.67', width=6)

width < len (7) in center_string(outstring, '4410.44', width=5)

width < len (16) in center_string(outstring, ' 9.7260(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.823(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252017(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3972.72', width=5)

width < len (16) in center_string(outstring, ' 7.8913(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017646(25)', width=12)

width < len (15) in center_string(outstring, ' 166.919907(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4403.34', width=5)

width < len (16) in center_string(outstring, ' 9.6947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026469(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922363(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4398.83', width=5)

width < len (16) in center_string(outstring, ' 9.6749(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035291(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924820(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4393.71', width=5)

width < len (16) in center_string(outstring, ' 9.6523(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044114(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4387.98', width=5)

width < len (16) in center_string(outstring, ' 9.6272(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052937(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929718(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4381.64', width=5)

width < len (16) in center_string(outstring, ' 9.5994(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061760(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932159(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4374.72', width=5)

width < len (16) in center_string(outstring, ' 9.5691(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934616(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM70.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM70.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM28.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM28.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '351.81', width=5)

width < len (8) in center_string(outstring, '61968.02', width=6)

width < len (12) in center_string(outstring, '592847739.23', width=8)

width < len (7) in center_string(outstring, '1847.73', width=6)

width < len (7) in center_string(outstring, '3945.18', width=5)

width < len (16) in center_string(outstring, ' 7.7822(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.106(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253929(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4368.11', width=5)

width < len (16) in center_string(outstring, ' 9.5402(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018212(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.15', width=5)

width < len (16) in center_string(outstring, ' 9.5273(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027318(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924911(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.44', width=5)

width < len (16) in center_string(outstring, ' 9.5111(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036424(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927704(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4356.99', width=5)

width < len (16) in center_string(outstring, ' 9.4917(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045530(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4351.82', width=5)

width < len (16) in center_string(outstring, ' 9.4692(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054636(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933273(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.92', width=5)

width < len (16) in center_string(outstring, ' 9.4435(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063742(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936066(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4339.31', width=5)

width < len (16) in center_string(outstring, ' 9.4148(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072848(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938858(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.770 sec (User: 0.760 sec, System: 0.010 sec)
  Total time: 0.770 sec

Final candidates in binary format are in 'Sband_DM28.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM28.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM64.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM64.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '945.58', width=5)

width < len (9) in center_string(outstring, '447155.94', width=6)

width < len (12) in center_string(outstring, '601280754.22', width=8)

width < len (7) in center_string(outstring, '3280.95', width=6)

width < len (7) in center_string(outstring, '4406.07', width=5)

width < len (16) in center_string(outstring, ' 9.7068(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.731(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.82', width=5)

width < len (16) in center_string(outstring, ' 9.6924(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017463(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922958(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4398.80', width=5)

width < len (16) in center_string(outstring, ' 9.6747(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026194(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '3954.85', width=5)

width < len (16) in center_string(outstring, ' 7.8204(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034925(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928360(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4388.67', width=5)

width < len (16) in center_string(outstring, ' 9.6302(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043656(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931046(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4382.58', width=5)

width < len (16) in center_string(outstring, ' 9.6035(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052388(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933746(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.80', width=5)

width < len (16) in center_string(outstring, ' 9.5738(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061119(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936447(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4368.36', width=5)

width < len (16) in center_string(outstring, ' 9.5413(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069850(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939148(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(8.6)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM64.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM64.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM43.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM43.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '699.14', width=5)

width < len (9) in center_string(outstring, '244490.69', width=6)

width < len (12) in center_string(outstring, '611605201.87', width=8)

width < len (7) in center_string(outstring, '4063.52', width=6)

width < len (7) in center_string(outstring, '4385.57', width=5)

width < len (16) in center_string(outstring, ' 9.6166(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.973(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252693(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4383.12', width=5)

width < len (16) in center_string(outstring, ' 9.6059(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017945(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920868(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4379.90', width=5)

width < len (16) in center_string(outstring, ' 9.5918(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026918(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923630(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4375.94', width=5)

width < len (16) in center_string(outstring, ' 9.5744(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035891(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926376(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4371.27', width=5)

width < len (16) in center_string(outstring, ' 9.5540(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044863(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929138(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4365.87', width=5)

width < len (16) in center_string(outstring, ' 9.5304(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053836(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931900(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4359.77', width=5)

width < len (16) in center_string(outstring, ' 9.5038(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062808(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934647(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4352.97', width=5)

width < len (16) in center_string(outstring, ' 9.4742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071781(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937408(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM43.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM43.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM16.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM16.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '623.59', width=5)

width < len (9) in center_string(outstring, '194523.08', width=6)

width < len (12) in center_string(outstring, '591689781.48', width=8)

width < len (7) in center_string(outstring, '3508.67', width=6)

width < len (7) in center_string(outstring, '4367.02', width=5)

width < len (16) in center_string(outstring, ' 9.5354(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254521(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.93', width=5)

width < len (16) in center_string(outstring, ' 9.5263(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922729(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4362.04', width=5)

width < len (16) in center_string(outstring, ' 9.5137(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925537(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.40', width=5)

width < len (16) in center_string(outstring, ' 9.4978(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928360(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4354.00', width=5)

width < len (16) in center_string(outstring, ' 9.4787(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931183(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.86', width=5)

width < len (16) in center_string(outstring, ' 9.4563(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933990(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.65', width=5)

width < len (16) in center_string(outstring, ' 7.6388(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936813(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4336.38', width=5)

width < len (16) in center_string(outstring, ' 9.4021(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939621(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(3.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.440 sec, System: 0.020 sec)
  Total time: 0.450 sec

Final candidates in binary format are in 'Sband_DM16.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM16.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM23.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM23.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 86 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '410.24', width=5)

width < len (8) in center_string(outstring, '84233.85', width=6)

width < len (12) in center_string(outstring, '592440268.35', width=8)

width < len (7) in center_string(outstring, '2293.62', width=6)

width < len (7) in center_string(outstring, '4369.03', width=5)

width < len (16) in center_string(outstring, ' 9.5442(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.142(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254903(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '3938.74', width=5)

width < len (16) in center_string(outstring, ' 7.7569(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018284(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923096(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4363.99', width=5)

width < len (16) in center_string(outstring, ' 9.5222(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027426(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925903(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.33', width=5)

width < len (16) in center_string(outstring, ' 9.5062(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036568(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928696(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.93', width=5)

width < len (16) in center_string(outstring, ' 9.4871(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045711(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931488(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.79', width=5)

width < len (16) in center_string(outstring, ' 9.4647(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934296(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.93', width=5)

width < len (16) in center_string(outstring, ' 9.4392(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063995(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937088(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.35', width=5)

width < len (16) in center_string(outstring, ' 9.4106(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073137(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939896(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(8.6)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.2)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.590 sec (User: 0.570 sec, System: 0.020 sec)
  Total time: 0.580 sec

Final candidates in binary format are in 'Sband_DM23.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM23.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM67.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM67.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '990.14', width=5)

width < len (9) in center_string(outstring, '490288.38', width=6)

width < len (12) in center_string(outstring, '617217817.92', width=8)

width < len (7) in center_string(outstring, '3303.81', width=6)

width < len (7) in center_string(outstring, '4408.64', width=5)

width < len (16) in center_string(outstring, ' 9.7181(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.711(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254521(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4405.27', width=5)

width < len (16) in center_string(outstring, ' 9.7032(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922668(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4401.13', width=5)

width < len (16) in center_string(outstring, ' 9.6850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026133(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925369(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4396.30', width=5)

width < len (16) in center_string(outstring, ' 9.6637(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4390.78', width=5)

width < len (16) in center_string(outstring, ' 9.6395(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930756(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4384.57', width=5)

width < len (16) in center_string(outstring, ' 9.6122(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4377.69', width=5)

width < len (16) in center_string(outstring, ' 9.5821(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060977(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936142(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4370.14', width=5)

width < len (16) in center_string(outstring, ' 9.5491(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069688(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM67.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM67.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM70.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM70.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '993.27', width=5)

width < len (9) in center_string(outstring, '493389.69', width=6)

width < len (12) in center_string(outstring, '602374403.90', width=8)

width < len (7) in center_string(outstring, '3142.07', width=6)

width < len (7) in center_string(outstring, '4410.65', width=5)

width < len (16) in center_string(outstring, ' 9.7269(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.696(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255264(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4407.20', width=5)

width < len (16) in center_string(outstring, ' 9.7117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017392(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923416(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4402.98', width=5)

width < len (16) in center_string(outstring, ' 9.6931(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026087(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926102(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.07', width=5)

width < len (16) in center_string(outstring, ' 9.6715(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034783(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928787(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '3953.57', width=5)

width < len (16) in center_string(outstring, ' 7.8154(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043479(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931473(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(17)', width=10)

width < len (7) in center_string(outstring, '4386.18', width=5)

width < len (16) in center_string(outstring, ' 9.6193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052175(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934174(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.22', width=5)

width < len (16) in center_string(outstring, ' 9.5888(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060871(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936859(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4371.61', width=5)

width < len (16) in center_string(outstring, ' 9.5555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069566(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.8)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM70.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM70.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM0.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM0.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '590.21', width=5)

width < len (9) in center_string(outstring, '174263.11', width=6)

width < len (12) in center_string(outstring, '589905980.80', width=8)

width < len (7) in center_string(outstring, '1448.62', width=6)

width < len (7) in center_string(outstring, '4358.70', width=5)

width < len (16) in center_string(outstring, ' 9.4991(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253305(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.91', width=5)

width < len (16) in center_string(outstring, ' 9.4913(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921509(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4354.33', width=5)

width < len (16) in center_string(outstring, ' 9.4801(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924332(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.00', width=5)

width < len (16) in center_string(outstring, ' 9.4656(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927139(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.92', width=5)

width < len (16) in center_string(outstring, ' 9.4479(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929962(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.10', width=5)

width < len (16) in center_string(outstring, ' 9.4269(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.17', width=5)

width < len (16) in center_string(outstring, ' 7.6369(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935593(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4330.26', width=5)

width < len (16) in center_string(outstring, ' 9.3756(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938400(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.400 sec, System: 0.020 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM0.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM0.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM16.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM16.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '615.59', width=5)

width < len (9) in center_string(outstring, '189568.38', width=6)

width < len (12) in center_string(outstring, '591588455.22', width=8)

width < len (7) in center_string(outstring, '3520.38', width=6)

width < len (7) in center_string(outstring, '4366.76', width=5)

width < len (16) in center_string(outstring, ' 9.5343(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254493(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.63', width=5)

width < len (16) in center_string(outstring, ' 9.5250(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4361.71', width=5)

width < len (16) in center_string(outstring, ' 9.5123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925522(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.03', width=5)

width < len (16) in center_string(outstring, ' 9.4962(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928329(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4353.60', width=5)

width < len (16) in center_string(outstring, ' 9.4769(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.43', width=5)

width < len (16) in center_string(outstring, ' 9.4544(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.28', width=5)

width < len (16) in center_string(outstring, ' 7.6373(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936783(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4335.89', width=5)

width < len (16) in center_string(outstring, ' 9.4000(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939606(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.440 sec (User: 0.430 sec, System: 0.010 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM16.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM16.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM12.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM12.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '650.29', width=5)

width < len (9) in center_string(outstring, '211530.47', width=6)

width < len (12) in center_string(outstring, '605445634.89', width=8)

width < len (7) in center_string(outstring, '2864.71', width=6)

width < len (7) in center_string(outstring, '4362.86', width=5)

width < len (16) in center_string(outstring, ' 9.5173(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253321(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4360.64', width=5)

width < len (16) in center_string(outstring, ' 9.5076(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921524(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4357.62', width=5)

width < len (16) in center_string(outstring, ' 9.4945(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924347(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4353.85', width=5)

width < len (16) in center_string(outstring, ' 9.4780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927155(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4349.33', width=5)

width < len (16) in center_string(outstring, ' 9.4584(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929977(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4344.08', width=5)

width < len (16) in center_string(outstring, ' 9.4355(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055283(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932785(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4338.09', width=5)

width < len (16) in center_string(outstring, ' 9.4095(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064497(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935608(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.37', width=5)

width < len (16) in center_string(outstring, ' 9.3804(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073710(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938431(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM12.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM12.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM14.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM14.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '664.42', width=5)

width < len (9) in center_string(outstring, '220819.22', width=6)

width < len (12) in center_string(outstring, '591029482.19', width=8)

width < len (7) in center_string(outstring, '3385.68', width=6)

width < len (7) in center_string(outstring, '4364.77', width=5)

width < len (16) in center_string(outstring, ' 9.5256(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254589(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.63', width=5)

width < len (16) in center_string(outstring, ' 9.5163(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922791(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4359.70', width=5)

width < len (16) in center_string(outstring, ' 9.5035(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925613(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4356.01', width=5)

width < len (16) in center_string(outstring, ' 9.4874(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928421(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.58', width=5)

width < len (16) in center_string(outstring, ' 9.4681(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4346.40', width=5)

width < len (16) in center_string(outstring, ' 9.4456(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934067(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.14', width=5)

width < len (16) in center_string(outstring, ' 7.6290(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4333.85', width=5)

width < len (16) in center_string(outstring, ' 9.3911(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939697(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.4)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM14.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM14.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM56.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM56.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '822.27', width=5)

width < len (9) in center_string(outstring, '338163.81', width=6)

width < len (12) in center_string(outstring, '616156265.54', width=8)

width < len (7) in center_string(outstring, '3041.38', width=6)

width < len (7) in center_string(outstring, '4403.33', width=5)

width < len (16) in center_string(outstring, ' 9.6947(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.822(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254762(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4400.42', width=5)

width < len (16) in center_string(outstring, ' 9.6819(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922928(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4396.74', width=5)

width < len (16) in center_string(outstring, ' 9.6657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925644(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4392.35', width=5)

width < len (16) in center_string(outstring, ' 9.6464(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035288(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928360(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4387.25', width=5)

width < len (16) in center_string(outstring, ' 9.6240(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931076(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4381.45', width=5)

width < len (16) in center_string(outstring, ' 9.5986(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052932(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933792(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.96', width=5)

width < len (16) in center_string(outstring, ' 9.5701(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061754(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.79', width=5)

width < len (16) in center_string(outstring, ' 9.5388(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070577(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939240(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM56.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM56.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM79.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM79.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1030.21', width=5)

width < len (9) in center_string(outstring, '530763.94', width=6)

width < len (12) in center_string(outstring, '621452839.35', width=8)

width < len (7) in center_string(outstring, '2645.02', width=6)

width < len (7) in center_string(outstring, '4424.41', width=5)

width < len (16) in center_string(outstring, ' 9.7877(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253048(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4420.80', width=5)

width < len (16) in center_string(outstring, ' 9.7718(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920990(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4416.44', width=5)

width < len (16) in center_string(outstring, ' 9.7525(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923553(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4411.40', width=5)

width < len (16) in center_string(outstring, ' 9.7302(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926117(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4405.68', width=5)

width < len (16) in center_string(outstring, ' 9.7050(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928680(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4399.30', width=5)

width < len (16) in center_string(outstring, ' 9.6769(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055282(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4392.26', width=5)

width < len (16) in center_string(outstring, ' 9.6460(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064496(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933792(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4384.57', width=5)

width < len (16) in center_string(outstring, ' 9.6122(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073710(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936356(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM79.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM79.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM40.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM40.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '629.28', width=5)

width < len (9) in center_string(outstring, '198087.17', width=6)

width < len (12) in center_string(outstring, '610903445.59', width=8)

width < len (7) in center_string(outstring, '4037.87', width=6)

width < len (7) in center_string(outstring, '4382.90', width=5)

width < len (16) in center_string(outstring, ' 9.6049(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.004(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253624(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4380.51', width=5)

width < len (16) in center_string(outstring, ' 9.5944(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018008(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921799(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4377.33', width=5)

width < len (16) in center_string(outstring, ' 9.5805(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027012(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4373.42', width=5)

width < len (16) in center_string(outstring, ' 9.5634(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927338(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4368.79', width=5)

width < len (16) in center_string(outstring, ' 9.5432(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045019(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930099(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4363.43', width=5)

width < len (16) in center_string(outstring, ' 9.5198(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054023(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932861(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4357.36', width=5)

width < len (16) in center_string(outstring, ' 9.4933(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063027(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935623(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.59', width=5)

width < len (16) in center_string(outstring, ' 9.4638(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072031(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.7)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(8.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.550 sec, System: 0.010 sec)
  Total time: 0.560 sec

Final candidates in binary format are in 'Sband_DM40.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM40.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM26.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM26.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 86 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '360.99', width=5)

width < len (8) in center_string(outstring, '65241.26', width=6)

width < len (12) in center_string(outstring, '592507877.29', width=8)

width < len (7) in center_string(outstring, '1922.47', width=6)

width < len (7) in center_string(outstring, '4369.26', width=5)

width < len (16) in center_string(outstring, ' 9.5452(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.126(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254196(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4367.14', width=5)

width < len (16) in center_string(outstring, ' 9.5360(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018252(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922394(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '3936.05', width=5)

width < len (16) in center_string(outstring, ' 7.7462(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027378(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925186(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4360.57', width=5)

width < len (16) in center_string(outstring, ' 9.5073(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036504(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927979(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.17', width=5)

width < len (16) in center_string(outstring, ' 9.4881(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045630(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930771(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.04', width=5)

width < len (16) in center_string(outstring, ' 9.4658(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054756(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933578(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.19', width=5)

width < len (16) in center_string(outstring, ' 9.4404(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063882(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936371(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4338.62', width=5)

width < len (16) in center_string(outstring, ' 9.4118(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073008(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939163(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.4(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.520 sec, System: 0.020 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM26.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM26.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM61.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM61.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '891.30', width=5)

width < len (9) in center_string(outstring, '397305.56', width=6)

width < len (12) in center_string(outstring, '599780911.04', width=8)

width < len (7) in center_string(outstring, '3226.50', width=6)

width < len (7) in center_string(outstring, '4399.52', width=5)

width < len (16) in center_string(outstring, ' 9.6779(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.767(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253510(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3962.18', width=5)

width < len (16) in center_string(outstring, ' 7.8494(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017535(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921661(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4392.55', width=5)

width < len (16) in center_string(outstring, ' 9.6473(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026302(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924362(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4387.98', width=5)

width < len (16) in center_string(outstring, ' 9.6272(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927078(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4382.72', width=5)

width < len (16) in center_string(outstring, ' 9.6041(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043837(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929779(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4376.76', width=5)

width < len (16) in center_string(outstring, ' 9.5780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052604(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932480(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4370.13', width=5)

width < len (16) in center_string(outstring, ' 9.5490(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061371(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935196(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4362.83', width=5)

width < len (16) in center_string(outstring, ' 9.5171(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070138(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937897(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM61.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM61.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM77.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM77.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1038.77', width=5)

width < len (9) in center_string(outstring, '539624.44', width=6)

width < len (12) in center_string(outstring, '604767284.30', width=8)

width < len (7) in center_string(outstring, '2817.42', width=6)

width < len (7) in center_string(outstring, '4420.98', width=5)

width < len (16) in center_string(outstring, ' 9.7726(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254149(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3980.26', width=5)

width < len (16) in center_string(outstring, ' 7.9212(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922348(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4412.41', width=5)

width < len (16) in center_string(outstring, ' 9.7347(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925171(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4406.93', width=5)

width < len (16) in center_string(outstring, ' 9.7105(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927979(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4400.68', width=5)

width < len (16) in center_string(outstring, ' 9.6830(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930801(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4393.68', width=5)

width < len (16) in center_string(outstring, ' 9.6522(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933609(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4385.94', width=5)

width < len (16) in center_string(outstring, ' 9.6182(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936432(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4377.47', width=5)

width < len (16) in center_string(outstring, ' 9.5811(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939255(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM77.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM77.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM30.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM30.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 91 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   3%
Amount of optimization complete =   7%
Amount of optimization complete =  11%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  40%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  51%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  72%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  83%
Amount of optimization complete =  87%
Amount of optimization complete =  92%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '354.31', width=5)

width < len (8) in center_string(outstring, '62851.81', width=6)

width < len (12) in center_string(outstring, '578631745.13', width=8)

width < len (7) in center_string(outstring, '1882.68', width=6)

width < len (7) in center_string(outstring, '3946.28', width=5)

width < len (16) in center_string(outstring, ' 7.7866(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.094(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254678(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4370.24', width=5)

width < len (16) in center_string(outstring, ' 9.5495(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018188(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922867(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4367.27', width=5)

width < len (16) in center_string(outstring, ' 9.5365(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027282(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3932.30', width=5)

width < len (16) in center_string(outstring, ' 7.7315(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036376(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928436(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4359.11', width=5)

width < len (16) in center_string(outstring, ' 9.5009(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045470(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931229(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.93', width=5)

width < len (16) in center_string(outstring, ' 9.4784(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054564(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4348.03', width=5)

width < len (16) in center_string(outstring, ' 9.4527(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063658(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936798(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4341.42', width=5)

width < len (16) in center_string(outstring, ' 9.4240(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072752(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939590(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.1)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.0)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(7.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.760 sec (User: 0.750 sec, System: 0.010 sec)
  Total time: 0.760 sec

Final candidates in binary format are in 'Sband_DM30.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM30.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM22.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM22.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 74 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '438.20', width=5)

width < len (8) in center_string(outstring, '96096.75', width=6)

width < len (12) in center_string(outstring, '591802725.46', width=8)

width < len (7) in center_string(outstring, '2529.97', width=6)

width < len (7) in center_string(outstring, '4366.86', width=5)

width < len (16) in center_string(outstring, ' 9.5347(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.150(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.78', width=5)

width < len (16) in center_string(outstring, ' 9.5257(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018301(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923233(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4361.91', width=5)

width < len (16) in center_string(outstring, ' 9.5131(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027451(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926025(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3927.70', width=5)

width < len (16) in center_string(outstring, ' 7.7134(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036601(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928833(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4353.94', width=5)

width < len (16) in center_string(outstring, ' 9.4784(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045751(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931625(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.85', width=5)

width < len (16) in center_string(outstring, ' 9.4562(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054902(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934433(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.03', width=5)

width < len (16) in center_string(outstring, ' 9.4310(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064052(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937225(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4336.49', width=5)

width < len (16) in center_string(outstring, ' 9.4026(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073202(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940033(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(7.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(7.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.3)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.530 sec, System: 0.010 sec)
  Total time: 0.540 sec

Final candidates in binary format are in 'Sband_DM22.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM22.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM65.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM65.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '958.83', width=5)

width < len (9) in center_string(outstring, '459776.41', width=6)

width < len (12) in center_string(outstring, '586212785.76', width=8)

width < len (7) in center_string(outstring, '3278.70', width=6)

width < len (7) in center_string(outstring, '4407.07', width=5)

width < len (16) in center_string(outstring, ' 9.7111(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.737(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253764(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.82', width=5)

width < len (16) in center_string(outstring, ' 9.6968(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017474(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4399.80', width=5)

width < len (16) in center_string(outstring, ' 9.6791(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026211(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4395.08', width=5)

width < len (16) in center_string(outstring, ' 9.6584(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034948(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4389.67', width=5)

width < len (16) in center_string(outstring, ' 9.6346(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043685(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930008(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4383.58', width=5)

width < len (16) in center_string(outstring, ' 9.6079(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932709(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3934.89', width=5)

width < len (16) in center_string(outstring, ' 7.7417(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061159(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935410(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '3926.77', width=5)

width < len (16) in center_string(outstring, ' 7.7098(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069896(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938095(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM65.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM65.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM62.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM62.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '898.49', width=5)

width < len (9) in center_string(outstring, '403741.16', width=6)

width < len (12) in center_string(outstring, '620487394.97', width=8)

width < len (7) in center_string(outstring, '3203.98', width=6)

width < len (7) in center_string(outstring, '4406.43', width=5)

width < len (16) in center_string(outstring, ' 9.7083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00014641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916656(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4405.73', width=5)

width < len (16) in center_string(outstring, ' 9.7052(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029281(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915863(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4404.95', width=5)

width < len (16) in center_string(outstring, ' 9.7018(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043922(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915085(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4404.09', width=5)

width < len (16) in center_string(outstring, ' 9.6980(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4403.15', width=5)

width < len (16) in center_string(outstring, ' 9.6939(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073203(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913498(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4402.15', width=5)

width < len (16) in center_string(outstring, ' 9.6895(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00087843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912704(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4401.06', width=5)

width < len (16) in center_string(outstring, ' 9.6847(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00102484(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4399.90', width=5)

width < len (16) in center_string(outstring, ' 9.6796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00117124(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911133(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(9.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM62.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM62.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM13.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM13.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '659.04', width=5)

width < len (9) in center_string(outstring, '217260.56', width=6)

width < len (12) in center_string(outstring, '591033783.47', width=8)

width < len (7) in center_string(outstring, '3284.11', width=6)

width < len (7) in center_string(outstring, '4364.71', width=5)

width < len (16) in center_string(outstring, ' 9.5254(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253218(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.55', width=5)

width < len (16) in center_string(outstring, ' 9.5159(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921417(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4359.59', width=5)

width < len (16) in center_string(outstring, ' 9.5030(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924240(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4355.88', width=5)

width < len (16) in center_string(outstring, ' 9.4869(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927048(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.42', width=5)

width < len (16) in center_string(outstring, ' 9.4675(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929871(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3913.12', width=5)

width < len (16) in center_string(outstring, ' 7.6563(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932678(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4340.29', width=5)

width < len (16) in center_string(outstring, ' 9.4191(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935501(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4333.63', width=5)

width < len (16) in center_string(outstring, ' 9.3902(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938324(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.500 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM13.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM13.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM32.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM32.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 85 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '376.38', width=5)

width < len (8) in center_string(outstring, '70916.12', width=6)

width < len (12) in center_string(outstring, '593355472.50', width=8)

width < len (7) in center_string(outstring, '2045.83', width=6)

width < len (7) in center_string(outstring, '4372.52', width=5)

width < len (16) in center_string(outstring, ' 9.5595(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.063(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256025(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '3943.02', width=5)

width < len (16) in center_string(outstring, ' 7.7737(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018127(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924210(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(17)', width=10)

width < len (7) in center_string(outstring, '4367.29', width=5)

width < len (16) in center_string(outstring, ' 9.5366(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027190(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926987(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.55', width=5)

width < len (16) in center_string(outstring, ' 9.5203(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036253(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929764(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.08', width=5)

width < len (16) in center_string(outstring, ' 9.5008(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045317(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932541(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.88', width=5)

width < len (16) in center_string(outstring, ' 9.4781(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054380(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935333(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4347.97', width=5)

width < len (16) in center_string(outstring, ' 9.4524(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063443(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938110(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4341.35', width=5)

width < len (16) in center_string(outstring, ' 9.4237(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072506(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940887(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.4(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.680 sec (User: 0.670 sec, System: 0.010 sec)
  Total time: 0.680 sec

Final candidates in binary format are in 'Sband_DM32.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM32.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM55.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM55.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '815.93', width=5)

width < len (9) in center_string(outstring, '332970.75', width=6)

width < len (12) in center_string(outstring, '615944496.29', width=8)

width < len (7) in center_string(outstring, '3088.32', width=6)

width < len (7) in center_string(outstring, '4402.45', width=5)

width < len (16) in center_string(outstring, ' 9.6908(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.844(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252824(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4399.59', width=5)

width < len (16) in center_string(outstring, ' 9.6782(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017689(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920990(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.95', width=5)

width < len (16) in center_string(outstring, ' 9.6622(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026533(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923706(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4391.59', width=5)

width < len (16) in center_string(outstring, ' 9.6430(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035378(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926437(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.52', width=5)

width < len (16) in center_string(outstring, ' 9.6208(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044222(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4380.75', width=5)

width < len (16) in center_string(outstring, ' 9.5955(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931885(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.29', width=5)

width < len (16) in center_string(outstring, ' 9.5672(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061911(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934601(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.14', width=5)

width < len (16) in center_string(outstring, ' 9.5360(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070756(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937332(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790573(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.5)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM55.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM55.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM41.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM41.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '682.83', width=5)

width < len (9) in center_string(outstring, '233220.19', width=6)

width < len (12) in center_string(outstring, '566693996.74', width=8)

width < len (7) in center_string(outstring, '4309.41', width=6)

width < len (7) in center_string(outstring, '3956.06', width=5)

width < len (16) in center_string(outstring, ' 7.8252(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.984(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252888(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(17)', width=10)

width < len (7) in center_string(outstring, '4381.84', width=5)

width < len (16) in center_string(outstring, ' 9.6003(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017968(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921066(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4378.61', width=5)

width < len (16) in center_string(outstring, ' 9.5861(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026952(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3941.30', width=5)

width < len (16) in center_string(outstring, ' 7.7669(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035936(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926590(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4369.98', width=5)

width < len (16) in center_string(outstring, ' 9.5484(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044920(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929337(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.58', width=5)

width < len (16) in center_string(outstring, ' 9.5248(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053904(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932098(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '3921.77', width=5)

width < len (16) in center_string(outstring, ' 7.6901(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062888(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934860(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4351.67', width=5)

width < len (16) in center_string(outstring, ' 9.4685(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071872(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(8.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM41.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM41.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM24.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM24.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '393.10', width=5)

width < len (8) in center_string(outstring, '77349.99', width=6)

width < len (12) in center_string(outstring, '592312775.02', width=8)

width < len (7) in center_string(outstring, '2161.38', width=6)

width < len (7) in center_string(outstring, '3942.03', width=5)

width < len (16) in center_string(outstring, ' 7.7698(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.129(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254700(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(17)', width=10)

width < len (7) in center_string(outstring, '4366.21', width=5)

width < len (16) in center_string(outstring, ' 9.5319(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922897(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.30', width=5)

width < len (16) in center_string(outstring, ' 9.5192(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027387(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4359.63', width=5)

width < len (16) in center_string(outstring, ' 9.5032(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928482(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.23', width=5)

width < len (16) in center_string(outstring, ' 9.4840(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931290(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.09', width=5)

width < len (16) in center_string(outstring, ' 9.4617(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054774(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934082(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4344.23', width=5)

width < len (16) in center_string(outstring, ' 9.4362(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063903(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4337.66', width=5)

width < len (16) in center_string(outstring, ' 9.4076(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073032(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939682(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(9.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.2(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.550 sec (User: 0.540 sec, System: 0.010 sec)
  Total time: 0.540 sec

Final candidates in binary format are in 'Sband_DM24.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM24.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM47.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM47.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '707.48', width=5)

width < len (9) in center_string(outstring, '250357.91', width=6)

width < len (12) in center_string(outstring, '598427693.88', width=8)

width < len (7) in center_string(outstring, '3213.69', width=6)

width < len (7) in center_string(outstring, '4392.30', width=5)

width < len (16) in center_string(outstring, ' 9.6461(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252563(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.81', width=5)

width < len (16) in center_string(outstring, ' 9.6352(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920517(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3952.03', width=5)

width < len (16) in center_string(outstring, ' 7.8093(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923080(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4382.72', width=5)

width < len (16) in center_string(outstring, ' 9.6041(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925644(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4378.16', width=5)

width < len (16) in center_string(outstring, ' 9.5842(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928207(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4372.94', width=5)

width < len (16) in center_string(outstring, ' 9.5613(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930756(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4367.07', width=5)

width < len (16) in center_string(outstring, ' 9.5357(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4360.55', width=5)

width < len (16) in center_string(outstring, ' 9.5072(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM47.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM47.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM55.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM55.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '817.23', width=5)

width < len (9) in center_string(outstring, '334026.62', width=6)

width < len (12) in center_string(outstring, '600941068.44', width=8)

width < len (7) in center_string(outstring, '3066.42', width=6)

width < len (7) in center_string(outstring, '4403.17', width=5)

width < len (16) in center_string(outstring, ' 9.6940(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.837(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4400.31', width=5)

width < len (16) in center_string(outstring, ' 9.6813(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017673(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923843(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3960.79', width=5)

width < len (16) in center_string(outstring, ' 7.8439(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026510(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926559(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4392.31', width=5)

width < len (16) in center_string(outstring, ' 9.6462(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035347(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4387.24', width=5)

width < len (16) in center_string(outstring, ' 9.6240(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044183(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932007(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4381.47', width=5)

width < len (16) in center_string(outstring, ' 9.5987(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053020(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934738(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.01', width=5)

width < len (16) in center_string(outstring, ' 9.5704(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061857(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937454(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4367.87', width=5)

width < len (16) in center_string(outstring, ' 9.5391(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940186(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM55.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM55.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM41.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM41.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '673.76', width=5)

width < len (9) in center_string(outstring, '227072.73', width=6)

width < len (12) in center_string(outstring, '595928495.06', width=8)

width < len (7) in center_string(outstring, '4283.90', width=6)

width < len (7) in center_string(outstring, '4383.86', width=5)

width < len (16) in center_string(outstring, ' 9.6091(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.992(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253336(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.45', width=5)

width < len (16) in center_string(outstring, ' 9.5985(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017984(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921509(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.25', width=5)

width < len (16) in center_string(outstring, ' 9.5845(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026976(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924271(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.31', width=5)

width < len (16) in center_string(outstring, ' 9.5673(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035968(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927032(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.66', width=5)

width < len (16) in center_string(outstring, ' 9.5470(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044960(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929794(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.28', width=5)

width < len (16) in center_string(outstring, ' 9.5235(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053952(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932556(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4358.20', width=5)

width < len (16) in center_string(outstring, ' 9.4969(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062944(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3913.27', width=5)

width < len (16) in center_string(outstring, ' 7.6568(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071936(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938080(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.390 sec, System: 0.020 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM41.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM41.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM28.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM28.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 91 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '350.02', width=5)

width < len (8) in center_string(outstring, '61340.37', width=6)

width < len (12) in center_string(outstring, '592798894.29', width=8)

width < len (7) in center_string(outstring, '1852.99', width=6)

width < len (7) in center_string(outstring, '4370.34', width=5)

width < len (16) in center_string(outstring, ' 9.5500(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.099(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252975(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3941.35', width=5)

width < len (16) in center_string(outstring, ' 7.7671(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018198(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921173(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4365.19', width=5)

width < len (16) in center_string(outstring, ' 9.5274(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027297(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923950(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4361.47', width=5)

width < len (16) in center_string(outstring, ' 9.5112(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036396(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.02', width=5)

width < len (16) in center_string(outstring, ' 9.4918(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.84', width=5)

width < len (16) in center_string(outstring, ' 9.4693(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054594(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932312(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.95', width=5)

width < len (16) in center_string(outstring, ' 9.4436(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935104(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4339.34', width=5)

width < len (16) in center_string(outstring, ' 9.4149(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072792(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937897(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.650 sec (User: 0.630 sec, System: 0.020 sec)
  Total time: 0.640 sec

Final candidates in binary format are in 'Sband_DM28.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM28.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM10.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM10.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '636.62', width=5)

width < len (9) in center_string(outstring, '202735.55', width=6)

width < len (12) in center_string(outstring, '590147035.61', width=8)

width < len (7) in center_string(outstring, '2438.24', width=6)

width < len (7) in center_string(outstring, '4360.31', width=5)

width < len (16) in center_string(outstring, ' 9.5061(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.043(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251324(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4358.26', width=5)

width < len (16) in center_string(outstring, ' 9.4972(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018087(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919510(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4355.44', width=5)

width < len (16) in center_string(outstring, ' 9.4849(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027130(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922287(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.90', width=5)

width < len (16) in center_string(outstring, ' 9.4695(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036174(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925064(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3919.38', width=5)

width < len (16) in center_string(outstring, ' 7.6808(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045217(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927841(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(18)', width=10)

width < len (7) in center_string(outstring, '4342.64', width=5)

width < len (16) in center_string(outstring, ' 9.4293(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054261(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4336.94', width=5)

width < len (16) in center_string(outstring, ' 9.4045(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063304(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933395(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789505(16)', width=10)

width < len (7) in center_string(outstring, '4330.54', width=5)

width < len (16) in center_string(outstring, ' 9.3768(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072347(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936172(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.490 sec, System: 0.020 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM10.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM10.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM53.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM53.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '787.59', width=5)

width < len (9) in center_string(outstring, '310242.00', width=6)

width < len (12) in center_string(outstring, '600134589.86', width=8)

width < len (7) in center_string(outstring, '3055.89', width=6)

width < len (7) in center_string(outstring, '4400.21', width=5)

width < len (16) in center_string(outstring, ' 9.6809(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.860(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255450(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4397.43', width=5)

width < len (16) in center_string(outstring, ' 9.6687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017721(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4393.88', width=5)

width < len (16) in center_string(outstring, ' 9.6531(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026581(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4389.60', width=5)

width < len (16) in center_string(outstring, ' 9.6343(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929077(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3946.85', width=5)

width < len (16) in center_string(outstring, ' 7.7888(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044302(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931793(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4378.92', width=5)

width < len (16) in center_string(outstring, ' 9.5875(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053163(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934525(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4372.54', width=5)

width < len (16) in center_string(outstring, ' 9.5595(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062023(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4365.46', width=5)

width < len (16) in center_string(outstring, ' 9.5286(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070883(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939987(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM53.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM53.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM10.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM10.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '642.62', width=5)

width < len (9) in center_string(outstring, '206570.73', width=6)

width < len (12) in center_string(outstring, '589973865.72', width=8)

width < len (7) in center_string(outstring, '2542.50', width=6)

width < len (7) in center_string(outstring, '4360.38', width=5)

width < len (16) in center_string(outstring, ' 9.5065(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254063(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.24', width=5)

width < len (16) in center_string(outstring, ' 9.4972(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922272(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4355.31', width=5)

width < len (16) in center_string(outstring, ' 9.4844(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925079(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4351.63', width=5)

width < len (16) in center_string(outstring, ' 9.4684(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927902(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.20', width=5)

width < len (16) in center_string(outstring, ' 9.4491(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930710(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3911.94', width=5)

width < len (16) in center_string(outstring, ' 7.6517(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933533(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4336.13', width=5)

width < len (16) in center_string(outstring, ' 9.4010(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936340(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4329.51', width=5)

width < len (16) in center_string(outstring, ' 9.3723(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939163(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.410 sec, System: 0.020 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM10.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM10.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM73.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM73.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1002.31', width=5)

width < len (9) in center_string(outstring, '502412.53', width=6)

width < len (12) in center_string(outstring, '603305759.52', width=8)

width < len (7) in center_string(outstring, '2940.81', width=6)

width < len (7) in center_string(outstring, '4413.25', width=5)

width < len (16) in center_string(outstring, ' 9.7384(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252851(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4409.89', width=5)

width < len (16) in center_string(outstring, ' 9.7236(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920792(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4405.78', width=5)

width < len (16) in center_string(outstring, ' 9.7055(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923355(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '3964.54', width=5)

width < len (16) in center_string(outstring, ' 7.8588(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925919(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(17)', width=10)

width < len (7) in center_string(outstring, '4395.54', width=5)

width < len (16) in center_string(outstring, ' 9.6604(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928482(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4389.42', width=5)

width < len (16) in center_string(outstring, ' 9.6335(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055283(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931046(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4382.65', width=5)

width < len (16) in center_string(outstring, ' 9.6038(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064497(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933609(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4375.23', width=5)

width < len (16) in center_string(outstring, ' 9.5713(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073711(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936157(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(9.2)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.360 sec (User: 0.350 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM73.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM73.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM1.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM1.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 56 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '583.25', width=5)

width < len (9) in center_string(outstring, '170181.86', width=6)

width < len (12) in center_string(outstring, '589885307.30', width=8)

width < len (7) in center_string(outstring, '1461.53', width=6)

width < len (7) in center_string(outstring, '4358.77', width=5)

width < len (16) in center_string(outstring, ' 9.4994(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255011(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.95', width=5)

width < len (16) in center_string(outstring, ' 9.4915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923218(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.33', width=5)

width < len (16) in center_string(outstring, ' 9.4801(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926025(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.97', width=5)

width < len (16) in center_string(outstring, ' 9.4655(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928848(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.86', width=5)

width < len (16) in center_string(outstring, ' 9.4476(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931656(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.00', width=5)

width < len (16) in center_string(outstring, ' 9.4265(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055263(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934479(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.80', width=5)

width < len (16) in center_string(outstring, ' 7.6355(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064474(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937286(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4330.10', width=5)

width < len (16) in center_string(outstring, ' 9.3749(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073684(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940109(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(9.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(8.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM1.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM1.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM38.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM38.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '536.09', width=5)

width < len (9) in center_string(outstring, '143786.84', width=6)

width < len (12) in center_string(outstring, '595751616.35', width=8)

width < len (7) in center_string(outstring, '3387.80', width=6)

width < len (7) in center_string(outstring, '4382.49', width=5)

width < len (16) in center_string(outstring, ' 9.6031(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.017(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255268(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4380.11', width=5)

width < len (16) in center_string(outstring, ' 9.5927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018035(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923447(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3943.72', width=5)

width < len (16) in center_string(outstring, ' 7.7765(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027052(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926224(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4373.05', width=5)

width < len (16) in center_string(outstring, ' 9.5618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928986(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4368.43', width=5)

width < len (16) in center_string(outstring, ' 9.5416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045087(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931747(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4363.08', width=5)

width < len (16) in center_string(outstring, ' 9.5182(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054104(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934525(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4357.02', width=5)

width < len (16) in center_string(outstring, ' 9.4918(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063121(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937286(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4350.25', width=5)

width < len (16) in center_string(outstring, ' 9.4624(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072138(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940048(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.650 sec (User: 0.630 sec, System: 0.020 sec)
  Total time: 0.640 sec

Final candidates in binary format are in 'Sband_DM38.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM38.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM58.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM58.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '864.25', width=5)

width < len (9) in center_string(outstring, '373563.91', width=6)

width < len (12) in center_string(outstring, '603765291.75', width=8)

width < len (7) in center_string(outstring, '3211.67', width=6)

width < len (7) in center_string(outstring, '4398.22', width=5)

width < len (16) in center_string(outstring, ' 9.6722(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00016590(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916168(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4398.07', width=5)

width < len (16) in center_string(outstring, ' 9.6715(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00033179(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (7) in center_string(outstring, '4397.91', width=5)

width < len (16) in center_string(outstring, ' 9.6708(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00049769(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912445(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4397.74', width=5)

width < len (16) in center_string(outstring, ' 9.6701(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00066359(23)', width=12)

width < len (15) in center_string(outstring, ' 166.910583(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4397.55', width=5)

width < len (16) in center_string(outstring, ' 9.6692(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00082948(23)', width=12)

width < len (15) in center_string(outstring, ' 166.908737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3966.01', width=5)

width < len (16) in center_string(outstring, ' 7.8646(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00099538(26)', width=12)

width < len (15) in center_string(outstring, ' 166.906876(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(17)', width=10)

width < len (7) in center_string(outstring, '4397.13', width=5)

width < len (16) in center_string(outstring, ' 9.6674(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00116128(23)', width=12)

width < len (15) in center_string(outstring, ' 166.905014(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4396.90', width=5)

width < len (16) in center_string(outstring, ' 9.6664(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00132717(23)', width=12)

width < len (15) in center_string(outstring, ' 166.903152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.500 sec, System: 0.020 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM58.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM58.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM48.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM48.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '712.36', width=5)

width < len (9) in center_string(outstring, '253820.67', width=6)

width < len (12) in center_string(outstring, '583636954.14', width=8)

width < len (7) in center_string(outstring, '3077.81', width=6)

width < len (7) in center_string(outstring, '4394.38', width=5)

width < len (16) in center_string(outstring, ' 9.6553(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.908(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254373(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3957.71', width=5)

width < len (16) in center_string(outstring, ' 7.8317(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017815(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922546(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.40', width=5)

width < len (16) in center_string(outstring, ' 9.6291(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925278(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.30', width=5)

width < len (16) in center_string(outstring, ' 9.6111(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035630(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928024(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4379.48', width=5)

width < len (16) in center_string(outstring, ' 9.5899(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044538(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930771(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4373.95', width=5)

width < len (16) in center_string(outstring, ' 9.5657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053445(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933502(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4367.72', width=5)

width < len (16) in center_string(outstring, ' 9.5385(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062353(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936249(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3919.43', width=5)

width < len (16) in center_string(outstring, ' 7.6810(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071261(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938980(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.5(5.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM48.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM48.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM78.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM78.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1035.21', width=5)

width < len (9) in center_string(outstring, '535930.12', width=6)

width < len (12) in center_string(outstring, '605251725.17', width=8)

width < len (7) in center_string(outstring, '2755.80', width=6)

width < len (7) in center_string(outstring, '4422.86', width=5)

width < len (16) in center_string(outstring, ' 9.7809(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254091(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '3981.60', width=5)

width < len (16) in center_string(outstring, ' 7.9266(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922287(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4414.25', width=5)

width < len (16) in center_string(outstring, ' 9.7428(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4408.74', width=5)

width < len (16) in center_string(outstring, ' 9.7185(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4402.48', width=5)

width < len (16) in center_string(outstring, ' 9.6909(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930740(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '4395.46', width=5)

width < len (16) in center_string(outstring, ' 9.6600(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933563(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4387.69', width=5)

width < len (16) in center_string(outstring, ' 9.6259(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936371(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4379.20', width=5)

width < len (16) in center_string(outstring, ' 9.5887(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939194(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.280 sec, System: 0.010 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM78.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM78.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM20.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM20.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 64 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '511.59', width=5)

width < len (9) in center_string(outstring, '130950.66', width=6)

width < len (12) in center_string(outstring, '606933037.08', width=8)

width < len (7) in center_string(outstring, '3171.48', width=6)

width < len (7) in center_string(outstring, '4367.81', width=5)

width < len (16) in center_string(outstring, ' 9.5389(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.175(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254328(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4365.70', width=5)

width < len (16) in center_string(outstring, ' 9.5297(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018350(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4362.79', width=5)

width < len (16) in center_string(outstring, ' 9.5170(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027525(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925339(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4359.13', width=5)

width < len (16) in center_string(outstring, ' 9.5010(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036700(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4354.73', width=5)

width < len (16) in center_string(outstring, ' 9.4818(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045875(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930954(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4349.58', width=5)

width < len (16) in center_string(outstring, ' 9.4594(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055050(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933762(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.71', width=5)

width < len (16) in center_string(outstring, ' 9.4339(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064226(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936569(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4337.11', width=5)

width < len (16) in center_string(outstring, ' 9.4053(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073401(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939377(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.590 sec (User: 0.560 sec, System: 0.030 sec)
  Total time: 0.590 sec

Final candidates in binary format are in 'Sband_DM20.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM20.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM55.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM55.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '816.46', width=5)

width < len (9) in center_string(outstring, '333399.91', width=6)

width < len (12) in center_string(outstring, '600553557.48', width=8)

width < len (7) in center_string(outstring, '3088.13', width=6)

width < len (7) in center_string(outstring, '4401.90', width=5)

width < len (16) in center_string(outstring, ' 9.6884(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.837(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253695(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4399.02', width=5)

width < len (16) in center_string(outstring, ' 9.6757(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017673(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921860(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3958.85', width=5)

width < len (16) in center_string(outstring, ' 7.8362(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026510(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4391.00', width=5)

width < len (16) in center_string(outstring, ' 9.6404(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035347(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.92', width=5)

width < len (16) in center_string(outstring, ' 9.6181(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044183(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930023(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4380.14', width=5)

width < len (16) in center_string(outstring, ' 9.5928(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053020(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.66', width=5)

width < len (16) in center_string(outstring, ' 9.5645(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061857(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935471(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4366.51', width=5)

width < len (16) in center_string(outstring, ' 9.5332(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938202(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.490 sec, System: 0.020 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM55.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM55.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM49.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM49.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 58 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '735.22', width=5)

width < len (9) in center_string(outstring, '270367.00', width=6)

width < len (12) in center_string(outstring, '598575045.72', width=8)

width < len (7) in center_string(outstring, '3052.39', width=6)

width < len (7) in center_string(outstring, '4393.06', width=5)

width < len (16) in center_string(outstring, ' 9.6495(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253349(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4390.52', width=5)

width < len (16) in center_string(outstring, ' 9.6383(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921295(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3952.61', width=5)

width < len (16) in center_string(outstring, ' 7.8116(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923859(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4383.29', width=5)

width < len (16) in center_string(outstring, ' 9.6066(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926422(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4378.67', width=5)

width < len (16) in center_string(outstring, ' 9.5864(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928986(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4373.39', width=5)

width < len (16) in center_string(outstring, ' 9.5633(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931549(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4367.45', width=5)

width < len (16) in center_string(outstring, ' 9.5373(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934113(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789505(16)', width=10)

width < len (7) in center_string(outstring, '4360.87', width=5)

width < len (16) in center_string(outstring, ' 9.5086(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.600 sec (User: 0.590 sec, System: 0.010 sec)
  Total time: 0.590 sec

Final candidates in binary format are in 'Sband_DM49.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM49.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM17.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM17.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 75 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '616.16', width=5)

width < len (9) in center_string(outstring, '189917.22', width=6)

width < len (12) in center_string(outstring, '576738396.10', width=8)

width < len (7) in center_string(outstring, '3629.98', width=6)

width < len (7) in center_string(outstring, '4366.17', width=5)

width < len (16) in center_string(outstring, ' 9.5317(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254185(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.02', width=5)

width < len (16) in center_string(outstring, ' 9.5224(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922394(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.08', width=5)

width < len (16) in center_string(outstring, ' 9.5095(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925201(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3926.31', width=5)

width < len (16) in center_string(outstring, ' 7.7080(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928024(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(18)', width=10)

width < len (7) in center_string(outstring, '3920.63', width=5)

width < len (16) in center_string(outstring, ' 7.6857(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930832(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4347.72', width=5)

width < len (16) in center_string(outstring, ' 9.4513(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933655(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.79', width=5)

width < len (16) in center_string(outstring, ' 9.4256(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936478(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.13', width=5)

width < len (16) in center_string(outstring, ' 9.3967(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939285(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(5.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM17.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM17.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM30.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM30.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 93 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  12%
Amount of optimization complete =  16%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  29%
Amount of optimization complete =  33%
Amount of optimization complete =  37%
Amount of optimization complete =  41%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  58%
Amount of optimization complete =  62%
Amount of optimization complete =  66%
Amount of optimization complete =  70%
Amount of optimization complete =  75%
Amount of optimization complete =  79%
Amount of optimization complete =  83%
Amount of optimization complete =  87%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '356.48', width=5)

width < len (8) in center_string(outstring, '63622.61', width=6)

width < len (12) in center_string(outstring, '593183574.67', width=8)

width < len (7) in center_string(outstring, '1907.37', width=6)

width < len (7) in center_string(outstring, '4371.93', width=5)

width < len (16) in center_string(outstring, ' 9.5569(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.099(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255493(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3941.42', width=5)

width < len (16) in center_string(outstring, ' 7.7674(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018198(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923691(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(17)', width=10)

width < len (7) in center_string(outstring, '4366.77', width=5)

width < len (16) in center_string(outstring, ' 9.5344(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027297(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926468(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.06', width=5)

width < len (16) in center_string(outstring, ' 9.5182(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036396(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929260(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.61', width=5)

width < len (16) in center_string(outstring, ' 9.4988(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932053(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.43', width=5)

width < len (16) in center_string(outstring, ' 9.4762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054594(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934830(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4347.53', width=5)

width < len (16) in center_string(outstring, ' 9.4505(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.92', width=5)

width < len (16) in center_string(outstring, ' 9.4218(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072792(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940414(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(5.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.3)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.650 sec (User: 0.640 sec, System: 0.010 sec)
  Total time: 0.640 sec

Final candidates in binary format are in 'Sband_DM30.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM30.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM60.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM60.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '889.98', width=5)

width < len (9) in center_string(outstring, '396132.56', width=6)

width < len (12) in center_string(outstring, '584274256.57', width=8)

width < len (7) in center_string(outstring, '3282.02', width=6)

width < len (7) in center_string(outstring, '4398.45', width=5)

width < len (16) in center_string(outstring, ' 9.6732(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256075(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4395.46', width=5)

width < len (16) in center_string(outstring, ' 9.6600(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924026(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4391.73', width=5)

width < len (16) in center_string(outstring, ' 9.6436(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926590(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4387.32', width=5)

width < len (16) in center_string(outstring, ' 9.6243(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929138(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4382.25', width=5)

width < len (16) in center_string(outstring, ' 9.6021(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931702(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3936.84', width=5)

width < len (16) in center_string(outstring, ' 7.7494(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934265(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(17)', width=10)

width < len (7) in center_string(outstring, '4370.13', width=5)

width < len (16) in center_string(outstring, ' 9.5490(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936829(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3921.85', width=5)

width < len (16) in center_string(outstring, ' 7.6905(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939377(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM60.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM60.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM69.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM69.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '984.55', width=5)

width < len (9) in center_string(outstring, '484767.84', width=6)

width < len (12) in center_string(outstring, '617416835.50', width=8)

width < len (7) in center_string(outstring, '3156.74', width=6)

width < len (7) in center_string(outstring, '4409.28', width=5)

width < len (16) in center_string(outstring, ' 9.7209(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.683(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255665(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4405.92', width=5)

width < len (16) in center_string(outstring, ' 9.7061(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017366(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923813(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4401.80', width=5)

width < len (16) in center_string(outstring, ' 9.6879(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026049(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926498(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4396.99', width=5)

width < len (16) in center_string(outstring, ' 9.6668(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034731(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929184(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4391.49', width=5)

width < len (16) in center_string(outstring, ' 9.6426(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043414(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931870(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4385.31', width=5)

width < len (16) in center_string(outstring, ' 9.6155(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052097(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934555(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4378.46', width=5)

width < len (16) in center_string(outstring, ' 9.5855(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060780(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937241(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4370.95', width=5)

width < len (16) in center_string(outstring, ' 9.5526(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069463(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.530 sec, System: 0.010 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM69.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM69.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM28.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM28.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 89 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '350.68', width=5)

width < len (8) in center_string(outstring, '61574.45', width=6)

width < len (12) in center_string(outstring, '592619104.10', width=8)

width < len (7) in center_string(outstring, '1851.23', width=6)

width < len (7) in center_string(outstring, '4370.35', width=5)

width < len (16) in center_string(outstring, ' 9.5500(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.116(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252811(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4368.18', width=5)

width < len (16) in center_string(outstring, ' 9.5405(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018232(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921005(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.21', width=5)

width < len (16) in center_string(outstring, ' 9.5275(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027348(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923798(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.50', width=5)

width < len (16) in center_string(outstring, ' 9.5114(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036465(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926590(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.06', width=5)

width < len (16) in center_string(outstring, ' 9.4920(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045581(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929382(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3919.63', width=5)

width < len (16) in center_string(outstring, ' 7.6818(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054697(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932175(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4345.98', width=5)

width < len (16) in center_string(outstring, ' 9.4438(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063813(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.37', width=5)

width < len (16) in center_string(outstring, ' 9.4151(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072929(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937759(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.610 sec (User: 0.590 sec, System: 0.020 sec)
  Total time: 0.600 sec

Final candidates in binary format are in 'Sband_DM28.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM28.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM75.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM75.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1029.68', width=5)

width < len (9) in center_string(outstring, '530224.69', width=6)

width < len (12) in center_string(outstring, '604617026.73', width=8)

width < len (7) in center_string(outstring, '2954.71', width=6)

width < len (7) in center_string(outstring, '4419.06', width=5)

width < len (16) in center_string(outstring, ' 9.7640(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252594(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4415.59', width=5)

width < len (16) in center_string(outstring, ' 9.7487(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920547(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4411.37', width=5)

width < len (16) in center_string(outstring, ' 9.7301(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923096(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4406.47', width=5)

width < len (16) in center_string(outstring, ' 9.7085(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036856(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4400.89', width=5)

width < len (16) in center_string(outstring, ' 9.6839(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046070(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928223(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '3952.68', width=5)

width < len (16) in center_string(outstring, ' 7.8118(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055284(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930786(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(17)', width=10)

width < len (7) in center_string(outstring, '4387.76', width=5)

width < len (16) in center_string(outstring, ' 9.6262(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064498(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933350(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4380.22', width=5)

width < len (16) in center_string(outstring, ' 9.5932(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073712(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935898(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM75.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM75.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM59.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM59.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '878.57', width=5)

width < len (9) in center_string(outstring, '386041.00', width=6)

width < len (12) in center_string(outstring, '569081932.43', width=8)

width < len (7) in center_string(outstring, '3247.64', width=6)

width < len (7) in center_string(outstring, '4396.77', width=5)

width < len (16) in center_string(outstring, ' 9.6658(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.787(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254149(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3960.07', width=5)

width < len (16) in center_string(outstring, ' 7.8411(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017573(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922302(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4389.96', width=5)

width < len (16) in center_string(outstring, ' 9.6359(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026360(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925018(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4385.46', width=5)

width < len (16) in center_string(outstring, ' 9.6161(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035146(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927719(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3942.26', width=5)

width < len (16) in center_string(outstring, ' 7.7707(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043933(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930435(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4374.39', width=5)

width < len (16) in center_string(outstring, ' 9.5676(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052719(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933151(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4367.83', width=5)

width < len (16) in center_string(outstring, ' 9.5390(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061506(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935852(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '3919.95', width=5)

width < len (16) in center_string(outstring, ' 7.6830(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070293(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938568(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (13) in center_string(outstring, '0.0(2.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.8)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(7.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM59.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM59.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM0.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM0.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '590.15', width=5)

width < len (9) in center_string(outstring, '174232.12', width=6)

width < len (12) in center_string(outstring, '589799096.91', width=8)

width < len (7) in center_string(outstring, '1442.32', width=6)

width < len (7) in center_string(outstring, '4358.36', width=5)

width < len (16) in center_string(outstring, ' 9.4976(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253288(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.53', width=5)

width < len (16) in center_string(outstring, ' 9.4897(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921494(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4353.92', width=5)

width < len (16) in center_string(outstring, ' 9.4783(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924301(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.56', width=5)

width < len (16) in center_string(outstring, ' 9.4637(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927124(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.45', width=5)

width < len (16) in center_string(outstring, ' 9.4458(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929947(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.59', width=5)

width < len (16) in center_string(outstring, ' 9.4247(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.16', width=5)

width < len (16) in center_string(outstring, ' 7.6369(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935577(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.69', width=5)

width < len (16) in center_string(outstring, ' 9.3731(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938385(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.9)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.520 sec, System: 0.010 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM0.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM0.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM77.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM77.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1033.76', width=5)

width < len (9) in center_string(outstring, '534430.75', width=6)

width < len (12) in center_string(outstring, '605698807.97', width=8)

width < len (7) in center_string(outstring, '2803.50', width=6)

width < len (7) in center_string(outstring, '3987.45', width=5)

width < len (16) in center_string(outstring, ' 7.9499(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.212(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256205(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4418.71', width=5)

width < len (16) in center_string(outstring, ' 9.7625(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018424(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924149(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4414.44', width=5)

width < len (16) in center_string(outstring, ' 9.7436(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027636(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926712(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4409.48', width=5)

width < len (16) in center_string(outstring, ' 9.7218(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036847(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929276(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4403.86', width=5)

width < len (16) in center_string(outstring, ' 9.6970(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046059(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931839(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4397.56', width=5)

width < len (16) in center_string(outstring, ' 9.6693(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055271(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934387(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4390.61', width=5)

width < len (16) in center_string(outstring, ' 9.6387(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064483(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936951(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4383.01', width=5)

width < len (16) in center_string(outstring, ' 9.6054(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073695(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939514(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '-0.4(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM77.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM77.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM38.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM38.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '541.31', width=5)

width < len (9) in center_string(outstring, '146599.47', width=6)

width < len (12) in center_string(outstring, '595341929.80', width=8)

width < len (7) in center_string(outstring, '3474.34', width=6)

width < len (7) in center_string(outstring, '4381.43', width=5)

width < len (16) in center_string(outstring, ' 9.5985(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.009(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252578(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.05', width=5)

width < len (16) in center_string(outstring, ' 9.5880(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018018(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920761(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.88', width=5)

width < len (16) in center_string(outstring, ' 9.5742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027027(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4371.98', width=5)

width < len (16) in center_string(outstring, ' 9.5571(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036036(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926285(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.35', width=5)

width < len (16) in center_string(outstring, ' 9.5369(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045044(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929047(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3925.44', width=5)

width < len (16) in center_string(outstring, ' 7.7045(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054053(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931824(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4355.95', width=5)

width < len (16) in center_string(outstring, ' 9.4872(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063062(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934586(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.19', width=5)

width < len (16) in center_string(outstring, ' 9.4577(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072071(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937347(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(9.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.530 sec, System: 0.010 sec)
  Total time: 0.540 sec

Final candidates in binary format are in 'Sband_DM38.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM38.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM43.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM43.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '702.52', width=5)

width < len (9) in center_string(outstring, '246863.45', width=6)

width < len (12) in center_string(outstring, '582008116.91', width=8)

width < len (7) in center_string(outstring, '3933.48', width=6)

width < len (7) in center_string(outstring, '4386.00', width=5)

width < len (16) in center_string(outstring, ' 9.6185(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.313(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.250403(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3953.77', width=5)

width < len (16) in center_string(outstring, ' 7.8161(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00016627(26)', width=12)

width < len (15) in center_string(outstring, ' 166.918594(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(17)', width=10)

width < len (7) in center_string(outstring, '4380.64', width=5)

width < len (16) in center_string(outstring, ' 9.5950(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00024940(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4376.93', width=5)

width < len (16) in center_string(outstring, ' 9.5788(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00033254(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923950(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4372.56', width=5)

width < len (16) in center_string(outstring, ' 9.5597(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00041567(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926636(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4367.53', width=5)

width < len (16) in center_string(outstring, ' 9.5377(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00049881(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929306(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4361.85', width=5)

width < len (16) in center_string(outstring, ' 9.5129(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058194(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931992(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789505(16)', width=10)

width < len (7) in center_string(outstring, '3918.38', width=5)

width < len (16) in center_string(outstring, ' 7.6769(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00066508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934662(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM43.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM43.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM24.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM24.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '390.40', width=5)

width < len (8) in center_string(outstring, '76294.09', width=6)

width < len (12) in center_string(outstring, '563419921.87', width=8)

width < len (7) in center_string(outstring, '2143.31', width=6)

width < len (7) in center_string(outstring, '3943.16', width=5)

width < len (16) in center_string(outstring, ' 7.7743(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.655(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.250925(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4367.40', width=5)

width < len (16) in center_string(outstring, ' 9.5371(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017311(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919098(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4364.68', width=5)

width < len (16) in center_string(outstring, ' 9.5252(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025966(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921799(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (7) in center_string(outstring, '3930.11', width=5)

width < len (16) in center_string(outstring, ' 7.7229(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034621(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924500(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(18)', width=10)

width < len (7) in center_string(outstring, '4357.19', width=5)

width < len (16) in center_string(outstring, ' 9.4926(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043277(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4352.43', width=5)

width < len (16) in center_string(outstring, ' 9.4718(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051932(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929916(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788818(16)', width=10)

width < len (7) in center_string(outstring, '3912.55', width=5)

width < len (16) in center_string(outstring, ' 7.6540(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060587(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932617(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(18)', width=10)

width < len (7) in center_string(outstring, '4340.89', width=5)

width < len (16) in center_string(outstring, ' 9.4217(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069243(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935318(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(7.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.2(2.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.6(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(5.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.580 sec (User: 0.570 sec, System: 0.010 sec)
  Total time: 0.580 sec

Final candidates in binary format are in 'Sband_DM24.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM24.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM51.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM51.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '774.66', width=5)

width < len (9) in center_string(outstring, '300147.41', width=6)

width < len (12) in center_string(outstring, '598583320.44', width=8)

width < len (7) in center_string(outstring, '3079.19', width=6)

width < len (7) in center_string(outstring, '4394.40', width=5)

width < len (16) in center_string(outstring, ' 9.6554(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.860(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255100(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.65', width=5)

width < len (16) in center_string(outstring, ' 9.6433(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017721(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.12', width=5)

width < len (16) in center_string(outstring, ' 9.6278(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026581(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925995(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4383.88', width=5)

width < len (16) in center_string(outstring, ' 9.6092(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928726(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3941.90', width=5)

width < len (16) in center_string(outstring, ' 7.7693(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044302(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4373.28', width=5)

width < len (16) in center_string(outstring, ' 9.5628(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053163(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934174(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4366.94', width=5)

width < len (16) in center_string(outstring, ' 9.5351(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062023(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936905(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4359.91', width=5)

width < len (16) in center_string(outstring, ' 9.5044(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070883(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939636(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '-0.4(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(7.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM51.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM51.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM83.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM83.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 36 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  11%
Amount of optimization complete =  22%
Amount of optimization complete =  33%
Amount of optimization complete =  44%
Amount of optimization complete =  55%
Amount of optimization complete =  66%
Amount of optimization complete =  77%
Amount of optimization complete =  88%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1051.34', width=5)

width < len (9) in center_string(outstring, '552757.25', width=6)

width < len (12) in center_string(outstring, '606834315.06', width=8)

width < len (7) in center_string(outstring, '2582.82', width=6)

width < len (7) in center_string(outstring, '4428.16', width=5)

width < len (16) in center_string(outstring, ' 9.8043(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.605(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254250(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4424.45', width=5)

width < len (16) in center_string(outstring, ' 9.7879(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017210(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922394(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4419.98', width=5)

width < len (16) in center_string(outstring, ' 9.7681(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025815(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925049(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4414.81', width=5)

width < len (16) in center_string(outstring, ' 9.7453(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927719(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4408.97', width=5)

width < len (16) in center_string(outstring, ' 9.7195(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043024(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930389(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4402.45', width=5)

width < len (16) in center_string(outstring, ' 9.6908(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051629(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933044(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '3951.49', width=5)

width < len (16) in center_string(outstring, ' 7.8072(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060234(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935715(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4387.43', width=5)

width < len (16) in center_string(outstring, ' 9.6248(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068839(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.280 sec, System: 0.010 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM83.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM83.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM35.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM35.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 75 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '435.93', width=5)

width < len (8) in center_string(outstring, '95104.04', width=6)

width < len (12) in center_string(outstring, '595450228.48', width=8)

width < len (7) in center_string(outstring, '2505.19', width=6)

width < len (7) in center_string(outstring, '4380.72', width=5)

width < len (16) in center_string(outstring, ' 9.5954(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.035(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3947.55', width=5)

width < len (16) in center_string(outstring, ' 7.7916(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018070(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923843(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4375.41', width=5)

width < len (16) in center_string(outstring, ' 9.5721(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027105(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926620(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.63', width=5)

width < len (16) in center_string(outstring, ' 9.5556(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036140(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929398(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4367.11', width=5)

width < len (16) in center_string(outstring, ' 9.5358(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045175(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932175(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4361.86', width=5)

width < len (16) in center_string(outstring, ' 9.5129(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054210(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934952(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.90', width=5)

width < len (16) in center_string(outstring, ' 9.4869(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063245(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937714(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.23', width=5)

width < len (16) in center_string(outstring, ' 9.4579(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940491(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.550 sec, System: 0.010 sec)
  Total time: 0.550 sec

Final candidates in binary format are in 'Sband_DM35.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM35.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM76.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM76.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1032.47', width=5)

width < len (9) in center_string(outstring, '533095.31', width=6)

width < len (12) in center_string(outstring, '604435523.45', width=8)

width < len (7) in center_string(outstring, '2922.99', width=6)

width < len (7) in center_string(outstring, '4420.33', width=5)

width < len (16) in center_string(outstring, ' 9.7697(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255224(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4416.51', width=5)

width < len (16) in center_string(outstring, ' 9.7528(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923431(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4411.85', width=5)

width < len (16) in center_string(outstring, ' 9.7322(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926254(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4406.41', width=5)

width < len (16) in center_string(outstring, ' 9.7082(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929077(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.21', width=5)

width < len (16) in center_string(outstring, ' 9.6809(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931885(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3950.83', width=5)

width < len (16) in center_string(outstring, ' 7.8045(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934708(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4385.55', width=5)

width < len (16) in center_string(outstring, ' 9.6165(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4377.12', width=5)

width < len (16) in center_string(outstring, ' 9.5796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940353(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM76.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM76.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM4.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM4.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '587.98', width=5)

width < len (9) in center_string(outstring, '172953.69', width=6)

width < len (12) in center_string(outstring, '589692751.54', width=8)

width < len (7) in center_string(outstring, '1570.24', width=6)

width < len (7) in center_string(outstring, '4358.54', width=5)

width < len (16) in center_string(outstring, ' 9.4984(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254550(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.59', width=5)

width < len (16) in center_string(outstring, ' 9.4899(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922760(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.85', width=5)

width < len (16) in center_string(outstring, ' 9.4780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925568(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.36', width=5)

width < len (16) in center_string(outstring, ' 9.4628(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928391(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.12', width=5)

width < len (16) in center_string(outstring, ' 9.4444(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931198(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.14', width=5)

width < len (16) in center_string(outstring, ' 9.4228(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.58', width=5)

width < len (16) in center_string(outstring, ' 7.6307(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936844(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4328.99', width=5)

width < len (16) in center_string(outstring, ' 9.3701(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939651(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM4.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM4.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM50.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM50.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '731.42', width=5)

width < len (9) in center_string(outstring, '267583.41', width=6)

width < len (12) in center_string(outstring, '599161462.72', width=8)

width < len (7) in center_string(outstring, '2956.75', width=6)

width < len (7) in center_string(outstring, '4395.11', width=5)

width < len (16) in center_string(outstring, ' 9.6585(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253056(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3959.24', width=5)

width < len (16) in center_string(outstring, ' 7.8378(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921005(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4389.24', width=5)

width < len (16) in center_string(outstring, ' 9.6327(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923569(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4385.26', width=5)

width < len (16) in center_string(outstring, ' 9.6152(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926132(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4380.61', width=5)

width < len (16) in center_string(outstring, ' 9.5949(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928680(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4375.30', width=5)

width < len (16) in center_string(outstring, ' 9.5716(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4369.33', width=5)

width < len (16) in center_string(outstring, ' 9.5455(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933807(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4362.72', width=5)

width < len (16) in center_string(outstring, ' 9.5166(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936371(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(8.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM50.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM50.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM3.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM3.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '581.62', width=5)

width < len (9) in center_string(outstring, '169233.44', width=6)

width < len (12) in center_string(outstring, '589826539.78', width=8)

width < len (7) in center_string(outstring, '1492.12', width=6)

width < len (7) in center_string(outstring, '4358.79', width=5)

width < len (16) in center_string(outstring, ' 9.4995(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253712(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.89', width=5)

width < len (16) in center_string(outstring, ' 9.4913(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.21', width=5)

width < len (16) in center_string(outstring, ' 9.4796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924728(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.76', width=5)

width < len (16) in center_string(outstring, ' 9.4646(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927551(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.58', width=5)

width < len (16) in center_string(outstring, ' 9.4464(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930359(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3913.25', width=5)

width < len (16) in center_string(outstring, ' 7.6568(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933182(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4335.98', width=5)

width < len (16) in center_string(outstring, ' 9.4004(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935989(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4329.60', width=5)

width < len (16) in center_string(outstring, ' 9.3727(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938812(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM3.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM3.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM25.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM25.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '384.47', width=5)

width < len (8) in center_string(outstring, '73993.12', width=6)

width < len (12) in center_string(outstring, '607623648.74', width=8)

width < len (7) in center_string(outstring, '2106.82', width=6)

width < len (7) in center_string(outstring, '4370.13', width=5)

width < len (16) in center_string(outstring, ' 9.5490(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.139(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.06', width=5)

width < len (16) in center_string(outstring, ' 9.5400(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018277(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.19', width=5)

width < len (16) in center_string(outstring, ' 9.5274(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027416(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.57', width=5)

width < len (16) in center_string(outstring, ' 9.5117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927826(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.22', width=5)

width < len (16) in center_string(outstring, ' 9.4927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.13', width=5)

width < len (16) in center_string(outstring, ' 9.4705(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054832(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933426(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4346.31', width=5)

width < len (16) in center_string(outstring, ' 9.4452(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936218(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.78', width=5)

width < len (16) in center_string(outstring, ' 9.4168(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939011(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(3.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.580 sec (User: 0.570 sec, System: 0.010 sec)
  Total time: 0.580 sec

Final candidates in binary format are in 'Sband_DM25.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM25.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM53.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM53.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '804.51', width=5)

width < len (9) in center_string(outstring, '323718.06', width=6)

width < len (12) in center_string(outstring, '600184197.06', width=8)

width < len (7) in center_string(outstring, '3101.41', width=6)

width < len (7) in center_string(outstring, '4400.64', width=5)

width < len (16) in center_string(outstring, ' 9.6828(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.860(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254926(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4397.84', width=5)

width < len (16) in center_string(outstring, ' 9.6705(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4394.26', width=5)

width < len (16) in center_string(outstring, ' 9.6548(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026580(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925812(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4389.97', width=5)

width < len (16) in center_string(outstring, ' 9.6359(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035441(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928543(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4384.96', width=5)

width < len (16) in center_string(outstring, ' 9.6139(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044301(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931274(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3940.08', width=5)

width < len (16) in center_string(outstring, ' 7.7621(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053161(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934006(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4372.84', width=5)

width < len (16) in center_string(outstring, ' 9.5609(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4365.75', width=5)

width < len (16) in center_string(outstring, ' 9.5299(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070881(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939453(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790573(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(9.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM53.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM53.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM48.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM48.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '723.52', width=5)

width < len (9) in center_string(outstring, '261836.52', width=6)

width < len (12) in center_string(outstring, '597979347.31', width=8)

width < len (7) in center_string(outstring, '3097.14', width=6)

width < len (7) in center_string(outstring, '4392.26', width=5)

width < len (16) in center_string(outstring, ' 9.6460(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.902(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255017(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.61', width=5)

width < len (16) in center_string(outstring, ' 9.6344(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017803(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923187(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.18', width=5)

width < len (16) in center_string(outstring, ' 9.6193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026705(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925919(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4382.03', width=5)

width < len (16) in center_string(outstring, ' 9.6011(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035607(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928665(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4377.17', width=5)

width < len (16) in center_string(outstring, ' 9.5798(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931396(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.59', width=5)

width < len (16) in center_string(outstring, ' 9.5554(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053410(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934143(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3925.42', width=5)

width < len (16) in center_string(outstring, ' 7.7045(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062312(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4358.36', width=5)

width < len (16) in center_string(outstring, ' 9.4977(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071213(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939621(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.5)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM48.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM48.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM61.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM61.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '895.86', width=5)

width < len (9) in center_string(outstring, '401381.34', width=6)

width < len (12) in center_string(outstring, '600605392.73', width=8)

width < len (7) in center_string(outstring, '3266.69', width=6)

width < len (7) in center_string(outstring, '4403.49', width=5)

width < len (16) in center_string(outstring, ' 9.6954(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.746(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255600(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4400.36', width=5)

width < len (16) in center_string(outstring, ' 9.6816(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017491(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923752(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4396.47', width=5)

width < len (16) in center_string(outstring, ' 9.6645(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026237(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926453(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4391.87', width=5)

width < len (16) in center_string(outstring, ' 9.6443(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034982(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.58', width=5)

width < len (16) in center_string(outstring, ' 9.6211(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043728(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931854(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '3939.14', width=5)

width < len (16) in center_string(outstring, ' 7.7584(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052473(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934555(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(17)', width=10)

width < len (7) in center_string(outstring, '4373.95', width=5)

width < len (16) in center_string(outstring, ' 9.5657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061219(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4366.62', width=5)

width < len (16) in center_string(outstring, ' 9.5337(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069964(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939957(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(9.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM61.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM61.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM49.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM49.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '729.38', width=5)

width < len (9) in center_string(outstring, '266091.91', width=6)

width < len (12) in center_string(outstring, '598971378.85', width=8)

width < len (7) in center_string(outstring, '2987.69', width=6)

width < len (7) in center_string(outstring, '4394.33', width=5)

width < len (16) in center_string(outstring, ' 9.6551(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252011(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3958.80', width=5)

width < len (16) in center_string(outstring, ' 7.8361(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(26)', width=12)

width < len (15) in center_string(outstring, ' 166.919952(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.48', width=5)

width < len (16) in center_string(outstring, ' 9.6294(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4384.52', width=5)

width < len (16) in center_string(outstring, ' 9.6120(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925079(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.89', width=5)

width < len (16) in center_string(outstring, ' 9.5917(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4374.59', width=5)

width < len (16) in center_string(outstring, ' 9.5685(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930206(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4368.64', width=5)

width < len (16) in center_string(outstring, ' 9.5425(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4362.04', width=5)

width < len (16) in center_string(outstring, ' 9.5137(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.580 sec (User: 0.570 sec, System: 0.010 sec)
  Total time: 0.580 sec

Final candidates in binary format are in 'Sband_DM49.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM49.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM11.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM11.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '638.79', width=5)

width < len (9) in center_string(outstring, '204116.75', width=6)

width < len (12) in center_string(outstring, '590366916.88', width=8)

width < len (7) in center_string(outstring, '2617.85', width=6)

width < len (7) in center_string(outstring, '4361.79', width=5)

width < len (16) in center_string(outstring, ' 9.5126(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253912(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4359.61', width=5)

width < len (16) in center_string(outstring, ' 9.5031(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4356.62', width=5)

width < len (16) in center_string(outstring, ' 9.4901(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924927(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '3924.35', width=5)

width < len (16) in center_string(outstring, ' 7.7003(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927750(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4348.41', width=5)

width < len (16) in center_string(outstring, ' 9.4544(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930557(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4343.20', width=5)

width < len (16) in center_string(outstring, ' 9.4317(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933380(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4337.24', width=5)

width < len (16) in center_string(outstring, ' 9.4059(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4330.57', width=5)

width < len (16) in center_string(outstring, ' 9.3769(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939011(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.450 sec

Final candidates in binary format are in 'Sband_DM11.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM11.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM50.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM50.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '738.56', width=5)

width < len (9) in center_string(outstring, '272833.34', width=6)

width < len (12) in center_string(outstring, '598877792.67', width=8)

width < len (7) in center_string(outstring, '2954.55', width=6)

width < len (7) in center_string(outstring, '4394.27', width=5)

width < len (16) in center_string(outstring, ' 9.6548(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252778(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3958.02', width=5)

width < len (16) in center_string(outstring, ' 7.8330(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(26)', width=12)

width < len (15) in center_string(outstring, ' 166.920731(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.31', width=5)

width < len (16) in center_string(outstring, ' 9.6286(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923279(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4384.29', width=5)

width < len (16) in center_string(outstring, ' 9.6110(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925842(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.60', width=5)

width < len (16) in center_string(outstring, ' 9.5905(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928406(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4374.25', width=5)

width < len (16) in center_string(outstring, ' 9.5671(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4368.25', width=5)

width < len (16) in center_string(outstring, ' 9.5408(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933533(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4361.60', width=5)

width < len (16) in center_string(outstring, ' 9.5118(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM50.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM50.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM16.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM16.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '632.55', width=5)

width < len (9) in center_string(outstring, '200155.80', width=6)

width < len (12) in center_string(outstring, '591495551.27', width=8)

width < len (7) in center_string(outstring, '3487.50', width=6)

width < len (7) in center_string(outstring, '4366.17', width=5)

width < len (16) in center_string(outstring, ' 9.5317(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253851(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.07', width=5)

width < len (16) in center_string(outstring, ' 9.5226(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922058(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.17', width=5)

width < len (16) in center_string(outstring, ' 9.5099(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.52', width=5)

width < len (16) in center_string(outstring, ' 9.4940(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927689(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4353.12', width=5)

width < len (16) in center_string(outstring, ' 9.4748(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3914.97', width=5)

width < len (16) in center_string(outstring, ' 7.6635(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4342.10', width=5)

width < len (16) in center_string(outstring, ' 9.4269(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936142(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.50', width=5)

width < len (16) in center_string(outstring, ' 9.3983(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938950(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.8)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=10)

width < len (14) in center_string(outstring, '-0.2(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM16.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM16.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM56.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM56.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '831.45', width=5)

width < len (9) in center_string(outstring, '345753.38', width=6)

width < len (12) in center_string(outstring, '600672926.18', width=8)

width < len (7) in center_string(outstring, '3075.35', width=6)

width < len (7) in center_string(outstring, '4403.15', width=5)

width < len (16) in center_string(outstring, ' 9.6939(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.822(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253651(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4400.19', width=5)

width < len (16) in center_string(outstring, ' 9.6808(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921814(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4396.46', width=5)

width < len (16) in center_string(outstring, ' 9.6644(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924530(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4392.01', width=5)

width < len (16) in center_string(outstring, ' 9.6449(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035288(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927246(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4386.86', width=5)

width < len (16) in center_string(outstring, ' 9.6223(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929962(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4381.00', width=5)

width < len (16) in center_string(outstring, ' 9.5966(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052932(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932693(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3933.52', width=5)

width < len (16) in center_string(outstring, ' 7.7363(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061754(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935410(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4367.24', width=5)

width < len (16) in center_string(outstring, ' 9.5364(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070576(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM56.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM56.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM81.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM81.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1041.85', width=5)

width < len (9) in center_string(outstring, '542824.19', width=6)

width < len (12) in center_string(outstring, '606425223.54', width=8)

width < len (7) in center_string(outstring, '2583.05', width=6)

width < len (7) in center_string(outstring, '4426.02', width=5)

width < len (16) in center_string(outstring, ' 9.7949(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.610(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253906(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4422.33', width=5)

width < len (16) in center_string(outstring, ' 9.7785(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017220(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922043(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '3979.02', width=5)

width < len (16) in center_string(outstring, ' 7.9163(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025830(25)', width=12)

width < len (15) in center_string(outstring, ' 166.924713(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(17)', width=10)

width < len (7) in center_string(outstring, '4412.72', width=5)

width < len (16) in center_string(outstring, ' 9.7361(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034440(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927383(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4406.89', width=5)

width < len (16) in center_string(outstring, ' 9.7104(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043050(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930038(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4400.39', width=5)

width < len (16) in center_string(outstring, ' 9.6817(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051660(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932709(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4393.22', width=5)

width < len (16) in center_string(outstring, ' 9.6502(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060270(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935379(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4385.40', width=5)

width < len (16) in center_string(outstring, ' 9.6159(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068880(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.8(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM81.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM81.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM72.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM72.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 36 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1014.81', width=5)

width < len (9) in center_string(outstring, '515020.28', width=6)

width < len (12) in center_string(outstring, '603061464.05', width=8)

width < len (7) in center_string(outstring, '3068.39', width=6)

width < len (7) in center_string(outstring, '4411.98', width=5)

width < len (16) in center_string(outstring, ' 9.7328(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255305(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4408.67', width=5)

width < len (16) in center_string(outstring, ' 9.7182(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923248(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '3969.87', width=5)

width < len (16) in center_string(outstring, ' 7.8800(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027608(25)', width=12)

width < len (15) in center_string(outstring, ' 166.925812(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4399.87', width=5)

width < len (16) in center_string(outstring, ' 9.6795(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928360(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4394.47', width=5)

width < len (16) in center_string(outstring, ' 9.6557(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046014(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930923(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4388.40', width=5)

width < len (16) in center_string(outstring, ' 9.6290(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933487(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4381.68', width=5)

width < len (16) in center_string(outstring, ' 9.5996(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936035(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4374.32', width=5)

width < len (16) in center_string(outstring, ' 9.5673(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938599(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.310 sec (User: 0.300 sec, System: 0.010 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM72.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM72.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM57.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM57.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '842.13', width=5)

width < len (9) in center_string(outstring, '354688.59', width=6)

width < len (12) in center_string(outstring, '601051004.51', width=8)

width < len (7) in center_string(outstring, '3124.89', width=6)

width < len (7) in center_string(outstring, '4403.90', width=5)

width < len (16) in center_string(outstring, ' 9.6972(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253311(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4401.03', width=5)

width < len (16) in center_string(outstring, ' 9.6845(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4397.42', width=5)

width < len (16) in center_string(outstring, ' 9.6687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923813(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4393.14', width=5)

width < len (16) in center_string(outstring, ' 9.6498(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926376(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4388.18', width=5)

width < len (16) in center_string(outstring, ' 9.6281(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928940(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3942.00', width=5)

width < len (16) in center_string(outstring, ' 7.7697(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931503(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(17)', width=10)

width < len (7) in center_string(outstring, '4376.29', width=5)

width < len (16) in center_string(outstring, ' 9.5760(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934067(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4369.37', width=5)

width < len (16) in center_string(outstring, ' 9.5457(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936630(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(9.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM57.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM57.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM71.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM71.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  11%
Amount of optimization complete =  22%
Amount of optimization complete =  33%
Amount of optimization complete =  44%
Amount of optimization complete =  55%
Amount of optimization complete =  66%
Amount of optimization complete =  77%
Amount of optimization complete =  88%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1003.40', width=5)

width < len (9) in center_string(outstring, '503506.66', width=6)

width < len (12) in center_string(outstring, '587366766.18', width=8)

width < len (7) in center_string(outstring, '3103.25', width=6)

width < len (7) in center_string(outstring, '4410.57', width=5)

width < len (16) in center_string(outstring, ' 9.7266(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253418(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4407.21', width=5)

width < len (16) in center_string(outstring, ' 9.7117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921371(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4403.10', width=5)

width < len (16) in center_string(outstring, ' 9.6937(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923935(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.32', width=5)

width < len (16) in center_string(outstring, ' 9.6726(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926498(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3955.32', width=5)

width < len (16) in center_string(outstring, ' 7.8223(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929047(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4386.75', width=5)

width < len (16) in center_string(outstring, ' 9.6218(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931610(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3940.55', width=5)

width < len (16) in center_string(outstring, ' 7.7640(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934174(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4372.56', width=5)

width < len (16) in center_string(outstring, ' 9.5597(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.330 sec, System: 0.010 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM71.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM71.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM42.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM42.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '696.73', width=5)

width < len (9) in center_string(outstring, '242808.38', width=6)

width < len (12) in center_string(outstring, '611117169.29', width=8)

width < len (7) in center_string(outstring, '4299.76', width=6)

width < len (7) in center_string(outstring, '4384.03', width=5)

width < len (16) in center_string(outstring, ' 9.6099(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.973(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.53', width=5)

width < len (16) in center_string(outstring, ' 9.5989(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017945(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922424(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4378.24', width=5)

width < len (16) in center_string(outstring, ' 9.5845(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026918(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925171(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.23', width=5)

width < len (16) in center_string(outstring, ' 9.5669(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035891(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.49', width=5)

width < len (16) in center_string(outstring, ' 9.5462(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044863(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930695(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4364.04', width=5)

width < len (16) in center_string(outstring, ' 9.5224(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053836(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933441(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4357.88', width=5)

width < len (16) in center_string(outstring, ' 9.4956(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062808(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936203(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.03', width=5)

width < len (16) in center_string(outstring, ' 9.4657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071781(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938965(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.6)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.450 sec

Final candidates in binary format are in 'Sband_DM42.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM42.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM53.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM53.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '805.72', width=5)

width < len (9) in center_string(outstring, '324690.00', width=6)

width < len (12) in center_string(outstring, '600445072.33', width=8)

width < len (7) in center_string(outstring, '3125.88', width=6)

width < len (7) in center_string(outstring, '4401.53', width=5)

width < len (16) in center_string(outstring, ' 9.6867(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.862(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255445(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4398.75', width=5)

width < len (16) in center_string(outstring, ' 9.6745(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.20', width=5)

width < len (16) in center_string(outstring, ' 9.6589(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026586(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4390.93', width=5)

width < len (16) in center_string(outstring, ' 9.6401(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035448(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929062(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.94', width=5)

width < len (16) in center_string(outstring, ' 9.6182(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044310(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931793(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3940.86', width=5)

width < len (16) in center_string(outstring, ' 7.7652(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053172(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934525(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4373.86', width=5)

width < len (16) in center_string(outstring, ' 9.5654(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062034(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937256(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4366.79', width=5)

width < len (16) in center_string(outstring, ' 9.5344(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070896(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939987(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790573(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM53.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM53.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM21.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM21.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 72 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '461.45', width=5)

width < len (9) in center_string(outstring, '106555.73', width=6)

width < len (12) in center_string(outstring, '592265064.38', width=8)

width < len (7) in center_string(outstring, '2700.99', width=6)

width < len (7) in center_string(outstring, '4368.63', width=5)

width < len (16) in center_string(outstring, ' 9.5425(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.167(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4366.55', width=5)

width < len (16) in center_string(outstring, ' 9.5334(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018333(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921188(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4363.68', width=5)

width < len (16) in center_string(outstring, ' 9.5209(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027500(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923996(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3928.94', width=5)

width < len (16) in center_string(outstring, ' 7.7183(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036667(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926804(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4355.69', width=5)

width < len (16) in center_string(outstring, ' 9.4860(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045833(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929611(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.58', width=5)

width < len (16) in center_string(outstring, ' 9.4638(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932404(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4344.74', width=5)

width < len (16) in center_string(outstring, ' 9.4384(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064167(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935211(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.18', width=5)

width < len (16) in center_string(outstring, ' 9.4099(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073333(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938019(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM21.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM21.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM45.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM45.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '705.54', width=5)

width < len (9) in center_string(outstring, '248988.72', width=6)

width < len (12) in center_string(outstring, '597570712.71', width=8)

width < len (7) in center_string(outstring, '3455.51', width=6)

width < len (7) in center_string(outstring, '4390.48', width=5)

width < len (16) in center_string(outstring, ' 9.6382(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.926(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254633(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4387.91', width=5)

width < len (16) in center_string(outstring, ' 9.6269(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017851(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922806(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.56', width=5)

width < len (16) in center_string(outstring, ' 9.6122(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026777(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925552(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4380.49', width=5)

width < len (16) in center_string(outstring, ' 9.5944(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035703(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928299(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.70', width=5)

width < len (16) in center_string(outstring, ' 9.5734(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044628(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931046(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4370.21', width=5)

width < len (16) in center_string(outstring, ' 9.5494(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053554(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933777(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4364.00', width=5)

width < len (16) in center_string(outstring, ' 9.5223(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062479(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3917.44', width=5)

width < len (16) in center_string(outstring, ' 7.6732(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071405(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939270(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(9.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM45.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM45.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM76.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM76.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1028.46', width=5)

width < len (9) in center_string(outstring, '528961.38', width=6)

width < len (12) in center_string(outstring, '604317496.41', width=8)

width < len (7) in center_string(outstring, '2853.48', width=6)

width < len (7) in center_string(outstring, '4419.89', width=5)

width < len (16) in center_string(outstring, ' 9.7677(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255131(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4416.07', width=5)

width < len (16) in center_string(outstring, ' 9.7509(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923340(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4411.41', width=5)

width < len (16) in center_string(outstring, ' 9.7303(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926163(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4405.97', width=5)

width < len (16) in center_string(outstring, ' 9.7063(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928970(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4399.77', width=5)

width < len (16) in center_string(outstring, ' 9.6790(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931793(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3950.50', width=5)

width < len (16) in center_string(outstring, ' 7.8032(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934616(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4385.12', width=5)

width < len (16) in center_string(outstring, ' 9.6146(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937439(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4376.69', width=5)

width < len (16) in center_string(outstring, ' 9.5777(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940262(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM76.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM76.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM67.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM67.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '983.48', width=5)

width < len (9) in center_string(outstring, '483712.75', width=6)

width < len (12) in center_string(outstring, '617026833.23', width=8)

width < len (7) in center_string(outstring, '3329.11', width=6)

width < len (7) in center_string(outstring, '4408.09', width=5)

width < len (16) in center_string(outstring, ' 9.7156(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.711(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253776(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4404.68', width=5)

width < len (16) in center_string(outstring, ' 9.7006(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4400.51', width=5)

width < len (16) in center_string(outstring, ' 9.6822(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026133(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4395.64', width=5)

width < len (16) in center_string(outstring, ' 9.6608(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4390.08', width=5)

width < len (16) in center_string(outstring, ' 9.6364(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930008(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4383.84', width=5)

width < len (16) in center_string(outstring, ' 9.6090(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932693(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4376.92', width=5)

width < len (16) in center_string(outstring, ' 9.5787(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060977(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935394(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4369.34', width=5)

width < len (16) in center_string(outstring, ' 9.5456(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069688(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938080(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM67.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM67.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM4.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM4.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '585.21', width=5)

width < len (9) in center_string(outstring, '171329.28', width=6)

width < len (12) in center_string(outstring, '589704944.84', width=8)

width < len (7) in center_string(outstring, '1543.67', width=6)

width < len (7) in center_string(outstring, '4358.59', width=5)

width < len (16) in center_string(outstring, ' 9.4987(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252903(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4356.61', width=5)

width < len (16) in center_string(outstring, ' 9.4900(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921112(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.85', width=5)

width < len (16) in center_string(outstring, ' 9.4780(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.33', width=5)

width < len (16) in center_string(outstring, ' 9.4627(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4346.07', width=5)

width < len (16) in center_string(outstring, ' 9.4442(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929550(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.87', width=5)

width < len (16) in center_string(outstring, ' 7.6553(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932373(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4335.33', width=5)

width < len (16) in center_string(outstring, ' 9.3976(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935181(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4328.87', width=5)

width < len (16) in center_string(outstring, ' 9.3696(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938004(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(9.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.390 sec, System: 0.020 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM4.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM4.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM59.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM59.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '878.47', width=5)

width < len (9) in center_string(outstring, '385952.50', width=6)

width < len (12) in center_string(outstring, '599234317.11', width=8)

width < len (7) in center_string(outstring, '3231.55', width=6)

width < len (7) in center_string(outstring, '4397.34', width=5)

width < len (16) in center_string(outstring, ' 9.6683(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4394.41', width=5)

width < len (16) in center_string(outstring, ' 9.6554(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920761(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4390.75', width=5)

width < len (16) in center_string(outstring, ' 9.6393(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923325(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4386.40', width=5)

width < len (16) in center_string(outstring, ' 9.6203(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925873(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4381.40', width=5)

width < len (16) in center_string(outstring, ' 9.5983(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928436(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3936.75', width=5)

width < len (16) in center_string(outstring, ' 7.7490(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931000(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(17)', width=10)

width < len (7) in center_string(outstring, '4369.40', width=5)

width < len (16) in center_string(outstring, ' 9.5459(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933563(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4362.44', width=5)

width < len (16) in center_string(outstring, ' 9.5154(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936127(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.3)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.4)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM59.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM59.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM6.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM6.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '594.32', width=5)

width < len (9) in center_string(outstring, '176697.80', width=6)

width < len (12) in center_string(outstring, '604842535.34', width=8)

width < len (7) in center_string(outstring, '1723.82', width=6)

width < len (7) in center_string(outstring, '4358.48', width=5)

width < len (16) in center_string(outstring, ' 9.4982(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.258(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.250459(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4356.66', width=5)

width < len (16) in center_string(outstring, ' 9.4902(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00016517(23)', width=12)

width < len (15) in center_string(outstring, ' 166.918610(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.16', width=5)

width < len (16) in center_string(outstring, ' 9.4794(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00024775(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921234(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786835(16)', width=10)

width < len (7) in center_string(outstring, '4351.03', width=5)

width < len (16) in center_string(outstring, ' 9.4658(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00033033(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923859(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4347.27', width=5)

width < len (16) in center_string(outstring, ' 9.4494(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00041292(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926498(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4342.87', width=5)

width < len (16) in center_string(outstring, ' 9.4303(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00049550(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929123(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '4337.84', width=5)

width < len (16) in center_string(outstring, ' 9.4085(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00057809(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931747(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789276(16)', width=10)

width < len (7) in center_string(outstring, '4332.20', width=5)

width < len (16) in center_string(outstring, ' 9.3840(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00066067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934387(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789963(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM6.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM6.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM38.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM38.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 72 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '554.97', width=5)

width < len (9) in center_string(outstring, '154089.83', width=6)

width < len (12) in center_string(outstring, '595409037.50', width=8)

width < len (7) in center_string(outstring, '3553.97', width=6)

width < len (7) in center_string(outstring, '4381.68', width=5)

width < len (16) in center_string(outstring, ' 9.5996(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.009(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252991(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.30', width=5)

width < len (16) in center_string(outstring, ' 9.5892(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018018(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921173(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.14', width=5)

width < len (16) in center_string(outstring, ' 9.5753(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027027(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923935(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4372.25', width=5)

width < len (16) in center_string(outstring, ' 9.5583(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036036(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926697(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.62', width=5)

width < len (16) in center_string(outstring, ' 9.5381(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045044(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929474(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3925.52', width=5)

width < len (16) in center_string(outstring, ' 7.7049(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054053(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932236(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4356.23', width=5)

width < len (16) in center_string(outstring, ' 9.4884(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063062(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.47', width=5)

width < len (16) in center_string(outstring, ' 9.4590(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072071(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937759(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.4)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.520 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM38.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM38.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM24.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM24.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 89 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '388.36', width=5)

width < len (8) in center_string(outstring, '75496.64', width=6)

width < len (12) in center_string(outstring, '607387668.21', width=8)

width < len (7) in center_string(outstring, '2137.95', width=6)

width < len (7) in center_string(outstring, '4369.28', width=5)

width < len (16) in center_string(outstring, ' 9.5453(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.136(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4367.20', width=5)

width < len (16) in center_string(outstring, ' 9.5362(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018272(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920944(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4364.34', width=5)

width < len (16) in center_string(outstring, ' 9.5237(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027408(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.72', width=5)

width < len (16) in center_string(outstring, ' 9.5080(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036544(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.37', width=5)

width < len (16) in center_string(outstring, ' 9.4890(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045680(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929337(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.29', width=5)

width < len (16) in center_string(outstring, ' 9.4669(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054817(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932129(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.47', width=5)

width < len (16) in center_string(outstring, ' 9.4416(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063953(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.94', width=5)

width < len (16) in center_string(outstring, ' 9.4132(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073089(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937729(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.550 sec, System: 0.010 sec)
  Total time: 0.560 sec

Final candidates in binary format are in 'Sband_DM24.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM24.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM6.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM6.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 53 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '596.16', width=5)

width < len (9) in center_string(outstring, '177797.03', width=6)

width < len (12) in center_string(outstring, '604166937.48', width=8)

width < len (7) in center_string(outstring, '1729.59', width=6)

width < len (7) in center_string(outstring, '4356.80', width=5)

width < len (16) in center_string(outstring, ' 9.4909(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.808(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.257224(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.88', width=5)

width < len (16) in center_string(outstring, ' 9.4825(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017616(23)', width=12)

width < len (13) in center_string(outstring, ' 0.258716(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4352.22', width=5)

width < len (16) in center_string(outstring, ' 9.4709(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026423(23)', width=12)

width < len (13) in center_string(outstring, ' 0.261431(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (7) in center_string(outstring, '4348.88', width=5)

width < len (16) in center_string(outstring, ' 9.4564(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035231(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930817(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4344.84', width=5)

width < len (16) in center_string(outstring, ' 9.4388(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933533(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4340.12', width=5)

width < len (16) in center_string(outstring, ' 9.4183(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052847(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936249(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4334.72', width=5)

width < len (16) in center_string(outstring, ' 9.3949(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061655(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938965(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4328.65', width=5)

width < len (16) in center_string(outstring, ' 9.3686(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070463(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941681(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM6.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM6.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM14.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM14.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '653.51', width=5)

width < len (9) in center_string(outstring, '213629.89', width=6)

width < len (12) in center_string(outstring, '576342587.43', width=8)

width < len (7) in center_string(outstring, '3430.01', width=6)

width < len (7) in center_string(outstring, '4364.88', width=5)

width < len (16) in center_string(outstring, ' 9.5261(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254736(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4362.75', width=5)

width < len (16) in center_string(outstring, ' 9.5168(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922943(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4359.82', width=5)

width < len (16) in center_string(outstring, ' 9.5040(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925751(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4356.14', width=5)

width < len (16) in center_string(outstring, ' 9.4880(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928574(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3919.59', width=5)

width < len (16) in center_string(outstring, ' 7.6816(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931381(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3913.40', width=5)

width < len (16) in center_string(outstring, ' 7.6574(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934204(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4340.63', width=5)

width < len (16) in center_string(outstring, ' 9.4205(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937027(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4333.99', width=5)

width < len (16) in center_string(outstring, ' 9.3918(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939835(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(8.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.7)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM14.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM14.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM69.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM69.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '987.24', width=5)

width < len (9) in center_string(outstring, '487418.56', width=6)

width < len (12) in center_string(outstring, '602677004.63', width=8)

width < len (7) in center_string(outstring, '3131.00', width=6)

width < len (7) in center_string(outstring, '3977.57', width=5)

width < len (16) in center_string(outstring, ' 7.9105(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.710(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254407(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4407.51', width=5)

width < len (16) in center_string(outstring, ' 9.7131(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922562(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4403.33', width=5)

width < len (16) in center_string(outstring, ' 9.6947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026130(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925247(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.45', width=5)

width < len (16) in center_string(outstring, ' 9.6732(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034839(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.88', width=5)

width < len (16) in center_string(outstring, ' 9.6487(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043549(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4386.63', width=5)

width < len (16) in center_string(outstring, ' 9.6213(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052259(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4379.71', width=5)

width < len (16) in center_string(outstring, ' 9.5909(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060969(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936005(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4372.12', width=5)

width < len (16) in center_string(outstring, ' 9.5577(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069679(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938705(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM69.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM69.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM56.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM56.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '830.25', width=5)

width < len (9) in center_string(outstring, '344754.44', width=6)

width < len (12) in center_string(outstring, '585724547.53', width=8)

width < len (7) in center_string(outstring, '3109.02', width=6)

width < len (7) in center_string(outstring, '4403.35', width=5)

width < len (16) in center_string(outstring, ' 9.6948(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.821(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255663(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4400.40', width=5)

width < len (16) in center_string(outstring, ' 9.6818(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3960.57', width=5)

width < len (16) in center_string(outstring, ' 7.8431(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026463(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926544(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4392.25', width=5)

width < len (16) in center_string(outstring, ' 9.6460(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035284(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929260(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4387.11', width=5)

width < len (16) in center_string(outstring, ' 9.6234(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044105(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931976(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4381.28', width=5)

width < len (16) in center_string(outstring, ' 9.5978(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052926(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934692(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3933.92', width=5)

width < len (16) in center_string(outstring, ' 7.7379(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061747(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937424(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4367.54', width=5)

width < len (16) in center_string(outstring, ' 9.5377(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070568(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940140(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM56.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM56.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM1.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM1.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '586.94', width=5)

width < len (9) in center_string(outstring, '172340.94', width=6)

width < len (12) in center_string(outstring, '589573387.12', width=8)

width < len (7) in center_string(outstring, '1469.40', width=6)

width < len (7) in center_string(outstring, '4357.76', width=5)

width < len (16) in center_string(outstring, ' 9.4950(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.91', width=5)

width < len (16) in center_string(outstring, ' 9.4870(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923111(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4353.27', width=5)

width < len (16) in center_string(outstring, ' 9.4755(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925934(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4349.88', width=5)

width < len (16) in center_string(outstring, ' 9.4607(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928741(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.74', width=5)

width < len (16) in center_string(outstring, ' 9.4427(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931564(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4340.87', width=5)

width < len (16) in center_string(outstring, ' 9.4216(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055263(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934372(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.35', width=5)

width < len (16) in center_string(outstring, ' 7.6298(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064474(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937195(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4328.92', width=5)

width < len (16) in center_string(outstring, ' 9.3698(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073684(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940002(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(3.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM1.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM1.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM62.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM62.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 56 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '905.44', width=5)

width < len (9) in center_string(outstring, '410005.59', width=6)

width < len (12) in center_string(outstring, '616157907.35', width=8)

width < len (7) in center_string(outstring, '3192.19', width=6)

width < len (7) in center_string(outstring, '4404.13', width=5)

width < len (16) in center_string(outstring, ' 9.6982(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.762(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253780(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4400.98', width=5)

width < len (16) in center_string(outstring, ' 9.6843(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017525(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921936(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4397.07', width=5)

width < len (16) in center_string(outstring, ' 9.6671(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026287(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924637(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4392.44', width=5)

width < len (16) in center_string(outstring, ' 9.6468(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035049(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927353(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4387.12', width=5)

width < len (16) in center_string(outstring, ' 9.6234(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930054(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4381.11', width=5)

width < len (16) in center_string(outstring, ' 9.5971(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052574(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.42', width=5)

width < len (16) in center_string(outstring, ' 9.5678(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061337(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935471(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4367.06', width=5)

width < len (16) in center_string(outstring, ' 9.5356(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070099(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938171(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.440 sec (User: 0.420 sec, System: 0.020 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM62.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM62.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM20.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM20.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '533.30', width=5)

width < len (9) in center_string(outstring, '142296.81', width=6)

width < len (12) in center_string(outstring, '576968493.91', width=8)

width < len (7) in center_string(outstring, '3343.32', width=6)

width < len (7) in center_string(outstring, '4367.59', width=5)

width < len (16) in center_string(outstring, ' 9.5379(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.187(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254753(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4365.49', width=5)

width < len (16) in center_string(outstring, ' 9.5287(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018374(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922958(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4362.59', width=5)

width < len (16) in center_string(outstring, ' 9.5161(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027561(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.93', width=5)

width < len (16) in center_string(outstring, ' 9.5002(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036748(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928574(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4354.54', width=5)

width < len (16) in center_string(outstring, ' 9.4810(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045935(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931381(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3915.49', width=5)

width < len (16) in center_string(outstring, ' 7.6655(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055122(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934189(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4343.53', width=5)

width < len (16) in center_string(outstring, ' 9.4331(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064309(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936996(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3901.50', width=5)

width < len (16) in center_string(outstring, ' 7.6108(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073495(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939804(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(5.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.520 sec, System: 0.010 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM20.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM20.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM82.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM82.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 34 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  12%
Amount of optimization complete =  25%
Amount of optimization complete =  37%
Amount of optimization complete =  50%
Amount of optimization complete =  62%
Amount of optimization complete =  75%
Amount of optimization complete =  87%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1047.41', width=5)

width < len (9) in center_string(outstring, '548633.06', width=6)

width < len (12) in center_string(outstring, '607061321.69', width=8)

width < len (7) in center_string(outstring, '2581.05', width=6)

width < len (7) in center_string(outstring, '4428.40', width=5)

width < len (16) in center_string(outstring, ' 9.8054(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.610(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253956(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4424.71', width=5)

width < len (16) in center_string(outstring, ' 9.7890(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017220(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '3980.70', width=5)

width < len (16) in center_string(outstring, ' 7.9230(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025830(25)', width=12)

width < len (15) in center_string(outstring, ' 166.924759(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(17)', width=10)

width < len (7) in center_string(outstring, '4415.10', width=5)

width < len (16) in center_string(outstring, ' 9.7465(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034440(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927429(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4409.26', width=5)

width < len (16) in center_string(outstring, ' 9.7208(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043050(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930099(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4402.75', width=5)

width < len (16) in center_string(outstring, ' 9.6921(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051660(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932755(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4395.58', width=5)

width < len (16) in center_string(outstring, ' 9.6606(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060270(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935425(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4387.75', width=5)

width < len (16) in center_string(outstring, ' 9.6262(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068880(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938095(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(4.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.290 sec (User: 0.280 sec, System: 0.010 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM82.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM82.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM9.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM9.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '627.45', width=5)

width < len (9) in center_string(outstring, '196942.36', width=6)

width < len (12) in center_string(outstring, '589740254.11', width=8)

width < len (7) in center_string(outstring, '2238.40', width=6)

width < len (7) in center_string(outstring, '4359.39', width=5)

width < len (16) in center_string(outstring, ' 9.5021(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252878(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.26', width=5)

width < len (16) in center_string(outstring, ' 9.4929(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921082(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4354.35', width=5)

width < len (16) in center_string(outstring, ' 9.4802(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923904(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.69', width=5)

width < len (16) in center_string(outstring, ' 9.4642(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926712(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.28', width=5)

width < len (16) in center_string(outstring, ' 9.4451(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3911.71', width=5)

width < len (16) in center_string(outstring, ' 7.6507(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932343(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4335.24', width=5)

width < len (16) in center_string(outstring, ' 9.3972(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935165(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4328.64', width=5)

width < len (16) in center_string(outstring, ' 9.3686(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937973(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM9.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM9.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM33.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM33.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 95 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '384.57', width=5)

width < len (8) in center_string(outstring, '74034.52', width=6)

width < len (12) in center_string(outstring, '593694543.99', width=8)

width < len (7) in center_string(outstring, '2120.16', width=6)

width < len (7) in center_string(outstring, '4373.84', width=5)

width < len (16) in center_string(outstring, ' 9.5653(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.052(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253298(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '3943.57', width=5)

width < len (16) in center_string(outstring, ' 7.7759(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018104(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921478(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4368.61', width=5)

width < len (16) in center_string(outstring, ' 9.5424(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027156(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924255(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4364.87', width=5)

width < len (16) in center_string(outstring, ' 9.5261(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036208(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927032(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4360.40', width=5)

width < len (16) in center_string(outstring, ' 9.5066(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045260(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4355.21', width=5)

width < len (16) in center_string(outstring, ' 9.4839(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054312(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932587(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4349.30', width=5)

width < len (16) in center_string(outstring, ' 9.4582(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063364(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935364(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4342.69', width=5)

width < len (16) in center_string(outstring, ' 9.4295(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072416(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.580 sec (User: 0.560 sec, System: 0.020 sec)
  Total time: 0.580 sec

Final candidates in binary format are in 'Sband_DM33.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM33.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM54.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM54.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '808.49', width=5)

width < len (9) in center_string(outstring, '326926.78', width=6)

width < len (12) in center_string(outstring, '585366529.39', width=8)

width < len (7) in center_string(outstring, '3174.60', width=6)

width < len (7) in center_string(outstring, '4401.35', width=5)

width < len (16) in center_string(outstring, ' 9.6859(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.858(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255919(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4398.58', width=5)

width < len (16) in center_string(outstring, ' 9.6738(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017716(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924088(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3959.77', width=5)

width < len (16) in center_string(outstring, ' 7.8399(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026574(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926804(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4390.77', width=5)

width < len (16) in center_string(outstring, ' 9.6394(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035432(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.80', width=5)

width < len (16) in center_string(outstring, ' 9.6176(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932266(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4380.12', width=5)

width < len (16) in center_string(outstring, ' 9.5927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053148(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.74', width=5)

width < len (16) in center_string(outstring, ' 9.5648(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062005(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937714(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3925.84', width=5)

width < len (16) in center_string(outstring, ' 7.7061(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070863(26)', width=12)

width < len (15) in center_string(outstring, ' 166.940445(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(8.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM54.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM54.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM11.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM11.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '634.31', width=5)

width < len (9) in center_string(outstring, '201265.61', width=6)

width < len (12) in center_string(outstring, '590652082.38', width=8)

width < len (7) in center_string(outstring, '2613.75', width=6)

width < len (7) in center_string(outstring, '3938.13', width=5)

width < len (16) in center_string(outstring, ' 7.7545(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252996(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4360.15', width=5)

width < len (16) in center_string(outstring, ' 9.5055(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921204(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4357.15', width=5)

width < len (16) in center_string(outstring, ' 9.4924(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924011(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4353.40', width=5)

width < len (16) in center_string(outstring, ' 9.4761(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926834(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4348.90', width=5)

width < len (16) in center_string(outstring, ' 9.4565(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929657(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4343.66', width=5)

width < len (16) in center_string(outstring, ' 9.4337(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932465(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4337.69', width=5)

width < len (16) in center_string(outstring, ' 9.4078(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935287(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.00', width=5)

width < len (16) in center_string(outstring, ' 9.3788(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938095(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.400 sec, System: 0.000 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM11.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM11.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM79.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM79.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  11%
Amount of optimization complete =  22%
Amount of optimization complete =  33%
Amount of optimization complete =  44%
Amount of optimization complete =  55%
Amount of optimization complete =  66%
Amount of optimization complete =  77%
Amount of optimization complete =  88%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1029.52', width=5)

width < len (9) in center_string(outstring, '530056.94', width=6)

width < len (12) in center_string(outstring, '605325736.65', width=8)

width < len (7) in center_string(outstring, '2675.88', width=6)

width < len (7) in center_string(outstring, '4423.13', width=5)

width < len (16) in center_string(outstring, ' 9.7821(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253798(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3982.35', width=5)

width < len (16) in center_string(outstring, ' 7.9296(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.921997(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4414.48', width=5)

width < len (16) in center_string(outstring, ' 9.7438(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924820(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4408.96', width=5)

width < len (16) in center_string(outstring, ' 9.7195(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927628(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4402.67', width=5)

width < len (16) in center_string(outstring, ' 9.6918(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930450(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4395.63', width=5)

width < len (16) in center_string(outstring, ' 9.6608(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933258(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4387.85', width=5)

width < len (16) in center_string(outstring, ' 9.6266(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936081(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4379.33', width=5)

width < len (16) in center_string(outstring, ' 9.5893(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938889(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.260 sec, System: 0.010 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM79.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM79.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM25.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM25.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 79 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '373.84', width=5)

width < len (8) in center_string(outstring, '69964.29', width=6)

width < len (12) in center_string(outstring, '577997624.07', width=8)

width < len (7) in center_string(outstring, '2001.14', width=6)

width < len (7) in center_string(outstring, '4370.63', width=5)

width < len (16) in center_string(outstring, ' 9.5512(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.130(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254259(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3939.73', width=5)

width < len (16) in center_string(outstring, ' 7.7608(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018259(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922455(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4365.66', width=5)

width < len (16) in center_string(outstring, ' 9.5295(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027389(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925247(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4362.04', width=5)

width < len (16) in center_string(outstring, ' 9.5137(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036519(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928040(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.67', width=5)

width < len (16) in center_string(outstring, ' 9.4946(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930832(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.57', width=5)

width < len (16) in center_string(outstring, ' 9.4724(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054778(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933640(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3911.42', width=5)

width < len (16) in center_string(outstring, ' 7.6496(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063907(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936432(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4340.21', width=5)

width < len (16) in center_string(outstring, ' 9.4187(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073037(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.510 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM25.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM25.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM52.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM52.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '789.42', width=5)

width < len (9) in center_string(outstring, '311686.19', width=6)

width < len (12) in center_string(outstring, '599742807.13', width=8)

width < len (7) in center_string(outstring, '3078.09', width=6)

width < len (7) in center_string(outstring, '4398.88', width=5)

width < len (16) in center_string(outstring, ' 9.6751(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.860(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253983(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4396.11', width=5)

width < len (16) in center_string(outstring, ' 9.6629(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4392.56', width=5)

width < len (16) in center_string(outstring, ' 9.6473(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026580(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924881(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4388.29', width=5)

width < len (16) in center_string(outstring, ' 9.6285(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035441(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927597(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4383.31', width=5)

width < len (16) in center_string(outstring, ' 9.6067(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044301(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930328(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3939.01', width=5)

width < len (16) in center_string(outstring, ' 7.7579(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053161(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4371.25', width=5)

width < len (16) in center_string(outstring, ' 9.5539(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935791(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4364.19', width=5)

width < len (16) in center_string(outstring, ' 9.5231(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070881(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938522(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790573(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(4.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(8.3)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM52.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM52.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM23.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM23.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 82 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '413.75', width=5)

width < len (8) in center_string(outstring, '85683.02', width=6)

width < len (12) in center_string(outstring, '592516298.38', width=8)

width < len (7) in center_string(outstring, '2325.55', width=6)

width < len (7) in center_string(outstring, '3941.97', width=5)

width < len (16) in center_string(outstring, ' 7.7696(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.147(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254678(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4367.05', width=5)

width < len (16) in center_string(outstring, ' 9.5356(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4364.14', width=5)

width < len (16) in center_string(outstring, ' 9.5229(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027440(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4360.48', width=5)

width < len (16) in center_string(outstring, ' 9.5069(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036586(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928467(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.09', width=5)

width < len (16) in center_string(outstring, ' 9.4878(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045733(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931274(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.95', width=5)

width < len (16) in center_string(outstring, ' 9.4654(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054880(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934067(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.09', width=5)

width < len (16) in center_string(outstring, ' 9.4399(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064026(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.52', width=5)

width < len (16) in center_string(outstring, ' 9.4114(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073173(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939667(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.1)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.500 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM23.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM23.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM1.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM1.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '588.87', width=5)

width < len (9) in center_string(outstring, '173475.58', width=6)

width < len (12) in center_string(outstring, '589667017.58', width=8)

width < len (7) in center_string(outstring, '1454.55', width=6)

width < len (7) in center_string(outstring, '4357.89', width=5)

width < len (16) in center_string(outstring, ' 9.4956(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253909(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.07', width=5)

width < len (16) in center_string(outstring, ' 9.4877(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922119(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.47', width=5)

width < len (16) in center_string(outstring, ' 9.4763(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924927(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.11', width=5)

width < len (16) in center_string(outstring, ' 9.4617(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927750(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.00', width=5)

width < len (16) in center_string(outstring, ' 9.4439(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930557(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.15', width=5)

width < len (16) in center_string(outstring, ' 9.4228(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933380(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.47', width=5)

width < len (16) in center_string(outstring, ' 7.6342(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.26', width=5)

width < len (16) in center_string(outstring, ' 9.3713(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939011(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.4)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.5(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM1.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM1.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM74.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM74.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 37 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1007.86', width=5)

width < len (9) in center_string(outstring, '507988.31', width=6)

width < len (12) in center_string(outstring, '573435260.70', width=8)

width < len (7) in center_string(outstring, '2904.96', width=6)

width < len (7) in center_string(outstring, '3981.32', width=5)

width < len (16) in center_string(outstring, ' 7.9255(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254754(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4410.36', width=5)

width < len (16) in center_string(outstring, ' 9.7257(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922699(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4406.21', width=5)

width < len (16) in center_string(outstring, ' 9.7073(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925262(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '3964.11', width=5)

width < len (16) in center_string(outstring, ' 7.8571(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036857(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927826(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4395.87', width=5)

width < len (16) in center_string(outstring, ' 9.6618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046071(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930389(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4389.70', width=5)

width < len (16) in center_string(outstring, ' 9.6347(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932938(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3942.49', width=5)

width < len (16) in center_string(outstring, ' 7.7716(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064499(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935501(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4375.41', width=5)

width < len (16) in center_string(outstring, ' 9.5721(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073713(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938065(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.260 sec (User: 0.250 sec, System: 0.010 sec)
  Total time: 0.250 sec

Final candidates in binary format are in 'Sband_DM74.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM74.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM27.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM27.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '353.44', width=5)

width < len (8) in center_string(outstring, '62544.75', width=6)

width < len (12) in center_string(outstring, '577847601.67', width=8)

width < len (7) in center_string(outstring, '1856.19', width=6)

width < len (7) in center_string(outstring, '4370.32', width=5)

width < len (16) in center_string(outstring, ' 9.5498(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.121(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252722(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.18', width=5)

width < len (16) in center_string(outstring, ' 9.5405(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018243(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920914(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.26', width=5)

width < len (16) in center_string(outstring, ' 9.5278(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027364(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923706(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.59', width=5)

width < len (16) in center_string(outstring, ' 9.5117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036486(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926498(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '3925.76', width=5)

width < len (16) in center_string(outstring, ' 7.7058(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045607(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929306(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4352.04', width=5)

width < len (16) in center_string(outstring, ' 9.4701(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054729(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932098(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3912.75', width=5)

width < len (16) in center_string(outstring, ' 7.6548(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063850(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934891(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4339.60', width=5)

width < len (16) in center_string(outstring, ' 9.4161(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072972(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937683(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.600 sec (User: 0.590 sec, System: 0.010 sec)
  Total time: 0.600 sec

Final candidates in binary format are in 'Sband_DM27.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM27.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM72.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM72.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1018.40', width=5)

width < len (9) in center_string(outstring, '518670.22', width=6)

width < len (12) in center_string(outstring, '588075835.17', width=8)

width < len (7) in center_string(outstring, '3081.75', width=6)

width < len (7) in center_string(outstring, '4412.54', width=5)

width < len (16) in center_string(outstring, ' 9.7353(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.199(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252434(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4409.25', width=5)

width < len (16) in center_string(outstring, ' 9.7207(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018399(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920380(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '3970.90', width=5)

width < len (16) in center_string(outstring, ' 7.8840(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027598(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922943(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4400.49', width=5)

width < len (16) in center_string(outstring, ' 9.6821(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036797(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925491(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4395.10', width=5)

width < len (16) in center_string(outstring, ' 9.6584(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045996(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4389.05', width=5)

width < len (16) in center_string(outstring, ' 9.6319(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055196(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930603(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4382.35', width=5)

width < len (16) in center_string(outstring, ' 9.6025(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064395(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933167(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3935.39', width=5)

width < len (16) in center_string(outstring, ' 7.7437(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073594(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935715(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(17)', width=10)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM72.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM72.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM75.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM75.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1027.18', width=5)

width < len (9) in center_string(outstring, '527652.56', width=6)

width < len (12) in center_string(outstring, '604225932.49', width=8)

width < len (7) in center_string(outstring, '2945.64', width=6)

width < len (7) in center_string(outstring, '4419.49', width=5)

width < len (16) in center_string(outstring, ' 9.7660(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255689(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4415.68', width=5)

width < len (16) in center_string(outstring, ' 9.7491(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923889(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4411.03', width=5)

width < len (16) in center_string(outstring, ' 9.7286(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926712(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4405.60', width=5)

width < len (16) in center_string(outstring, ' 9.7047(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4399.41', width=5)

width < len (16) in center_string(outstring, ' 9.6774(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932358(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3950.47', width=5)

width < len (16) in center_string(outstring, ' 7.8031(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935181(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4384.77', width=5)

width < len (16) in center_string(outstring, ' 9.6131(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937988(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4376.35', width=5)

width < len (16) in center_string(outstring, ' 9.5762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940811(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.410 sec, System: 0.020 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM75.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM75.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM32.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM32.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 82 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  13%
Amount of optimization complete =  18%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  40%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  59%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  81%
Amount of optimization complete =  86%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '370.43', width=5)

width < len (8) in center_string(outstring, '68693.45', width=6)

width < len (12) in center_string(outstring, '608210663.10', width=8)

width < len (7) in center_string(outstring, '1997.81', width=6)

width < len (7) in center_string(outstring, '4372.50', width=5)

width < len (16) in center_string(outstring, ' 9.5594(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.060(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256154(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4370.33', width=5)

width < len (16) in center_string(outstring, ' 9.5499(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018120(23)', width=12)

width < len (13) in center_string(outstring, ' 0.257674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4367.37', width=5)

width < len (16) in center_string(outstring, ' 9.5370(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027179(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927124(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.68', width=5)

width < len (16) in center_string(outstring, ' 9.5209(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036239(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929901(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.26', width=5)

width < len (16) in center_string(outstring, ' 9.5016(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045299(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932678(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(16)', width=10)

width < len (7) in center_string(outstring, '4354.12', width=5)

width < len (16) in center_string(outstring, ' 9.4792(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054359(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935455(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4348.26', width=5)

width < len (16) in center_string(outstring, ' 9.4537(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063418(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4341.69', width=5)

width < len (16) in center_string(outstring, ' 9.4252(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072478(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941010(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.4)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(7.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.640 sec (User: 0.620 sec, System: 0.020 sec)
  Total time: 0.630 sec

Final candidates in binary format are in 'Sband_DM32.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM32.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM45.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM45.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 72 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '702.88', width=5)

width < len (9) in center_string(outstring, '247118.17', width=6)

width < len (12) in center_string(outstring, '612791087.09', width=8)

width < len (7) in center_string(outstring, '3521.20', width=6)

width < len (7) in center_string(outstring, '4390.07', width=5)

width < len (16) in center_string(outstring, ' 9.6364(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.931(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255949(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4387.54', width=5)

width < len (16) in center_string(outstring, ' 9.6253(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924118(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.24', width=5)

width < len (16) in center_string(outstring, ' 9.6108(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026793(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926865(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4380.21', width=5)

width < len (16) in center_string(outstring, ' 9.5931(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929611(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.46', width=5)

width < len (16) in center_string(outstring, ' 9.5723(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044654(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932358(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4369.99', width=5)

width < len (16) in center_string(outstring, ' 9.5484(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053585(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935104(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4363.83', width=5)

width < len (16) in center_string(outstring, ' 9.5215(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937851(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4356.97', width=5)

width < len (16) in center_string(outstring, ' 9.4916(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071447(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940598(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.7(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.510 sec

Final candidates in binary format are in 'Sband_DM45.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM45.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM12.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM12.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '647.72', width=5)

width < len (9) in center_string(outstring, '209861.25', width=6)

width < len (12) in center_string(outstring, '590759215.35', width=8)

width < len (7) in center_string(outstring, '2773.52', width=6)

width < len (7) in center_string(outstring, '4363.55', width=5)

width < len (16) in center_string(outstring, ' 9.5203(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254189(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.34', width=5)

width < len (16) in center_string(outstring, ' 9.5106(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922394(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.34', width=5)

width < len (16) in center_string(outstring, ' 9.4975(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925201(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '3924.07', width=5)

width < len (16) in center_string(outstring, ' 7.6992(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928024(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(18)', width=10)

width < len (7) in center_string(outstring, '4350.08', width=5)

width < len (16) in center_string(outstring, ' 9.4616(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930832(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4344.83', width=5)

width < len (16) in center_string(outstring, ' 9.4388(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933655(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4338.86', width=5)

width < len (16) in center_string(outstring, ' 9.4128(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936462(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4332.16', width=5)

width < len (16) in center_string(outstring, ' 9.3838(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939285(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.2(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM12.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM12.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM72.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM72.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1012.21', width=5)

width < len (9) in center_string(outstring, '512389.09', width=6)

width < len (12) in center_string(outstring, '602853880.78', width=8)

width < len (7) in center_string(outstring, '3094.32', width=6)

width < len (7) in center_string(outstring, '4411.20', width=5)

width < len (16) in center_string(outstring, ' 9.7294(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254515(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4407.90', width=5)

width < len (16) in center_string(outstring, ' 9.7148(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922455(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3969.08', width=5)

width < len (16) in center_string(outstring, ' 7.8768(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027608(25)', width=12)

width < len (15) in center_string(outstring, ' 166.925018(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4399.12', width=5)

width < len (16) in center_string(outstring, ' 9.6762(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927582(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4393.73', width=5)

width < len (16) in center_string(outstring, ' 9.6524(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046014(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930130(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4387.68', width=5)

width < len (16) in center_string(outstring, ' 9.6259(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932693(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4380.97', width=5)

width < len (16) in center_string(outstring, ' 9.5964(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935242(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4373.61', width=5)

width < len (16) in center_string(outstring, ' 9.5643(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937805(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(9.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(7.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM72.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM72.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM57.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM57.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '842.92', width=5)

width < len (9) in center_string(outstring, '355351.56', width=6)

width < len (12) in center_string(outstring, '568546828.38', width=8)

width < len (7) in center_string(outstring, '3128.65', width=6)

width < len (7) in center_string(outstring, '3962.93', width=5)

width < len (16) in center_string(outstring, ' 7.8524(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.800(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253718(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4390.85', width=5)

width < len (16) in center_string(outstring, ' 9.6398(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017600(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4387.10', width=5)

width < len (16) in center_string(outstring, ' 9.6233(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026400(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924591(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3946.79', width=5)

width < len (16) in center_string(outstring, ' 7.7886(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035200(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4377.49', width=5)

width < len (16) in center_string(outstring, ' 9.5812(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930023(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4371.65', width=5)

width < len (16) in center_string(outstring, ' 9.5557(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052799(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932724(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3926.07', width=5)

width < len (16) in center_string(outstring, ' 7.7070(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061599(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935440(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(18)', width=10)

width < len (7) in center_string(outstring, '4357.92', width=5)

width < len (16) in center_string(outstring, ' 9.4958(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070399(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938156(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.410 sec, System: 0.020 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM57.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM57.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM41.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM41.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '662.79', width=5)

width < len (9) in center_string(outstring, '219740.11', width=6)

width < len (12) in center_string(outstring, '595963968.06', width=8)

width < len (7) in center_string(outstring, '4257.05', width=6)

width < len (7) in center_string(outstring, '4383.87', width=5)

width < len (16) in center_string(outstring, ' 9.6092(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.992(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254733(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.48', width=5)

width < len (16) in center_string(outstring, ' 9.5987(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017984(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.31', width=5)

width < len (16) in center_string(outstring, ' 9.5848(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026976(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.40', width=5)

width < len (16) in center_string(outstring, ' 9.5677(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035968(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928436(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.78', width=5)

width < len (16) in center_string(outstring, ' 9.5475(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044960(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931198(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.43', width=5)

width < len (16) in center_string(outstring, ' 9.5241(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053952(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4358.37', width=5)

width < len (16) in center_string(outstring, ' 9.4977(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062944(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936722(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3913.66', width=5)

width < len (16) in center_string(outstring, ' 7.6584(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071936(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939484(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.440 sec (User: 0.430 sec, System: 0.010 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM41.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM41.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM0.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM0.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '588.21', width=5)

width < len (9) in center_string(outstring, '173087.23', width=6)

width < len (12) in center_string(outstring, '589688565.16', width=8)

width < len (7) in center_string(outstring, '1446.06', width=6)

width < len (7) in center_string(outstring, '4357.88', width=5)

width < len (16) in center_string(outstring, ' 9.4956(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252959(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.06', width=5)

width < len (16) in center_string(outstring, ' 9.4876(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921158(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.45', width=5)

width < len (16) in center_string(outstring, ' 9.4763(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923981(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.09', width=5)

width < len (16) in center_string(outstring, ' 9.4616(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926788(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.98', width=5)

width < len (16) in center_string(outstring, ' 9.4438(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929611(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.13', width=5)

width < len (16) in center_string(outstring, ' 9.4227(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932419(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.24', width=5)

width < len (16) in center_string(outstring, ' 7.6372(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935242(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.23', width=5)

width < len (16) in center_string(outstring, ' 9.3711(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938065(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(8.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.320 sec, System: 0.010 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM0.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM0.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM74.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM74.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1021.79', width=5)

width < len (9) in center_string(outstring, '522129.53', width=6)

width < len (12) in center_string(outstring, '604716981.74', width=8)

width < len (7) in center_string(outstring, '2927.34', width=6)

width < len (7) in center_string(outstring, '3984.06', width=5)

width < len (16) in center_string(outstring, ' 7.9364(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252675(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4415.03', width=5)

width < len (16) in center_string(outstring, ' 9.7463(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920624(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4410.80', width=5)

width < len (16) in center_string(outstring, ' 9.7276(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923187(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4405.89', width=5)

width < len (16) in center_string(outstring, ' 9.7059(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036859(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925751(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4400.31', width=5)

width < len (16) in center_string(outstring, ' 9.6814(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928299(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4394.06', width=5)

width < len (16) in center_string(outstring, ' 9.6539(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4387.15', width=5)

width < len (16) in center_string(outstring, ' 9.6236(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064504(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933426(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4379.60', width=5)

width < len (16) in center_string(outstring, ' 9.5905(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073718(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935989(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM74.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM74.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM6.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM6.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '597.76', width=5)

width < len (9) in center_string(outstring, '178753.27', width=6)

width < len (12) in center_string(outstring, '589442711.23', width=8)

width < len (7) in center_string(outstring, '1776.23', width=6)

width < len (7) in center_string(outstring, '4358.40', width=5)

width < len (16) in center_string(outstring, ' 9.4978(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254316(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.28', width=5)

width < len (16) in center_string(outstring, ' 9.4886(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.37', width=5)

width < len (16) in center_string(outstring, ' 9.4759(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925339(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4349.71', width=5)

width < len (16) in center_string(outstring, ' 9.4600(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.30', width=5)

width < len (16) in center_string(outstring, ' 9.4408(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4340.16', width=5)

width < len (16) in center_string(outstring, ' 9.4185(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933792(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3903.98', width=5)

width < len (16) in center_string(outstring, ' 7.6206(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936600(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4327.68', width=5)

width < len (16) in center_string(outstring, ' 9.3644(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.3)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.460 sec, System: 0.020 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM6.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM6.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM47.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM47.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '716.85', width=5)

width < len (9) in center_string(outstring, '257033.22', width=6)

width < len (12) in center_string(outstring, '598101616.00', width=8)

width < len (7) in center_string(outstring, '3261.96', width=6)

width < len (7) in center_string(outstring, '4392.06', width=5)

width < len (16) in center_string(outstring, ' 9.6451(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.895(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254125(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.45', width=5)

width < len (16) in center_string(outstring, ' 9.6336(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017790(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922287(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.06', width=5)

width < len (16) in center_string(outstring, ' 9.6188(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026685(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3946.01', width=5)

width < len (16) in center_string(outstring, ' 7.7855(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035580(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927765(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4377.13', width=5)

width < len (16) in center_string(outstring, ' 9.5797(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930511(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.61', width=5)

width < len (16) in center_string(outstring, ' 9.5555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053370(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933243(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4365.38', width=5)

width < len (16) in center_string(outstring, ' 9.5283(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062265(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935974(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4358.47', width=5)

width < len (16) in center_string(outstring, ' 9.4981(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071160(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938721(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(9.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.9(2.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM47.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM47.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM36.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM36.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '453.20', width=5)

width < len (9) in center_string(outstring, '102784.43', width=6)

width < len (12) in center_string(outstring, '595437532.15', width=8)

width < len (7) in center_string(outstring, '2664.06', width=6)

width < len (7) in center_string(outstring, '4381.49', width=5)

width < len (16) in center_string(outstring, ' 9.5987(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.042(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253984(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.24', width=5)

width < len (16) in center_string(outstring, ' 9.5889(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018084(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922165(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.21', width=5)

width < len (16) in center_string(outstring, ' 9.5756(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027126(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924942(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4372.44', width=5)

width < len (16) in center_string(outstring, ' 9.5591(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036167(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927719(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4367.94', width=5)

width < len (16) in center_string(outstring, ' 9.5395(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045209(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4362.71', width=5)

width < len (16) in center_string(outstring, ' 9.5166(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054251(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933258(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.77', width=5)

width < len (16) in center_string(outstring, ' 9.4907(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936035(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3912.24', width=5)

width < len (16) in center_string(outstring, ' 7.6528(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072335(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938812(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(8.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.500 sec, System: 0.010 sec)
  Total time: 0.510 sec

Final candidates in binary format are in 'Sband_DM36.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM36.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM63.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM63.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 47 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '914.95', width=5)

width < len (9) in center_string(outstring, '418665.62', width=6)

width < len (12) in center_string(outstring, '591746147.27', width=8)

width < len (7) in center_string(outstring, '3210.09', width=6)

width < len (7) in center_string(outstring, '4408.15', width=5)

width < len (16) in center_string(outstring, ' 9.7159(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029661(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913910(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4408.32', width=5)

width < len (16) in center_string(outstring, ' 9.7166(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00059321(23)', width=12)

width < len (15) in center_string(outstring, ' 166.909790(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4408.47', width=5)

width < len (16) in center_string(outstring, ' 9.7173(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00088982(23)', width=12)

width < len (15) in center_string(outstring, ' 166.905670(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4408.61', width=5)

width < len (16) in center_string(outstring, ' 9.7179(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00118643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.901566(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4408.73', width=5)

width < len (16) in center_string(outstring, ' 9.7184(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00148303(23)', width=12)

width < len (15) in center_string(outstring, ' 166.897446(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '3975.36', width=5)

width < len (16) in center_string(outstring, ' 7.9018(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00177964(25)', width=12)

width < len (15) in center_string(outstring, ' 166.893341(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(17)', width=10)

width < len (7) in center_string(outstring, '3975.30', width=5)

width < len (16) in center_string(outstring, ' 7.9015(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00207625(25)', width=12)

width < len (15) in center_string(outstring, ' 166.889221(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(17)', width=10)

width < len (7) in center_string(outstring, '4408.99', width=5)

width < len (16) in center_string(outstring, ' 9.7196(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00237285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.885101(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.510 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM63.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM63.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM12.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM12.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '650.25', width=5)

width < len (9) in center_string(outstring, '211508.09', width=6)

width < len (12) in center_string(outstring, '590670286.05', width=8)

width < len (7) in center_string(outstring, '2824.00', width=6)

width < len (7) in center_string(outstring, '4363.49', width=5)

width < len (16) in center_string(outstring, ' 9.5200(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251480(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.27', width=5)

width < len (16) in center_string(outstring, ' 9.5104(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919678(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.26', width=5)

width < len (16) in center_string(outstring, ' 9.4972(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922501(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4354.50', width=5)

width < len (16) in center_string(outstring, ' 9.4808(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925323(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4349.98', width=5)

width < len (16) in center_string(outstring, ' 9.4612(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928131(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3912.34', width=5)

width < len (16) in center_string(outstring, ' 7.6532(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930954(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4338.75', width=5)

width < len (16) in center_string(outstring, ' 9.4124(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933762(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4332.04', width=5)

width < len (16) in center_string(outstring, ' 9.3833(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936584(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM12.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM12.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM67.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM67.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 38 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '992.92', width=5)

width < len (9) in center_string(outstring, '493048.06', width=6)

width < len (12) in center_string(outstring, '602244926.17', width=8)

width < len (7) in center_string(outstring, '3349.08', width=6)

width < len (7) in center_string(outstring, '4407.98', width=5)

width < len (16) in center_string(outstring, ' 9.7152(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.823(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253011(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3970.61', width=5)

width < len (16) in center_string(outstring, ' 7.8829(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017646(25)', width=12)

width < len (15) in center_string(outstring, ' 166.920898(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4401.01', width=5)

width < len (16) in center_string(outstring, ' 9.6845(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026469(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923355(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4396.56', width=5)

width < len (16) in center_string(outstring, ' 9.6649(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035291(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925812(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4391.50', width=5)

width < len (16) in center_string(outstring, ' 9.6426(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044114(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928253(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4385.83', width=5)

width < len (16) in center_string(outstring, ' 9.6178(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052937(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930710(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4379.56', width=5)

width < len (16) in center_string(outstring, ' 9.5903(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061760(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933167(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4372.70', width=5)

width < len (16) in center_string(outstring, ' 9.5602(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935608(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM67.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM67.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM1.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM1.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '585.57', width=5)

width < len (9) in center_string(outstring, '171535.42', width=6)

width < len (12) in center_string(outstring, '589578703.19', width=8)

width < len (7) in center_string(outstring, '1442.81', width=6)

width < len (7) in center_string(outstring, '4357.60', width=5)

width < len (16) in center_string(outstring, ' 9.4944(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253844(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.78', width=5)

width < len (16) in center_string(outstring, ' 9.4864(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922043(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.16', width=5)

width < len (16) in center_string(outstring, ' 9.4750(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4349.79', width=5)

width < len (16) in center_string(outstring, ' 9.4604(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927673(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4345.68', width=5)

width < len (16) in center_string(outstring, ' 9.4425(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4340.82', width=5)

width < len (16) in center_string(outstring, ' 9.4214(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.10', width=5)

width < len (16) in center_string(outstring, ' 7.6327(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936127(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4328.92', width=5)

width < len (16) in center_string(outstring, ' 9.3698(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938950(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(4.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.5)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM1.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM1.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM22.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM22.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 77 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '431.32', width=5)

width < len (8) in center_string(outstring, '93105.76', width=6)

width < len (12) in center_string(outstring, '592247001.96', width=8)

width < len (7) in center_string(outstring, '2461.46', width=6)

width < len (7) in center_string(outstring, '4369.03', width=5)

width < len (16) in center_string(outstring, ' 9.5442(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.158(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.98', width=5)

width < len (16) in center_string(outstring, ' 9.5353(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018316(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920700(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4364.13', width=5)

width < len (16) in center_string(outstring, ' 9.5228(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027474(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923492(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.53', width=5)

width < len (16) in center_string(outstring, ' 9.5071(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036633(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926300(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4356.19', width=5)

width < len (16) in center_string(outstring, ' 9.4882(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045791(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929092(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.11', width=5)

width < len (16) in center_string(outstring, ' 9.4661(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054949(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931900(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.30', width=5)

width < len (16) in center_string(outstring, ' 9.4408(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064107(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934708(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '3903.18', width=5)

width < len (16) in center_string(outstring, ' 7.6174(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073265(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937500(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(9.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.530 sec, System: 0.010 sec)
  Total time: 0.540 sec

Final candidates in binary format are in 'Sband_DM22.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM22.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM72.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM72.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1016.37', width=5)

width < len (9) in center_string(outstring, '516602.12', width=6)

width < len (12) in center_string(outstring, '587720416.40', width=8)

width < len (7) in center_string(outstring, '3117.81', width=6)

width < len (7) in center_string(outstring, '4411.76', width=5)

width < len (16) in center_string(outstring, ' 9.7318(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254140(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4408.45', width=5)

width < len (16) in center_string(outstring, ' 9.7172(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4404.38', width=5)

width < len (16) in center_string(outstring, ' 9.6993(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924652(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4399.64', width=5)

width < len (16) in center_string(outstring, ' 9.6784(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3956.51', width=5)

width < len (16) in center_string(outstring, ' 7.8270(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929779(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4388.15', width=5)

width < len (16) in center_string(outstring, ' 9.6279(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932343(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3941.78', width=5)

width < len (16) in center_string(outstring, ' 7.7688(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934906(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4374.03', width=5)

width < len (16) in center_string(outstring, ' 9.5661(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937454(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM72.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM72.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM16.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM16.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '623.18', width=5)

width < len (9) in center_string(outstring, '194269.64', width=6)

width < len (12) in center_string(outstring, '591605497.68', width=8)

width < len (7) in center_string(outstring, '3549.58', width=6)

width < len (7) in center_string(outstring, '4366.69', width=5)

width < len (16) in center_string(outstring, ' 9.5340(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.59', width=5)

width < len (16) in center_string(outstring, ' 9.5248(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922546(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.70', width=5)

width < len (16) in center_string(outstring, ' 9.5122(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925369(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.06', width=5)

width < len (16) in center_string(outstring, ' 9.4963(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928177(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4353.66', width=5)

width < len (16) in center_string(outstring, ' 9.4772(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931000(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.52', width=5)

width < len (16) in center_string(outstring, ' 9.4548(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933823(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.57', width=5)

width < len (16) in center_string(outstring, ' 7.6385(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936630(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4336.04', width=5)

width < len (16) in center_string(outstring, ' 9.4006(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939453(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.520 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM16.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM16.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM42.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM42.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '702.75', width=5)

width < len (9) in center_string(outstring, '247023.30', width=6)

width < len (12) in center_string(outstring, '611353542.14', width=8)

width < len (7) in center_string(outstring, '4145.70', width=6)

width < len (7) in center_string(outstring, '4384.77', width=5)

width < len (16) in center_string(outstring, ' 9.6131(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.973(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253573(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4382.30', width=5)

width < len (16) in center_string(outstring, ' 9.6023(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017945(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921753(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4379.04', width=5)

width < len (16) in center_string(outstring, ' 9.5880(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026918(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924500(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4375.06', width=5)

width < len (16) in center_string(outstring, ' 9.5706(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035891(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4370.35', width=5)

width < len (16) in center_string(outstring, ' 9.5500(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044863(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930023(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.93', width=5)

width < len (16) in center_string(outstring, ' 9.5263(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053836(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4358.80', width=5)

width < len (16) in center_string(outstring, ' 9.4996(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062808(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935532(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.97', width=5)

width < len (16) in center_string(outstring, ' 9.4698(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071781(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.380 sec, System: 0.020 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM42.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM42.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM69.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM69.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '991.84', width=5)

width < len (9) in center_string(outstring, '491968.31', width=6)

width < len (12) in center_string(outstring, '602897519.57', width=8)

width < len (7) in center_string(outstring, '3180.18', width=6)

width < len (7) in center_string(outstring, '4410.30', width=5)

width < len (16) in center_string(outstring, ' 9.7254(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.823(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252914(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3972.88', width=5)

width < len (16) in center_string(outstring, ' 7.8919(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017646(25)', width=12)

width < len (15) in center_string(outstring, ' 166.920807(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4403.35', width=5)

width < len (16) in center_string(outstring, ' 9.6948(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026469(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4398.92', width=5)

width < len (16) in center_string(outstring, ' 9.6752(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035291(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925705(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4393.87', width=5)

width < len (16) in center_string(outstring, ' 9.6530(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044114(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928162(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4388.21', width=5)

width < len (16) in center_string(outstring, ' 9.6282(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052937(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4381.94', width=5)

width < len (16) in center_string(outstring, ' 9.6007(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061760(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933060(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4375.09', width=5)

width < len (16) in center_string(outstring, ' 9.5707(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM69.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM69.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM6.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM6.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '601.03', width=5)

width < len (9) in center_string(outstring, '180708.00', width=6)

width < len (12) in center_string(outstring, '589320771.20', width=8)

width < len (7) in center_string(outstring, '1803.84', width=6)

width < len (7) in center_string(outstring, '4358.05', width=5)

width < len (16) in center_string(outstring, ' 9.4963(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.90', width=5)

width < len (16) in center_string(outstring, ' 9.4870(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922424(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4352.97', width=5)

width < len (16) in center_string(outstring, ' 9.4742(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4349.28', width=5)

width < len (16) in center_string(outstring, ' 9.4581(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.85', width=5)

width < len (16) in center_string(outstring, ' 9.4389(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930878(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4339.68', width=5)

width < len (16) in center_string(outstring, ' 9.4164(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933685(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3903.46', width=5)

width < len (16) in center_string(outstring, ' 7.6185(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936508(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4327.15', width=5)

width < len (16) in center_string(outstring, ' 9.3621(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939316(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(4.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM6.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM6.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM82.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM82.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 34 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  12%
Amount of optimization complete =  25%
Amount of optimization complete =  37%
Amount of optimization complete =  50%
Amount of optimization complete =  62%
Amount of optimization complete =  75%
Amount of optimization complete =  87%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1048.76', width=5)

width < len (9) in center_string(outstring, '550053.62', width=6)

width < len (12) in center_string(outstring, '622190016.11', width=8)

width < len (7) in center_string(outstring, '2586.10', width=6)

width < len (7) in center_string(outstring, '4427.44', width=5)

width < len (16) in center_string(outstring, ' 9.8011(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.606(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253393(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4423.73', width=5)

width < len (16) in center_string(outstring, ' 9.7847(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017213(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921524(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4419.26', width=5)

width < len (16) in center_string(outstring, ' 9.7649(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025819(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924194(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4414.09', width=5)

width < len (16) in center_string(outstring, ' 9.7421(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034425(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926865(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4408.25', width=5)

width < len (16) in center_string(outstring, ' 9.7163(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043031(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788589(16)', width=10)

width < len (7) in center_string(outstring, '4401.73', width=5)

width < len (16) in center_string(outstring, ' 9.6876(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051638(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932190(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4394.55', width=5)

width < len (16) in center_string(outstring, ' 9.6560(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060244(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934860(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4386.71', width=5)

width < len (16) in center_string(outstring, ' 9.6216(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068850(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.1)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(7.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.260 sec, System: 0.010 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM82.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM82.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM3.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM3.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '585.19', width=5)

width < len (9) in center_string(outstring, '171316.50', width=6)

width < len (12) in center_string(outstring, '575011655.12', width=8)

width < len (7) in center_string(outstring, '1526.51', width=6)

width < len (7) in center_string(outstring, '4357.91', width=5)

width < len (16) in center_string(outstring, ' 9.4957(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254992(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.99', width=5)

width < len (16) in center_string(outstring, ' 9.4873(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923203(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4353.28', width=5)

width < len (16) in center_string(outstring, ' 9.4755(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926010(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4349.81', width=5)

width < len (16) in center_string(outstring, ' 9.4604(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928833(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3918.69', width=5)

width < len (16) in center_string(outstring, ' 7.6781(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931641(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3912.77', width=5)

width < len (16) in center_string(outstring, ' 7.6549(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934464(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4334.97', width=5)

width < len (16) in center_string(outstring, ' 9.3960(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937271(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4328.56', width=5)

width < len (16) in center_string(outstring, ' 9.3682(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940094(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM3.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM3.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM35.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM35.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 81 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  13%
Amount of optimization complete =  18%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  40%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  59%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  81%
Amount of optimization complete =  86%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '414.51', width=5)

width < len (8) in center_string(outstring, '85994.69', width=6)

width < len (12) in center_string(outstring, '594183658.84', width=8)

width < len (7) in center_string(outstring, '2331.38', width=6)

width < len (7) in center_string(outstring, '4375.98', width=5)

width < len (16) in center_string(outstring, ' 9.5746(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.048(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254567(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4373.76', width=5)

width < len (16) in center_string(outstring, ' 9.5649(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018096(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922745(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(16)', width=10)

width < len (7) in center_string(outstring, '4370.76', width=5)

width < len (16) in center_string(outstring, ' 9.5518(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027144(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925522(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3935.94', width=5)

width < len (16) in center_string(outstring, ' 7.7458(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036192(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928299(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(17)', width=10)

width < len (7) in center_string(outstring, '4362.56', width=5)

width < len (16) in center_string(outstring, ' 9.5160(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045240(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931076(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4357.37', width=5)

width < len (16) in center_string(outstring, ' 9.4934(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933853(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4351.47', width=5)

width < len (16) in center_string(outstring, ' 9.4676(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063337(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936630(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4344.85', width=5)

width < len (16) in center_string(outstring, ' 9.4389(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072385(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939407(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.480 sec, System: 0.020 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM35.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM35.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM58.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM58.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '858.07', width=5)

width < len (9) in center_string(outstring, '368236.91', width=6)

width < len (12) in center_string(outstring, '568794073.26', width=8)

width < len (7) in center_string(outstring, '3169.13', width=6)

width < len (7) in center_string(outstring, '4395.50', width=5)

width < len (16) in center_string(outstring, ' 9.6602(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.787(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254000(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3959.24', width=5)

width < len (16) in center_string(outstring, ' 7.8378(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017573(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.71', width=5)

width < len (16) in center_string(outstring, ' 9.6304(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026360(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.22', width=5)

width < len (16) in center_string(outstring, ' 9.6107(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035146(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927582(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3941.47', width=5)

width < len (16) in center_string(outstring, ' 7.7676(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043933(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930283(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4373.17', width=5)

width < len (16) in center_string(outstring, ' 9.5623(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052719(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932999(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4366.62', width=5)

width < len (16) in center_string(outstring, ' 9.5337(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061506(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '3919.21', width=5)

width < len (16) in center_string(outstring, ' 7.6801(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070293(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938416(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.580 sec (User: 0.570 sec, System: 0.010 sec)
  Total time: 0.580 sec

Final candidates in binary format are in 'Sband_DM58.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM58.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM71.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM71.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '998.71', width=5)

width < len (9) in center_string(outstring, '498813.34', width=6)

width < len (12) in center_string(outstring, '572499130.90', width=8)

width < len (7) in center_string(outstring, '3093.17', width=6)

width < len (7) in center_string(outstring, '4410.42', width=5)

width < len (16) in center_string(outstring, ' 9.7259(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.951(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251299(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4407.12', width=5)

width < len (16) in center_string(outstring, ' 9.7114(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017902(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919296(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4403.08', width=5)

width < len (16) in center_string(outstring, ' 9.6936(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4398.37', width=5)

width < len (16) in center_string(outstring, ' 9.6728(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035804(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924454(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3955.85', width=5)

width < len (16) in center_string(outstring, ' 7.8244(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044755(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927032(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(17)', width=10)

width < len (7) in center_string(outstring, '3948.78', width=5)

width < len (16) in center_string(outstring, ' 7.7964(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053706(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929611(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '3941.23', width=5)

width < len (16) in center_string(outstring, ' 7.7667(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062657(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932190(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4372.96', width=5)

width < len (16) in center_string(outstring, ' 9.5614(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071608(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934769(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.350 sec, System: 0.020 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM71.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM71.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM77.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM77.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1032.41', width=5)

width < len (9) in center_string(outstring, '533038.44', width=6)

width < len (12) in center_string(outstring, '604638474.66', width=8)

width < len (7) in center_string(outstring, '2851.34', width=6)

width < len (7) in center_string(outstring, '4421.00', width=5)

width < len (16) in center_string(outstring, ' 9.7726(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255300(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4417.20', width=5)

width < len (16) in center_string(outstring, ' 9.7558(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923508(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4412.55', width=5)

width < len (16) in center_string(outstring, ' 9.7353(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926331(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4407.13', width=5)

width < len (16) in center_string(outstring, ' 9.7114(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929153(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.94', width=5)

width < len (16) in center_string(outstring, ' 9.6841(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931961(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3951.64', width=5)

width < len (16) in center_string(outstring, ' 7.8077(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934784(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(17)', width=10)

width < len (7) in center_string(outstring, '4386.31', width=5)

width < len (16) in center_string(outstring, ' 9.6198(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937607(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4377.88', width=5)

width < len (16) in center_string(outstring, ' 9.5829(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940430(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(8.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.8(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.1)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM77.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM77.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM81.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM81.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 39 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1037.57', width=5)

width < len (9) in center_string(outstring, '538379.50', width=6)

width < len (12) in center_string(outstring, '605938860.24', width=8)

width < len (7) in center_string(outstring, '2570.18', width=6)

width < len (7) in center_string(outstring, '4426.41', width=5)

width < len (16) in center_string(outstring, ' 9.7965(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254872(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4422.43', width=5)

width < len (16) in center_string(outstring, ' 9.7789(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923080(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4417.59', width=5)

width < len (16) in center_string(outstring, ' 9.7575(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925903(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4411.97', width=5)

width < len (16) in center_string(outstring, ' 9.7328(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928726(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4405.59', width=5)

width < len (16) in center_string(outstring, ' 9.7046(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931534(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3955.50', width=5)

width < len (16) in center_string(outstring, ' 7.8230(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934357(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(17)', width=10)

width < len (7) in center_string(outstring, '4390.58', width=5)

width < len (16) in center_string(outstring, ' 9.6386(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937180(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4381.96', width=5)

width < len (16) in center_string(outstring, ' 9.6008(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940002(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(7.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.360 sec, System: 0.020 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM81.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM81.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM79.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM79.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1028.28', width=5)

width < len (9) in center_string(outstring, '528779.19', width=6)

width < len (12) in center_string(outstring, '604676321.34', width=8)

width < len (7) in center_string(outstring, '2668.53', width=6)

width < len (7) in center_string(outstring, '4421.48', width=5)

width < len (16) in center_string(outstring, ' 9.7747(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255923(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4417.58', width=5)

width < len (16) in center_string(outstring, ' 9.7575(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924133(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4412.83', width=5)

width < len (16) in center_string(outstring, ' 9.7365(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926956(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4407.30', width=5)

width < len (16) in center_string(outstring, ' 9.7122(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929764(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4401.01', width=5)

width < len (16) in center_string(outstring, ' 9.6845(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932587(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3951.69', width=5)

width < len (16) in center_string(outstring, ' 7.8079(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935410(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4386.18', width=5)

width < len (16) in center_string(outstring, ' 9.6193(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4377.67', width=5)

width < len (16) in center_string(outstring, ' 9.5820(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.320 sec, System: 0.010 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM79.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM79.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM27.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM27.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 90 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  13%
Amount of optimization complete =  18%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  40%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  59%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  81%
Amount of optimization complete =  86%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '354.77', width=5)

width < len (8) in center_string(outstring, '63015.61', width=6)

width < len (12) in center_string(outstring, '592473211.42', width=8)

width < len (7) in center_string(outstring, '1868.62', width=6)

width < len (7) in center_string(outstring, '4369.81', width=5)

width < len (16) in center_string(outstring, ' 9.5476(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.117(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253278(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4367.68', width=5)

width < len (16) in center_string(outstring, ' 9.5383(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018233(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921478(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4364.77', width=5)

width < len (16) in center_string(outstring, ' 9.5256(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027350(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924271(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.10', width=5)

width < len (16) in center_string(outstring, ' 9.5096(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927063(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.71', width=5)

width < len (16) in center_string(outstring, ' 9.4905(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929855(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.58', width=5)

width < len (16) in center_string(outstring, ' 9.4681(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054699(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932648(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3912.24', width=5)

width < len (16) in center_string(outstring, ' 7.6528(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063816(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935440(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4339.16', width=5)

width < len (16) in center_string(outstring, ' 9.4142(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072933(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.530 sec, System: 0.010 sec)
  Total time: 0.540 sec

Final candidates in binary format are in 'Sband_DM27.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM27.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM42.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM42.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '683.91', width=5)

width < len (9) in center_string(outstring, '233957.75', width=6)

width < len (12) in center_string(outstring, '596099293.83', width=8)

width < len (7) in center_string(outstring, '4248.99', width=6)

width < len (7) in center_string(outstring, '4384.29', width=5)

width < len (16) in center_string(outstring, ' 9.6110(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.960(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253681(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4381.85', width=5)

width < len (16) in center_string(outstring, ' 9.6003(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017921(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921860(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.62', width=5)

width < len (16) in center_string(outstring, ' 9.5862(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026881(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.66', width=5)

width < len (16) in center_string(outstring, ' 9.5688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927399(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.98', width=5)

width < len (16) in center_string(outstring, ' 9.5484(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044802(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930161(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3928.69', width=5)

width < len (16) in center_string(outstring, ' 7.7173(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053762(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932922(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(18)', width=10)

width < len (7) in center_string(outstring, '4358.47', width=5)

width < len (16) in center_string(outstring, ' 9.4981(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935684(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.66', width=5)

width < len (16) in center_string(outstring, ' 9.4685(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071683(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938446(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM42.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM42.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM52.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM52.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '782.03', width=5)

width < len (9) in center_string(outstring, '305880.16', width=6)

width < len (12) in center_string(outstring, '599134852.86', width=8)

width < len (7) in center_string(outstring, '3062.09', width=6)

width < len (7) in center_string(outstring, '4395.44', width=5)

width < len (16) in center_string(outstring, ' 9.6600(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252412(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4392.77', width=5)

width < len (16) in center_string(outstring, ' 9.6482(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920364(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3955.52', width=5)

width < len (16) in center_string(outstring, ' 7.8231(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922928(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4385.28', width=5)

width < len (16) in center_string(outstring, ' 9.6153(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925491(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4380.53', width=5)

width < len (16) in center_string(outstring, ' 9.5945(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928055(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4375.11', width=5)

width < len (16) in center_string(outstring, ' 9.5708(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4369.04', width=5)

width < len (16) in center_string(outstring, ' 9.5443(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933182(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4362.33', width=5)

width < len (16) in center_string(outstring, ' 9.5150(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935730(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (13) in center_string(outstring, '0.0(6.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.5(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM52.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM52.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM34.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM34.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 92 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '406.42', width=5)

width < len (8) in center_string(outstring, '82677.07', width=6)

width < len (12) in center_string(outstring, '578980414.99', width=8)

width < len (7) in center_string(outstring, '2280.11', width=6)

width < len (7) in center_string(outstring, '4374.13', width=5)

width < len (16) in center_string(outstring, ' 9.5665(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256218(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4372.07', width=5)

width < len (16) in center_string(outstring, ' 9.5575(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924164(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4369.29', width=5)

width < len (16) in center_string(outstring, ' 9.5453(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926727(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (7) in center_string(outstring, '4365.83', width=5)

width < len (16) in center_string(outstring, ' 9.5303(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036857(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4361.72', width=5)

width < len (16) in center_string(outstring, ' 9.5123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931854(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4356.95', width=5)

width < len (16) in center_string(outstring, ' 9.4915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934402(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3917.83', width=5)

width < len (16) in center_string(outstring, ' 7.6747(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936966(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(18)', width=10)

width < len (7) in center_string(outstring, '3911.00', width=5)

width < len (16) in center_string(outstring, ' 7.6480(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939529(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(3.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.650 sec (User: 0.640 sec, System: 0.010 sec)
  Total time: 0.650 sec

Final candidates in binary format are in 'Sband_DM34.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM34.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM11.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM11.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 60 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '642.92', width=5)

width < len (9) in center_string(outstring, '206766.58', width=6)

width < len (12) in center_string(outstring, '590592936.79', width=8)

width < len (7) in center_string(outstring, '2700.27', width=6)

width < len (7) in center_string(outstring, '3937.26', width=5)

width < len (16) in center_string(outstring, ' 7.7510(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252742(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4360.05', width=5)

width < len (16) in center_string(outstring, ' 9.5050(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920944(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4357.04', width=5)

width < len (16) in center_string(outstring, ' 9.4919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923767(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4353.28', width=5)

width < len (16) in center_string(outstring, ' 9.4756(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926575(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4348.78', width=5)

width < len (16) in center_string(outstring, ' 9.4560(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929398(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4343.54', width=5)

width < len (16) in center_string(outstring, ' 9.4332(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932205(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4337.56', width=5)

width < len (16) in center_string(outstring, ' 9.4072(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935028(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4330.86', width=5)

width < len (16) in center_string(outstring, ' 9.3782(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937851(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(3.4)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.430 sec, System: 0.020 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM11.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM11.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM83.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM83.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 36 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  12%
Amount of optimization complete =  25%
Amount of optimization complete =  37%
Amount of optimization complete =  50%
Amount of optimization complete =  62%
Amount of optimization complete =  75%
Amount of optimization complete =  87%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1047.88', width=5)

width < len (9) in center_string(outstring, '549121.44', width=6)

width < len (12) in center_string(outstring, '606631889.17', width=8)

width < len (7) in center_string(outstring, '2584.94', width=6)

width < len (7) in center_string(outstring, '4427.37', width=5)

width < len (16) in center_string(outstring, ' 9.8008(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.603(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253772(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4423.67', width=5)

width < len (16) in center_string(outstring, ' 9.7845(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017207(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921906(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4419.21', width=5)

width < len (16) in center_string(outstring, ' 9.7647(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025810(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4414.06', width=5)

width < len (16) in center_string(outstring, ' 9.7420(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034413(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927246(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4408.23', width=5)

width < len (16) in center_string(outstring, ' 9.7162(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043017(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929901(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4401.72', width=5)

width < len (16) in center_string(outstring, ' 9.6876(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051620(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932571(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3950.93', width=5)

width < len (16) in center_string(outstring, ' 7.8049(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060223(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935226(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4386.73', width=5)

width < len (16) in center_string(outstring, ' 9.6217(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068827(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937897(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.8)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.310 sec (User: 0.300 sec, System: 0.010 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM83.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM83.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM71.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM71.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1001.43', width=5)

width < len (9) in center_string(outstring, '501529.59', width=6)

width < len (12) in center_string(outstring, '602932641.83', width=8)

width < len (7) in center_string(outstring, '3081.31', width=6)

width < len (7) in center_string(outstring, '4411.58', width=5)

width < len (16) in center_string(outstring, ' 9.7310(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254706(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4408.25', width=5)

width < len (16) in center_string(outstring, ' 9.7164(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922653(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3969.33', width=5)

width < len (16) in center_string(outstring, ' 7.8778(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027608(25)', width=12)

width < len (15) in center_string(outstring, ' 166.925217(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4399.43', width=5)

width < len (16) in center_string(outstring, ' 9.6775(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927765(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4394.01', width=5)

width < len (16) in center_string(outstring, ' 9.6537(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046014(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930328(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4387.93', width=5)

width < len (16) in center_string(outstring, ' 9.6270(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932877(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4381.20', width=5)

width < len (16) in center_string(outstring, ' 9.5975(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935440(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4373.82', width=5)

width < len (16) in center_string(outstring, ' 9.5652(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938004(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM71.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM71.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM44.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM44.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '707.98', width=5)

width < len (9) in center_string(outstring, '250709.45', width=6)

width < len (12) in center_string(outstring, '597698553.20', width=8)

width < len (7) in center_string(outstring, '3757.60', width=6)

width < len (7) in center_string(outstring, '4389.97', width=5)

width < len (16) in center_string(outstring, ' 9.6359(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.935(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253636(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4387.48', width=5)

width < len (16) in center_string(outstring, ' 9.6250(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017870(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921814(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3950.11', width=5)

width < len (16) in center_string(outstring, ' 7.8017(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026805(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924561(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4380.23', width=5)

width < len (16) in center_string(outstring, ' 9.5932(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035741(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.52', width=5)

width < len (16) in center_string(outstring, ' 9.5726(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930054(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4370.09', width=5)

width < len (16) in center_string(outstring, ' 9.5489(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053611(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932800(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4363.97', width=5)

width < len (16) in center_string(outstring, ' 9.5221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062546(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935547(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4357.15', width=5)

width < len (16) in center_string(outstring, ' 9.4924(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071481(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938293(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(8.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM44.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM44.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM37.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM37.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 64 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '514.08', width=5)

width < len (9) in center_string(outstring, '132228.67', width=6)

width < len (12) in center_string(outstring, '610440336.40', width=8)

width < len (7) in center_string(outstring, '3185.97', width=6)

width < len (7) in center_string(outstring, '4381.04', width=5)

width < len (16) in center_string(outstring, ' 9.5967(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.019(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253598(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4378.71', width=5)

width < len (16) in center_string(outstring, ' 9.5865(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921783(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.59', width=5)

width < len (16) in center_string(outstring, ' 9.5729(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027058(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.74', width=5)

width < len (16) in center_string(outstring, ' 9.5561(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036078(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927322(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.16', width=5)

width < len (16) in center_string(outstring, ' 9.5361(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045097(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930084(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4361.87', width=5)

width < len (16) in center_string(outstring, ' 9.5129(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054117(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932846(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.85', width=5)

width < len (16) in center_string(outstring, ' 9.4867(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063136(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935623(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4349.14', width=5)

width < len (16) in center_string(outstring, ' 9.4575(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072156(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.530 sec, System: 0.010 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM37.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM37.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM59.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM59.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '887.56', width=5)

width < len (9) in center_string(outstring, '393980.69', width=6)

width < len (12) in center_string(outstring, '614470989.23', width=8)

width < len (7) in center_string(outstring, '3304.81', width=6)

width < len (7) in center_string(outstring, '4397.78', width=5)

width < len (16) in center_string(outstring, ' 9.6702(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.777(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253717(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4394.73', width=5)

width < len (16) in center_string(outstring, ' 9.6568(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4390.91', width=5)

width < len (16) in center_string(outstring, ' 9.6400(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026332(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4386.38', width=5)

width < len (16) in center_string(outstring, ' 9.6202(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035109(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927292(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4381.16', width=5)

width < len (16) in center_string(outstring, ' 9.5973(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043887(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929993(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4375.25', width=5)

width < len (16) in center_string(outstring, ' 9.5714(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052664(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932709(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4368.66', width=5)

width < len (16) in center_string(outstring, ' 9.5426(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061441(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935410(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4361.40', width=5)

width < len (16) in center_string(outstring, ' 9.5109(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070218(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM59.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM59.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM36.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM36.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 73 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '441.16', width=5)

width < len (8) in center_string(outstring, '97401.00', width=6)

width < len (12) in center_string(outstring, '595315528.92', width=8)

width < len (7) in center_string(outstring, '2535.44', width=6)

width < len (7) in center_string(outstring, '4380.95', width=5)

width < len (16) in center_string(outstring, ' 9.5964(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.038(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253972(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4378.72', width=5)

width < len (16) in center_string(outstring, ' 9.5866(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.70', width=5)

width < len (16) in center_string(outstring, ' 9.5734(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027115(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924927(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.95', width=5)

width < len (16) in center_string(outstring, ' 9.5570(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036153(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927704(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4367.46', width=5)

width < len (16) in center_string(outstring, ' 9.5374(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045191(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930481(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4362.25', width=5)

width < len (16) in center_string(outstring, ' 9.5146(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054230(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933243(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3918.79', width=5)

width < len (16) in center_string(outstring, ' 7.6785(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063268(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936020(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4349.68', width=5)

width < len (16) in center_string(outstring, ' 9.4599(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072306(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938797(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(3.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.610 sec (User: 0.590 sec, System: 0.020 sec)
  Total time: 0.600 sec

Final candidates in binary format are in 'Sband_DM36.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM36.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM73.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM73.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1007.86', width=5)

width < len (9) in center_string(outstring, '507993.94', width=6)

width < len (12) in center_string(outstring, '588124461.46', width=8)

width < len (7) in center_string(outstring, '2964.02', width=6)

width < len (7) in center_string(outstring, '4413.43', width=5)

width < len (16) in center_string(outstring, ' 9.7392(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254238(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4410.09', width=5)

width < len (16) in center_string(outstring, ' 9.7244(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922180(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4406.00', width=5)

width < len (16) in center_string(outstring, ' 9.7064(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924744(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4401.23', width=5)

width < len (16) in center_string(outstring, ' 9.6854(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927307(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3957.67', width=5)

width < len (16) in center_string(outstring, ' 7.8316(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929871(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4389.68', width=5)

width < len (16) in center_string(outstring, ' 9.6346(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932434(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3942.88', width=5)

width < len (16) in center_string(outstring, ' 7.7732(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4375.51', width=5)

width < len (16) in center_string(outstring, ' 9.5725(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937561(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.9)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.320 sec, System: 0.010 sec)
  Total time: 0.330 sec

Final candidates in binary format are in 'Sband_DM73.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM73.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM20.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM20.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '501.47', width=5)

width < len (9) in center_string(outstring, '125827.44', width=6)

width < len (12) in center_string(outstring, '592425936.05', width=8)

width < len (7) in center_string(outstring, '3096.57', width=6)

width < len (7) in center_string(outstring, '4368.99', width=5)

width < len (16) in center_string(outstring, ' 9.5440(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.187(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255519(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '3938.48', width=5)

width < len (16) in center_string(outstring, ' 7.7558(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018375(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923721(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4363.98', width=5)

width < len (16) in center_string(outstring, ' 9.5222(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.32', width=5)

width < len (16) in center_string(outstring, ' 9.5062(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036750(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929337(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4355.92', width=5)

width < len (16) in center_string(outstring, ' 9.4870(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045937(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932144(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.78', width=5)

width < len (16) in center_string(outstring, ' 9.4646(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055124(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934952(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.90', width=5)

width < len (16) in center_string(outstring, ' 9.4391(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064312(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937775(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4338.30', width=5)

width < len (16) in center_string(outstring, ' 9.4104(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073499(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940582(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.500 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM20.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM20.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM65.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM65.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '940.04', width=5)

width < len (9) in center_string(outstring, '441935.69', width=6)

width < len (12) in center_string(outstring, '620897537.29', width=8)

width < len (7) in center_string(outstring, '3221.32', width=6)

width < len (7) in center_string(outstring, '4408.03', width=5)

width < len (16) in center_string(outstring, ' 9.7154(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00014644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916611(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4407.28', width=5)

width < len (16) in center_string(outstring, ' 9.7121(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029288(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915817(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4406.46', width=5)

width < len (16) in center_string(outstring, ' 9.7085(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043933(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915039(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4405.56', width=5)

width < len (16) in center_string(outstring, ' 9.7045(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058577(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914246(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4404.59', width=5)

width < len (16) in center_string(outstring, ' 9.7002(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073221(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913467(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4403.54', width=5)

width < len (16) in center_string(outstring, ' 9.6956(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00087865(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912674(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4402.42', width=5)

width < len (16) in center_string(outstring, ' 9.6906(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00102510(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911880(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4401.21', width=5)

width < len (16) in center_string(outstring, ' 9.6854(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00117154(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911102(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(2.3)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(4.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM65.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM65.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM34.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM34.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 97 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  12%
Amount of optimization complete =  16%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  29%
Amount of optimization complete =  33%
Amount of optimization complete =  37%
Amount of optimization complete =  41%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  58%
Amount of optimization complete =  62%
Amount of optimization complete =  66%
Amount of optimization complete =  70%
Amount of optimization complete =  75%
Amount of optimization complete =  79%
Amount of optimization complete =  83%
Amount of optimization complete =  87%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '396.03', width=5)

width < len (8) in center_string(outstring, '78505.66', width=6)

width < len (12) in center_string(outstring, '593663734.55', width=8)

width < len (7) in center_string(outstring, '2202.69', width=6)

width < len (7) in center_string(outstring, '4373.66', width=5)

width < len (16) in center_string(outstring, ' 9.5645(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.041(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253387(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '3943.88', width=5)

width < len (16) in center_string(outstring, ' 7.7771(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018082(26)', width=12)

width < len (15) in center_string(outstring, ' 166.921570(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(17)', width=10)

width < len (7) in center_string(outstring, '4368.44', width=5)

width < len (16) in center_string(outstring, ' 9.5416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924347(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4364.70', width=5)

width < len (16) in center_string(outstring, ' 9.5253(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036163(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927124(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4360.23', width=5)

width < len (16) in center_string(outstring, ' 9.5058(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045204(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929901(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4355.04', width=5)

width < len (16) in center_string(outstring, ' 9.4832(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054245(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932678(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4349.14', width=5)

width < len (16) in center_string(outstring, ' 9.4575(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935455(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4342.53', width=5)

width < len (16) in center_string(outstring, ' 9.4288(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072326(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938217(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(3.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(3.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.550 sec, System: 0.010 sec)
  Total time: 0.550 sec

Final candidates in binary format are in 'Sband_DM34.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM34.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM17.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM17.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '614.16', width=5)

width < len (9) in center_string(outstring, '188687.98', width=6)

width < len (12) in center_string(outstring, '591364211.67', width=8)

width < len (7) in center_string(outstring, '3544.79', width=6)

width < len (7) in center_string(outstring, '4365.97', width=5)

width < len (16) in center_string(outstring, ' 9.5308(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254301(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.84', width=5)

width < len (16) in center_string(outstring, ' 9.5215(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922501(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4360.90', width=5)

width < len (16) in center_string(outstring, ' 9.5087(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925323(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.22', width=5)

width < len (16) in center_string(outstring, ' 9.4927(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.78', width=5)

width < len (16) in center_string(outstring, ' 9.4734(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930954(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4347.60', width=5)

width < len (16) in center_string(outstring, ' 9.4508(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933777(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3907.46', width=5)

width < len (16) in center_string(outstring, ' 7.6341(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936584(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4335.05', width=5)

width < len (16) in center_string(outstring, ' 9.3963(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939407(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.9)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.430 sec, System: 0.020 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM17.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM17.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM0.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM0.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '591.38', width=5)

width < len (9) in center_string(outstring, '174960.08', width=6)

width < len (12) in center_string(outstring, '589942891.90', width=8)

width < len (7) in center_string(outstring, '1454.90', width=6)

width < len (7) in center_string(outstring, '4358.87', width=5)

width < len (16) in center_string(outstring, ' 9.4999(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254327(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.07', width=5)

width < len (16) in center_string(outstring, ' 9.4920(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.48', width=5)

width < len (16) in center_string(outstring, ' 9.4808(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.14', width=5)

width < len (16) in center_string(outstring, ' 9.4662(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928162(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.06', width=5)

width < len (16) in center_string(outstring, ' 9.4485(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930984(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4342.23', width=5)

width < len (16) in center_string(outstring, ' 9.4275(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933792(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3908.23', width=5)

width < len (16) in center_string(outstring, ' 7.6371(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936615(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4330.38', width=5)

width < len (16) in center_string(outstring, ' 9.3761(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM0.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM0.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM75.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM75.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1030.88', width=5)

width < len (9) in center_string(outstring, '531459.94', width=6)

width < len (12) in center_string(outstring, '589860825.95', width=8)

width < len (7) in center_string(outstring, '2935.74', width=6)

width < len (7) in center_string(outstring, '4420.40', width=5)

width < len (16) in center_string(outstring, ' 9.7700(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.103(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256117(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4416.96', width=5)

width < len (16) in center_string(outstring, ' 9.7548(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018207(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924042(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '3974.31', width=5)

width < len (16) in center_string(outstring, ' 7.8976(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027310(25)', width=12)

width < len (15) in center_string(outstring, ' 166.926575(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(17)', width=10)

width < len (7) in center_string(outstring, '4407.95', width=5)

width < len (16) in center_string(outstring, ' 9.7150(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036413(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929108(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4402.46', width=5)

width < len (16) in center_string(outstring, ' 9.6908(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045517(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931641(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4396.32', width=5)

width < len (16) in center_string(outstring, ' 9.6638(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054620(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934174(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3946.56', width=5)

width < len (16) in center_string(outstring, ' 7.7877(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063723(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936691(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4382.12', width=5)

width < len (16) in center_string(outstring, ' 9.6015(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072827(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.310 sec, System: 0.010 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM75.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM75.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM69.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM69.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 38 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '982.41', width=5)

width < len (9) in center_string(outstring, '482662.16', width=6)

width < len (12) in center_string(outstring, '617604911.33', width=8)

width < len (7) in center_string(outstring, '3131.32', width=6)

width < len (7) in center_string(outstring, '4410.00', width=5)

width < len (16) in center_string(outstring, ' 9.7241(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.711(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253560(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4406.64', width=5)

width < len (16) in center_string(outstring, ' 9.7092(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921707(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4402.51', width=5)

width < len (16) in center_string(outstring, ' 9.6910(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026133(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924408(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4397.68', width=5)

width < len (16) in center_string(outstring, ' 9.6698(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927094(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4392.16', width=5)

width < len (16) in center_string(outstring, ' 9.6455(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929794(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4385.95', width=5)

width < len (16) in center_string(outstring, ' 9.6183(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052266(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932480(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.07', width=5)

width < len (16) in center_string(outstring, ' 9.5881(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060977(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935181(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4371.53', width=5)

width < len (16) in center_string(outstring, ' 9.5551(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069688(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937866(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM69.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM69.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM38.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM38.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '528.58', width=5)

width < len (9) in center_string(outstring, '139787.22', width=6)

width < len (12) in center_string(outstring, '610542379.83', width=8)

width < len (7) in center_string(outstring, '3310.79', width=6)

width < len (7) in center_string(outstring, '4381.51', width=5)

width < len (16) in center_string(outstring, ' 9.5988(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.019(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252401(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.15', width=5)

width < len (16) in center_string(outstring, ' 9.5885(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018039(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920578(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.00', width=5)

width < len (16) in center_string(outstring, ' 9.5747(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027058(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923355(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4372.12', width=5)

width < len (16) in center_string(outstring, ' 9.5577(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036078(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926117(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.51', width=5)

width < len (16) in center_string(outstring, ' 9.5376(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045097(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928894(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4362.18', width=5)

width < len (16) in center_string(outstring, ' 9.5143(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054117(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931656(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.14', width=5)

width < len (16) in center_string(outstring, ' 9.4880(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063136(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934418(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.39', width=5)

width < len (16) in center_string(outstring, ' 9.4586(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072156(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937195(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM38.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM38.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM29.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM29.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 87 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '352.17', width=5)

width < len (8) in center_string(outstring, '62097.43', width=6)

width < len (12) in center_string(outstring, '593079390.16', width=8)

width < len (7) in center_string(outstring, '1865.16', width=6)

width < len (7) in center_string(outstring, '4371.74', width=5)

width < len (16) in center_string(outstring, ' 9.5561(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.110(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255151(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4369.60', width=5)

width < len (16) in center_string(outstring, ' 9.5467(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018221(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923340(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4366.66', width=5)

width < len (16) in center_string(outstring, ' 9.5339(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027331(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926132(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3932.15', width=5)

width < len (16) in center_string(outstring, ' 7.7309(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036441(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928925(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4358.57', width=5)

width < len (16) in center_string(outstring, ' 9.4986(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045552(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931717(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.42', width=5)

width < len (16) in center_string(outstring, ' 9.4761(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054662(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934509(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4347.54', width=5)

width < len (16) in center_string(outstring, ' 9.4506(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063773(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937302(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.96', width=5)

width < len (16) in center_string(outstring, ' 9.4220(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072883(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940094(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(9.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.4)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(6.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.610 sec (User: 0.600 sec, System: 0.010 sec)
  Total time: 0.600 sec

Final candidates in binary format are in 'Sband_DM29.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM29.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM79.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM79.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1030.69', width=5)

width < len (9) in center_string(outstring, '531265.88', width=6)

width < len (12) in center_string(outstring, '605000307.92', width=8)

width < len (7) in center_string(outstring, '2708.52', width=6)

width < len (7) in center_string(outstring, '4422.66', width=5)

width < len (16) in center_string(outstring, ' 9.7800(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255509(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4418.75', width=5)

width < len (16) in center_string(outstring, ' 9.7627(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923721(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4413.98', width=5)

width < len (16) in center_string(outstring, ' 9.7416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926529(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4408.43', width=5)

width < len (16) in center_string(outstring, ' 9.7171(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929352(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4402.12', width=5)

width < len (16) in center_string(outstring, ' 9.6893(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932175(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3953.15', width=5)

width < len (16) in center_string(outstring, ' 7.8137(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934998(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4387.25', width=5)

width < len (16) in center_string(outstring, ' 9.6240(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937820(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4378.71', width=5)

width < len (16) in center_string(outstring, ' 9.5866(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.2(4.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.270 sec, System: 0.010 sec)
  Total time: 0.280 sec

Final candidates in binary format are in 'Sband_DM79.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM79.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM51.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM51.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '760.67', width=5)

width < len (9) in center_string(outstring, '289404.06', width=6)

width < len (12) in center_string(outstring, '599051400.04', width=8)

width < len (7) in center_string(outstring, '3028.27', width=6)

width < len (7) in center_string(outstring, '3964.09', width=5)

width < len (16) in center_string(outstring, ' 7.8570(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256429(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(17)', width=10)

width < len (7) in center_string(outstring, '4391.93', width=5)

width < len (16) in center_string(outstring, ' 9.6445(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924377(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.57', width=5)

width < len (16) in center_string(outstring, ' 9.6298(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926941(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4384.53', width=5)

width < len (16) in center_string(outstring, ' 9.6121(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929489(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.83', width=5)

width < len (16) in center_string(outstring, ' 9.5914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932053(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4374.46', width=5)

width < len (16) in center_string(outstring, ' 9.5680(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055287(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934616(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4368.44', width=5)

width < len (16) in center_string(outstring, ' 9.5416(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937180(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4361.78', width=5)

width < len (16) in center_string(outstring, ' 9.5125(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073716(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(8.0)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM51.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM51.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM11.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM11.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '640.30', width=5)

width < len (9) in center_string(outstring, '205085.92', width=6)

width < len (12) in center_string(outstring, '590608731.60', width=8)

width < len (7) in center_string(outstring, '2591.20', width=6)

width < len (7) in center_string(outstring, '3938.25', width=5)

width < len (16) in center_string(outstring, ' 7.7549(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253064(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4359.90', width=5)

width < len (16) in center_string(outstring, ' 9.5044(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4356.92', width=5)

width < len (16) in center_string(outstring, ' 9.4914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924088(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4353.19', width=5)

width < len (16) in center_string(outstring, ' 9.4751(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036860(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926895(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4348.71', width=5)

width < len (16) in center_string(outstring, ' 9.4556(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929718(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4343.48', width=5)

width < len (16) in center_string(outstring, ' 9.4329(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932541(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4337.53', width=5)

width < len (16) in center_string(outstring, ' 9.4071(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935349(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4330.85', width=5)

width < len (16) in center_string(outstring, ' 9.3782(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073720(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938171(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM11.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM11.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM10.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM10.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '637.77', width=5)

width < len (9) in center_string(outstring, '203466.56', width=6)

width < len (12) in center_string(outstring, '590010590.94', width=8)

width < len (7) in center_string(outstring, '2494.28', width=6)

width < len (7) in center_string(outstring, '4360.40', width=5)

width < len (16) in center_string(outstring, ' 9.5065(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253210(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.28', width=5)

width < len (16) in center_string(outstring, ' 9.4973(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921417(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4355.38', width=5)

width < len (16) in center_string(outstring, ' 9.4847(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924225(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4351.72', width=5)

width < len (16) in center_string(outstring, ' 9.4687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927048(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.32', width=5)

width < len (16) in center_string(outstring, ' 9.4496(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929855(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.33', width=5)

width < len (16) in center_string(outstring, ' 7.6532(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932678(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4336.30', width=5)

width < len (16) in center_string(outstring, ' 9.4017(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935501(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4329.70', width=5)

width < len (16) in center_string(outstring, ' 9.3732(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938309(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM10.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM10.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM37.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM37.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 66 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '486.64', width=5)

width < len (9) in center_string(outstring, '118497.91', width=6)

width < len (12) in center_string(outstring, '610131885.11', width=8)

width < len (7) in center_string(outstring, '2942.28', width=6)

width < len (7) in center_string(outstring, '4379.88', width=5)

width < len (16) in center_string(outstring, ' 9.5917(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.019(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254735(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4377.57', width=5)

width < len (16) in center_string(outstring, ' 9.5816(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018037(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4374.47', width=5)

width < len (16) in center_string(outstring, ' 9.5680(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027056(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4370.63', width=5)

width < len (16) in center_string(outstring, ' 9.5512(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928452(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4366.07', width=5)

width < len (16) in center_string(outstring, ' 9.5313(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045094(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931229(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4360.78', width=5)

width < len (16) in center_string(outstring, ' 9.5082(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054112(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933990(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4354.79', width=5)

width < len (16) in center_string(outstring, ' 9.4821(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063131(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4348.08', width=5)

width < len (16) in center_string(outstring, ' 9.4529(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072150(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939529(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.500 sec, System: 0.010 sec)
  Total time: 0.510 sec

Final candidates in binary format are in 'Sband_DM37.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM37.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM66.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM66.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '980.94', width=5)

width < len (9) in center_string(outstring, '481221.34', width=6)

width < len (12) in center_string(outstring, '601335932.42', width=8)

width < len (7) in center_string(outstring, '3348.32', width=6)

width < len (7) in center_string(outstring, '4406.68', width=5)

width < len (16) in center_string(outstring, ' 9.7094(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.730(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253670(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.33', width=5)

width < len (16) in center_string(outstring, ' 9.6946(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017460(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921814(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4399.21', width=5)

width < len (16) in center_string(outstring, ' 9.6765(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026190(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924515(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.39', width=5)

width < len (16) in center_string(outstring, ' 9.6553(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034920(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927216(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4388.88', width=5)

width < len (16) in center_string(outstring, ' 9.6311(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043651(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929916(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '3942.96', width=5)

width < len (16) in center_string(outstring, ' 7.7735(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052381(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932602(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4375.82', width=5)

width < len (16) in center_string(outstring, ' 9.5739(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061111(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935303(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4368.29', width=5)

width < len (16) in center_string(outstring, ' 9.5410(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069841(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938004(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(4.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.5(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM66.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM66.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM76.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM76.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1034.42', width=5)

width < len (9) in center_string(outstring, '535115.75', width=6)

width < len (12) in center_string(outstring, '604439154.40', width=8)

width < len (7) in center_string(outstring, '2914.15', width=6)

width < len (7) in center_string(outstring, '4420.36', width=5)

width < len (16) in center_string(outstring, ' 9.7698(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255259(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4416.54', width=5)

width < len (16) in center_string(outstring, ' 9.7529(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923462(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4411.87', width=5)

width < len (16) in center_string(outstring, ' 9.7323(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926285(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4406.43', width=5)

width < len (16) in center_string(outstring, ' 9.7083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929108(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4400.22', width=5)

width < len (16) in center_string(outstring, ' 9.6810(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931931(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3950.84', width=5)

width < len (16) in center_string(outstring, ' 7.8046(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934753(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4385.55', width=5)

width < len (16) in center_string(outstring, ' 9.6165(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937561(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4377.11', width=5)

width < len (16) in center_string(outstring, ' 9.5796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940384(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790802(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(3.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.360 sec (User: 0.350 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM76.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM76.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM17.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM17.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '606.58', width=5)

width < len (9) in center_string(outstring, '184063.25', width=6)

width < len (12) in center_string(outstring, '591562469.36', width=8)

width < len (7) in center_string(outstring, '3636.13', width=6)

width < len (7) in center_string(outstring, '4365.81', width=5)

width < len (16) in center_string(outstring, ' 9.5302(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254590(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3935.89', width=5)

width < len (16) in center_string(outstring, ' 7.7456(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018422(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922791(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4360.79', width=5)

width < len (16) in center_string(outstring, ' 9.5083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027633(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925613(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.12', width=5)

width < len (16) in center_string(outstring, ' 9.4923(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928421(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.71', width=5)

width < len (16) in center_string(outstring, ' 9.4730(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4347.55', width=5)

width < len (16) in center_string(outstring, ' 9.4506(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055265(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934052(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.66', width=5)

width < len (16) in center_string(outstring, ' 9.4250(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064476(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936874(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.04', width=5)

width < len (16) in center_string(outstring, ' 9.3963(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073687(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939682(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM17.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM17.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM26.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM26.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 84 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '363.09', width=5)

width < len (8) in center_string(outstring, '66001.78', width=6)

width < len (12) in center_string(outstring, '592551415.07', width=8)

width < len (7) in center_string(outstring, '1932.23', width=6)

width < len (7) in center_string(outstring, '3944.45', width=5)

width < len (16) in center_string(outstring, ' 7.7794(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.129(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254435(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4366.87', width=5)

width < len (16) in center_string(outstring, ' 9.5348(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922638(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.95', width=5)

width < len (16) in center_string(outstring, ' 9.5220(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027387(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925430(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.28', width=5)

width < len (16) in center_string(outstring, ' 9.5060(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036516(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928223(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.87', width=5)

width < len (16) in center_string(outstring, ' 9.4868(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931015(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.73', width=5)

width < len (16) in center_string(outstring, ' 9.4644(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054774(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933823(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.87', width=5)

width < len (16) in center_string(outstring, ' 9.4390(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063903(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4338.29', width=5)

width < len (16) in center_string(outstring, ' 9.4104(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073032(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939407(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.2)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=10)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.550 sec (User: 0.530 sec, System: 0.020 sec)
  Total time: 0.540 sec

Final candidates in binary format are in 'Sband_DM26.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM26.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM50.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM50.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '736.06', width=5)

width < len (9) in center_string(outstring, '270984.41', width=6)

width < len (12) in center_string(outstring, '598493226.96', width=8)

width < len (7) in center_string(outstring, '2964.04', width=6)

width < len (7) in center_string(outstring, '4394.51', width=5)

width < len (16) in center_string(outstring, ' 9.6559(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.884(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254851(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.77', width=5)

width < len (16) in center_string(outstring, ' 9.6438(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017769(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923019(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.26', width=5)

width < len (16) in center_string(outstring, ' 9.6284(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026653(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925751(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.02', width=5)

width < len (16) in center_string(outstring, ' 9.6098(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035538(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928482(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4379.07', width=5)

width < len (16) in center_string(outstring, ' 9.5881(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044422(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931229(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4373.41', width=5)

width < len (16) in center_string(outstring, ' 9.5634(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053307(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4367.06', width=5)

width < len (16) in center_string(outstring, ' 9.5356(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062191(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936691(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3919.38', width=5)

width < len (16) in center_string(outstring, ' 7.6808(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071076(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(8.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.460 sec, System: 0.020 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM50.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM50.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM33.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM33.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 95 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '388.66', width=5)

width < len (8) in center_string(outstring, '75615.12', width=6)

width < len (12) in center_string(outstring, '593433314.09', width=8)

width < len (7) in center_string(outstring, '2163.78', width=6)

width < len (7) in center_string(outstring, '4373.74', width=5)

width < len (16) in center_string(outstring, ' 9.5648(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.052(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253952(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4371.52', width=5)

width < len (16) in center_string(outstring, ' 9.5551(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018103(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922134(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4368.51', width=5)

width < len (16) in center_string(outstring, ' 9.5420(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027155(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924911(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4364.78', width=5)

width < len (16) in center_string(outstring, ' 9.5256(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036206(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927689(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4360.31', width=5)

width < len (16) in center_string(outstring, ' 9.5062(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045258(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930466(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4355.12', width=5)

width < len (16) in center_string(outstring, ' 9.4835(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054309(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933243(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4349.21', width=5)

width < len (16) in center_string(outstring, ' 9.4578(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063361(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936020(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789505(16)', width=10)

width < len (7) in center_string(outstring, '3907.74', width=5)

width < len (16) in center_string(outstring, ' 7.6352(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072412(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938797(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.600 sec (User: 0.590 sec, System: 0.010 sec)
  Total time: 0.590 sec

Final candidates in binary format are in 'Sband_DM33.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM33.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM11.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM11.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 54 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '646.29', width=5)

width < len (9) in center_string(outstring, '208937.44', width=6)

width < len (12) in center_string(outstring, '575560484.37', width=8)

width < len (7) in center_string(outstring, '2609.37', width=6)

width < len (7) in center_string(outstring, '4361.48', width=5)

width < len (16) in center_string(outstring, ' 9.5113(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255292(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4359.30', width=5)

width < len (16) in center_string(outstring, ' 9.5018(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923492(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4356.34', width=5)

width < len (16) in center_string(outstring, ' 9.4888(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926315(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4352.62', width=5)

width < len (16) in center_string(outstring, ' 9.4726(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929123(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3918.64', width=5)

width < len (16) in center_string(outstring, ' 7.6779(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931946(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3912.46', width=5)

width < len (16) in center_string(outstring, ' 7.6537(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934769(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4337.00', width=5)

width < len (16) in center_string(outstring, ' 9.4048(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937576(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4330.34', width=5)

width < len (16) in center_string(outstring, ' 9.3759(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940399(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.450 sec

Final candidates in binary format are in 'Sband_DM11.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM11.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM62.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM62.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '908.72', width=5)

width < len (9) in center_string(outstring, '412984.31', width=6)

width < len (12) in center_string(outstring, '601088359.48', width=8)

width < len (7) in center_string(outstring, '3252.76', width=6)

width < len (7) in center_string(outstring, '4405.49', width=5)

width < len (16) in center_string(outstring, ' 9.7042(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.756(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.36', width=5)

width < len (16) in center_string(outstring, ' 9.6904(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017511(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922379(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4398.45', width=5)

width < len (16) in center_string(outstring, ' 9.6732(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026267(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925095(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4393.85', width=5)

width < len (16) in center_string(outstring, ' 9.6529(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035022(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927795(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4388.54', width=5)

width < len (16) in center_string(outstring, ' 9.6296(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043778(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930496(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4382.54', width=5)

width < len (16) in center_string(outstring, ' 9.6033(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052533(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933197(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.86', width=5)

width < len (16) in center_string(outstring, ' 9.5741(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '3925.31', width=5)

width < len (16) in center_string(outstring, ' 7.7040(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070045(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938614(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.5)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.280 sec (User: 0.270 sec, System: 0.010 sec)
  Total time: 0.270 sec

Final candidates in binary format are in 'Sband_DM62.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM62.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM2.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM2.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 53 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '578.43', width=5)

width < len (9) in center_string(outstring, '167382.03', width=6)

width < len (12) in center_string(outstring, '589774236.00', width=8)

width < len (7) in center_string(outstring, '1468.88', width=6)

width < len (7) in center_string(outstring, '4358.59', width=5)

width < len (16) in center_string(outstring, ' 9.4987(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254128(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.72', width=5)

width < len (16) in center_string(outstring, ' 9.4905(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922333(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.05', width=5)

width < len (16) in center_string(outstring, ' 9.4789(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925140(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.63', width=5)

width < len (16) in center_string(outstring, ' 9.4640(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927963(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.47', width=5)

width < len (16) in center_string(outstring, ' 9.4459(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930786(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.56', width=5)

width < len (16) in center_string(outstring, ' 9.4246(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933594(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.96', width=5)

width < len (16) in center_string(outstring, ' 7.6322(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936417(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.56', width=5)

width < len (16) in center_string(outstring, ' 9.3725(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM2.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM2.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM30.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM30.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 87 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  12%
Amount of optimization complete =  16%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  29%
Amount of optimization complete =  33%
Amount of optimization complete =  37%
Amount of optimization complete =  41%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  58%
Amount of optimization complete =  62%
Amount of optimization complete =  66%
Amount of optimization complete =  70%
Amount of optimization complete =  75%
Amount of optimization complete =  79%
Amount of optimization complete =  83%
Amount of optimization complete =  87%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '358.71', width=5)

width < len (8) in center_string(outstring, '64420.21', width=6)

width < len (12) in center_string(outstring, '608278189.50', width=8)

width < len (7) in center_string(outstring, '1910.67', width=6)

width < len (7) in center_string(outstring, '4372.74', width=5)

width < len (16) in center_string(outstring, ' 9.5604(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.097(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254646(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4370.58', width=5)

width < len (16) in center_string(outstring, ' 9.5510(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018193(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922836(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4367.63', width=5)

width < len (16) in center_string(outstring, ' 9.5381(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925629(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4363.94', width=5)

width < len (16) in center_string(outstring, ' 9.5220(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036386(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928406(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.52', width=5)

width < len (16) in center_string(outstring, ' 9.5027(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045483(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931198(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4354.36', width=5)

width < len (16) in center_string(outstring, ' 9.4802(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054579(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933990(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4348.48', width=5)

width < len (16) in center_string(outstring, ' 9.4547(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4341.89', width=5)

width < len (16) in center_string(outstring, ' 9.4260(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072772(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939560(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.790 sec (User: 0.780 sec, System: 0.010 sec)
  Total time: 0.780 sec

Final candidates in binary format are in 'Sband_DM30.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM30.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM60.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM60.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '887.92', width=5)

width < len (9) in center_string(outstring, '394302.78', width=6)

width < len (12) in center_string(outstring, '599299992.88', width=8)

width < len (7) in center_string(outstring, '3276.87', width=6)

width < len (7) in center_string(outstring, '4397.82', width=5)

width < len (16) in center_string(outstring, ' 9.6704(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252782(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4394.85', width=5)

width < len (16) in center_string(outstring, ' 9.6573(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920731(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4391.14', width=5)

width < len (16) in center_string(outstring, ' 9.6411(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923294(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4386.76', width=5)

width < len (16) in center_string(outstring, ' 9.6218(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925858(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4381.71', width=5)

width < len (16) in center_string(outstring, ' 9.5997(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928406(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3936.24', width=5)

width < len (16) in center_string(outstring, ' 7.7470(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4369.64', width=5)

width < len (16) in center_string(outstring, ' 9.5469(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933533(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4362.64', width=5)

width < len (16) in center_string(outstring, ' 9.5163(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(4.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.9(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM60.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM60.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM54.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM54.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '807.82', width=5)

width < len (9) in center_string(outstring, '326380.41', width=6)

width < len (12) in center_string(outstring, '615543346.44', width=8)

width < len (7) in center_string(outstring, '3147.69', width=6)

width < len (7) in center_string(outstring, '4400.58', width=5)

width < len (16) in center_string(outstring, ' 9.6826(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.802(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252326(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4397.83', width=5)

width < len (16) in center_string(outstring, ' 9.6705(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017604(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920486(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4394.31', width=5)

width < len (16) in center_string(outstring, ' 9.6550(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026405(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923203(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4390.08', width=5)

width < len (16) in center_string(outstring, ' 9.6364(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035207(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925919(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.14', width=5)

width < len (16) in center_string(outstring, ' 9.6147(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044009(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928619(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4379.51', width=5)

width < len (16) in center_string(outstring, ' 9.5901(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931335(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.19', width=5)

width < len (16) in center_string(outstring, ' 9.5624(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061612(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934052(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4366.19', width=5)

width < len (16) in center_string(outstring, ' 9.5318(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070414(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM54.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM54.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM32.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM32.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 81 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '370.15', width=5)

width < len (8) in center_string(outstring, '68592.50', width=6)

width < len (12) in center_string(outstring, '593481366.47', width=8)

width < len (7) in center_string(outstring, '2008.20', width=6)

width < len (7) in center_string(outstring, '4371.29', width=5)

width < len (16) in center_string(outstring, ' 9.5541(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.321(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255863(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '3942.44', width=5)

width < len (16) in center_string(outstring, ' 7.7714(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00016641(26)', width=12)

width < len (13) in center_string(outstring, ' 0.257303(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(17)', width=10)

width < len (7) in center_string(outstring, '4366.70', width=5)

width < len (16) in center_string(outstring, ' 9.5340(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00024962(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926559(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786911(16)', width=10)

width < len (7) in center_string(outstring, '4363.43', width=5)

width < len (16) in center_string(outstring, ' 9.5198(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00033282(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929169(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4359.53', width=5)

width < len (16) in center_string(outstring, ' 9.5027(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00041603(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931763(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4355.00', width=5)

width < len (16) in center_string(outstring, ' 9.4830(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00049923(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934357(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788589(16)', width=10)

width < len (7) in center_string(outstring, '4349.85', width=5)

width < len (16) in center_string(outstring, ' 9.4606(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058244(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936951(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4344.09', width=5)

width < len (16) in center_string(outstring, ' 9.4356(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00066564(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939545(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789886(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.4)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(5.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.600 sec (User: 0.590 sec, System: 0.010 sec)
  Total time: 0.600 sec

Final candidates in binary format are in 'Sband_DM32.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM32.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM9.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM9.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 58 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '628.59', width=5)

width < len (9) in center_string(outstring, '197655.19', width=6)

width < len (12) in center_string(outstring, '590024375.79', width=8)

width < len (7) in center_string(outstring, '2289.19', width=6)

width < len (7) in center_string(outstring, '4360.43', width=5)

width < len (16) in center_string(outstring, ' 9.5067(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253177(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.31', width=5)

width < len (16) in center_string(outstring, ' 9.4974(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921387(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4355.41', width=5)

width < len (16) in center_string(outstring, ' 9.4848(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924194(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4351.75', width=5)

width < len (16) in center_string(outstring, ' 9.4689(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927017(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.35', width=5)

width < len (16) in center_string(outstring, ' 9.4497(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929825(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.53', width=5)

width < len (16) in center_string(outstring, ' 7.6540(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932648(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4336.33', width=5)

width < len (16) in center_string(outstring, ' 9.4019(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935455(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4329.73', width=5)

width < len (16) in center_string(outstring, ' 9.3733(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938278(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM9.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM9.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM21.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM21.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '484.05', width=5)

width < len (9) in center_string(outstring, '117241.64', width=6)

width < len (12) in center_string(outstring, '607258489.81', width=8)

width < len (7) in center_string(outstring, '2915.34', width=6)

width < len (7) in center_string(outstring, '4368.92', width=5)

width < len (16) in center_string(outstring, ' 9.5437(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.175(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255716(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.83', width=5)

width < len (16) in center_string(outstring, ' 9.5346(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018350(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4363.94', width=5)

width < len (16) in center_string(outstring, ' 9.5220(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027525(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926727(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.29', width=5)

width < len (16) in center_string(outstring, ' 9.5061(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036700(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929535(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4355.91', width=5)

width < len (16) in center_string(outstring, ' 9.4870(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045875(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932343(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.78', width=5)

width < len (16) in center_string(outstring, ' 9.4646(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055050(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.92', width=5)

width < len (16) in center_string(outstring, ' 9.4392(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064226(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937958(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.34', width=5)

width < len (16) in center_string(outstring, ' 9.4106(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073401(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940765(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM21.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM21.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM46.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM46.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 61 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '710.27', width=5)

width < len (9) in center_string(outstring, '252338.62', width=6)

width < len (12) in center_string(outstring, '598088564.81', width=8)

width < len (7) in center_string(outstring, '3308.56', width=6)

width < len (7) in center_string(outstring, '4392.05', width=5)

width < len (16) in center_string(outstring, ' 9.6451(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.911(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254614(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.44', width=5)

width < len (16) in center_string(outstring, ' 9.6336(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017822(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922791(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.06', width=5)

width < len (16) in center_string(outstring, ' 9.6188(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026734(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925522(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3945.68', width=5)

width < len (16) in center_string(outstring, ' 7.7842(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035645(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928268(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4377.13', width=5)

width < len (16) in center_string(outstring, ' 9.5796(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044556(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931000(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.60', width=5)

width < len (16) in center_string(outstring, ' 9.5555(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053467(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933746(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4365.37', width=5)

width < len (16) in center_string(outstring, ' 9.5282(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062379(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936493(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4358.44', width=5)

width < len (16) in center_string(outstring, ' 9.4980(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM46.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM46.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM68.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM68.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 39 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '980.71', width=5)

width < len (9) in center_string(outstring, '480992.72', width=6)

width < len (12) in center_string(outstring, '602170154.53', width=8)

width < len (7) in center_string(outstring, '3186.34', width=6)

width < len (7) in center_string(outstring, '4409.79', width=5)

width < len (16) in center_string(outstring, ' 9.7231(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.729(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254729(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4406.45', width=5)

width < len (16) in center_string(outstring, ' 9.7084(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017458(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4402.33', width=5)

width < len (16) in center_string(outstring, ' 9.6903(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026187(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925568(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4397.52', width=5)

width < len (16) in center_string(outstring, ' 9.6691(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034915(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928268(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.02', width=5)

width < len (16) in center_string(outstring, ' 9.6449(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930969(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4385.83', width=5)

width < len (16) in center_string(outstring, ' 9.6178(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052373(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933670(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3938.23', width=5)

width < len (16) in center_string(outstring, ' 7.7548(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061102(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936356(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4371.43', width=5)

width < len (16) in center_string(outstring, ' 9.5547(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069831(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939056(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM68.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM68.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM64.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM64.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '931.43', width=5)

width < len (9) in center_string(outstring, '433876.56', width=6)

width < len (12) in center_string(outstring, '601281447.30', width=8)

width < len (7) in center_string(outstring, '3218.23', width=6)

width < len (7) in center_string(outstring, '4405.84', width=5)

width < len (16) in center_string(outstring, ' 9.7057(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253274(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4402.69', width=5)

width < len (16) in center_string(outstring, ' 9.6918(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921219(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4398.80', width=5)

width < len (16) in center_string(outstring, ' 9.6747(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923782(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4394.23', width=5)

width < len (16) in center_string(outstring, ' 9.6546(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926346(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4388.99', width=5)

width < len (16) in center_string(outstring, ' 9.6316(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928909(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3941.55', width=5)

width < len (16) in center_string(outstring, ' 7.7679(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4376.54', width=5)

width < len (16) in center_string(outstring, ' 9.5771(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934021(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4369.34', width=5)

width < len (16) in center_string(outstring, ' 9.5456(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936584(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.450 sec, System: 0.020 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM64.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM64.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM10.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM10.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '632.45', width=5)

width < len (9) in center_string(outstring, '200086.70', width=6)

width < len (12) in center_string(outstring, '590039445.73', width=8)

width < len (7) in center_string(outstring, '2353.87', width=6)

width < len (7) in center_string(outstring, '4360.50', width=5)

width < len (16) in center_string(outstring, ' 9.5070(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253948(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4358.37', width=5)

width < len (16) in center_string(outstring, ' 9.4977(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4355.45', width=5)

width < len (16) in center_string(outstring, ' 9.4850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4351.78', width=5)

width < len (16) in center_string(outstring, ' 9.4690(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927780(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4347.36', width=5)

width < len (16) in center_string(outstring, ' 9.4498(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930603(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3912.79', width=5)

width < len (16) in center_string(outstring, ' 7.6550(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933411(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4336.31', width=5)

width < len (16) in center_string(outstring, ' 9.4018(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936234(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4329.70', width=5)

width < len (16) in center_string(outstring, ' 9.3732(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939041(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.450 sec

Final candidates in binary format are in 'Sband_DM10.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM10.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM52.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM52.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '784.15', width=5)

width < len (9) in center_string(outstring, '307545.12', width=6)

width < len (12) in center_string(outstring, '599231897.02', width=8)

width < len (7) in center_string(outstring, '3111.77', width=6)

width < len (7) in center_string(outstring, '4395.81', width=5)

width < len (16) in center_string(outstring, ' 9.6616(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253250(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4393.12', width=5)

width < len (16) in center_string(outstring, ' 9.6498(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921204(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3956.26', width=5)

width < len (16) in center_string(outstring, ' 7.8260(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923767(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4385.59', width=5)

width < len (16) in center_string(outstring, ' 9.6167(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926331(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4380.82', width=5)

width < len (16) in center_string(outstring, ' 9.5958(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928894(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4375.38', width=5)

width < len (16) in center_string(outstring, ' 9.5720(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4369.29', width=5)

width < len (16) in center_string(outstring, ' 9.5454(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934006(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4362.56', width=5)

width < len (16) in center_string(outstring, ' 9.5160(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936569(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM52.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM52.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM66.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM66.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '976.98', width=5)

width < len (9) in center_string(outstring, '477342.56', width=6)

width < len (12) in center_string(outstring, '616721773.45', width=8)

width < len (7) in center_string(outstring, '3341.00', width=6)

width < len (7) in center_string(outstring, '4406.83', width=5)

width < len (16) in center_string(outstring, ' 9.7101(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.732(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253722(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.48', width=5)

width < len (16) in center_string(outstring, ' 9.6953(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017463(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4399.35', width=5)

width < len (16) in center_string(outstring, ' 9.6772(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026195(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.53', width=5)

width < len (16) in center_string(outstring, ' 9.6560(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034927(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927261(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4389.02', width=5)

width < len (16) in center_string(outstring, ' 9.6318(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043658(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929962(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4382.82', width=5)

width < len (16) in center_string(outstring, ' 9.6046(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052390(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932663(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4375.95', width=5)

width < len (16) in center_string(outstring, ' 9.5745(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935364(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4368.41', width=5)

width < len (16) in center_string(outstring, ' 9.5415(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938049(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.2)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.540 sec, System: 0.020 sec)
  Total time: 0.560 sec

Final candidates in binary format are in 'Sband_DM66.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM66.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM74.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM74.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 49 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1006.60', width=5)

width < len (9) in center_string(outstring, '506718.06', width=6)

width < len (12) in center_string(outstring, '603215720.29', width=8)

width < len (7) in center_string(outstring, '2913.64', width=6)

width < len (7) in center_string(outstring, '4413.11', width=5)

width < len (16) in center_string(outstring, ' 9.7378(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252566(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4409.72', width=5)

width < len (16) in center_string(outstring, ' 9.7228(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920517(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4405.57', width=5)

width < len (16) in center_string(outstring, ' 9.7045(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923080(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '3963.83', width=5)

width < len (16) in center_string(outstring, ' 7.8560(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036855(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925629(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(17)', width=10)

width < len (7) in center_string(outstring, '4395.26', width=5)

width < len (16) in center_string(outstring, ' 9.6591(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046069(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928192(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4389.10', width=5)

width < len (16) in center_string(outstring, ' 9.6321(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055283(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930756(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4382.29', width=5)

width < len (16) in center_string(outstring, ' 9.6022(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064497(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4374.83', width=5)

width < len (16) in center_string(outstring, ' 9.5696(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073711(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(9.6)x10^-1', width=10)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.340 sec (User: 0.330 sec, System: 0.010 sec)
  Total time: 0.340 sec

Final candidates in binary format are in 'Sband_DM74.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM74.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM43.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM43.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '705.58', width=5)

width < len (9) in center_string(outstring, '249014.91', width=6)

width < len (12) in center_string(outstring, '596701928.20', width=8)

width < len (7) in center_string(outstring, '4034.46', width=6)

width < len (7) in center_string(outstring, '3957.12', width=5)

width < len (16) in center_string(outstring, ' 7.8294(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.969(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252921(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(17)', width=10)

width < len (7) in center_string(outstring, '4383.17', width=5)

width < len (16) in center_string(outstring, ' 9.6061(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017938(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921097(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4379.92', width=5)

width < len (16) in center_string(outstring, ' 9.5918(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026908(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923859(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4375.93', width=5)

width < len (16) in center_string(outstring, ' 9.5744(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035877(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926605(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4371.22', width=5)

width < len (16) in center_string(outstring, ' 9.5538(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929367(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4365.80', width=5)

width < len (16) in center_string(outstring, ' 9.5301(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053815(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932114(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4359.67', width=5)

width < len (16) in center_string(outstring, ' 9.5034(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062784(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4352.84', width=5)

width < len (16) in center_string(outstring, ' 9.4736(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071754(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.420 sec (User: 0.410 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM43.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM43.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM80.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM80.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  11%
Amount of optimization complete =  22%
Amount of optimization complete =  33%
Amount of optimization complete =  44%
Amount of optimization complete =  55%
Amount of optimization complete =  66%
Amount of optimization complete =  77%
Amount of optimization complete =  88%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1031.06', width=5)

width < len (9) in center_string(outstring, '531644.94', width=6)

width < len (12) in center_string(outstring, '605991233.03', width=8)

width < len (7) in center_string(outstring, '2591.00', width=6)

width < len (7) in center_string(outstring, '4425.66', width=5)

width < len (16) in center_string(outstring, ' 9.7932(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253881(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '3984.76', width=5)

width < len (16) in center_string(outstring, ' 7.9392(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(17)', width=10)

width < len (7) in center_string(outstring, '4416.94', width=5)

width < len (16) in center_string(outstring, ' 9.7547(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924896(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4411.38', width=5)

width < len (16) in center_string(outstring, ' 9.7301(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927719(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4405.06', width=5)

width < len (16) in center_string(outstring, ' 9.7023(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930527(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4397.98', width=5)

width < len (16) in center_string(outstring, ' 9.6711(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933350(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4390.16', width=5)

width < len (16) in center_string(outstring, ' 9.6367(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936157(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790115(16)', width=10)

width < len (7) in center_string(outstring, '4381.60', width=5)

width < len (16) in center_string(outstring, ' 9.5992(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938980(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.320 sec, System: 0.010 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM80.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM80.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM41.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM41.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '683.50', width=5)

width < len (9) in center_string(outstring, '233681.27', width=6)

width < len (12) in center_string(outstring, '596259694.61', width=8)

width < len (7) in center_string(outstring, '4353.19', width=6)

width < len (7) in center_string(outstring, '4384.24', width=5)

width < len (16) in center_string(outstring, ' 9.6108(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.964(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254660(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3950.76', width=5)

width < len (16) in center_string(outstring, ' 7.8043(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017929(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922852(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4378.58', width=5)

width < len (16) in center_string(outstring, ' 9.5860(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026893(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925613(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.63', width=5)

width < len (16) in center_string(outstring, ' 9.5687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035857(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928375(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4369.96', width=5)

width < len (16) in center_string(outstring, ' 9.5483(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044821(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.57', width=5)

width < len (16) in center_string(outstring, ' 9.5247(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053786(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933899(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4358.46', width=5)

width < len (16) in center_string(outstring, ' 9.4981(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062750(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936661(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.66', width=5)

width < len (16) in center_string(outstring, ' 9.4685(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071714(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.450 sec

Final candidates in binary format are in 'Sband_DM41.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM41.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM57.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM57.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '847.01', width=5)

width < len (9) in center_string(outstring, '358814.22', width=6)

width < len (12) in center_string(outstring, '583707353.59', width=8)

width < len (7) in center_string(outstring, '3117.17', width=6)

width < len (7) in center_string(outstring, '4395.24', width=5)

width < len (16) in center_string(outstring, ' 9.6591(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.801(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253966(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '3959.23', width=5)

width < len (16) in center_string(outstring, ' 7.8378(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017603(26)', width=12)

width < len (15) in center_string(outstring, ' 166.922119(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.51', width=5)

width < len (16) in center_string(outstring, ' 9.6295(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026404(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924835(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4384.05', width=5)

width < len (16) in center_string(outstring, ' 9.6100(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035205(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927551(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3941.53', width=5)

width < len (16) in center_string(outstring, ' 7.7678(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044006(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930267(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(17)', width=10)

width < len (7) in center_string(outstring, '4373.05', width=5)

width < len (16) in center_string(outstring, ' 9.5618(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052808(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932983(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4366.52', width=5)

width < len (16) in center_string(outstring, ' 9.5333(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4359.32', width=5)

width < len (16) in center_string(outstring, ' 9.5018(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070410(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938400(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(8.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(4.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.360 sec

Final candidates in binary format are in 'Sband_DM57.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM57.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM66.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM66.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '974.50', width=5)

width < len (9) in center_string(outstring, '474919.91', width=6)

width < len (12) in center_string(outstring, '601627420.06', width=8)

width < len (7) in center_string(outstring, '3287.40', width=6)

width < len (7) in center_string(outstring, '4407.92', width=5)

width < len (16) in center_string(outstring, ' 9.7149(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.729(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254393(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4404.55', width=5)

width < len (16) in center_string(outstring, ' 9.7000(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017458(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922546(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4400.41', width=5)

width < len (16) in center_string(outstring, ' 9.6818(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026187(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4395.58', width=5)

width < len (16) in center_string(outstring, ' 9.6606(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034915(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4390.05', width=5)

width < len (16) in center_string(outstring, ' 9.6363(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4383.84', width=5)

width < len (16) in center_string(outstring, ' 9.6090(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052373(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933319(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3936.22', width=5)

width < len (16) in center_string(outstring, ' 7.7469(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061102(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936020(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4369.40', width=5)

width < len (16) in center_string(outstring, ' 9.5458(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069831(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938721(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM66.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM66.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM22.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM22.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 75 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '450.78', width=5)

width < len (9) in center_string(outstring, '101690.20', width=6)

width < len (12) in center_string(outstring, '577038245.27', width=8)

width < len (7) in center_string(outstring, '2613.08', width=6)

width < len (7) in center_string(outstring, '4367.41', width=5)

width < len (16) in center_string(outstring, ' 9.5372(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.160(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254935(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4365.33', width=5)

width < len (16) in center_string(outstring, ' 9.5280(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018320(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4362.45', width=5)

width < len (16) in center_string(outstring, ' 9.5155(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925934(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4358.82', width=5)

width < len (16) in center_string(outstring, ' 9.4997(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928741(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3922.15', width=5)

width < len (16) in center_string(outstring, ' 7.6916(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045800(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931534(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4349.34', width=5)

width < len (16) in center_string(outstring, ' 9.4584(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054960(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934341(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '3909.24', width=5)

width < len (16) in center_string(outstring, ' 7.6411(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064120(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937149(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4336.95', width=5)

width < len (16) in center_string(outstring, ' 9.4046(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939941(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.2)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(6.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM22.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM22.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM80.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM80.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1035.13', width=5)

width < len (9) in center_string(outstring, '535850.75', width=6)

width < len (12) in center_string(outstring, '605372492.56', width=8)

width < len (7) in center_string(outstring, '2647.88', width=6)

width < len (7) in center_string(outstring, '4423.99', width=5)

width < len (16) in center_string(outstring, ' 9.7858(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255874(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4420.08', width=5)

width < len (16) in center_string(outstring, ' 9.7685(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924088(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4415.31', width=5)

width < len (16) in center_string(outstring, ' 9.7475(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926895(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4409.77', width=5)

width < len (16) in center_string(outstring, ' 9.7230(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929718(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4403.46', width=5)

width < len (16) in center_string(outstring, ' 9.6953(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932541(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3954.49', width=5)

width < len (16) in center_string(outstring, ' 7.8190(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935364(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(17)', width=10)

width < len (7) in center_string(outstring, '4388.60', width=5)

width < len (16) in center_string(outstring, ' 9.6299(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938187(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4380.06', width=5)

width < len (16) in center_string(outstring, ' 9.5925(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940994(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.310 sec, System: 0.010 sec)
  Total time: 0.310 sec

Final candidates in binary format are in 'Sband_DM80.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM80.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM15.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM15.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '655.19', width=5)

width < len (9) in center_string(outstring, '214728.86', width=6)

width < len (12) in center_string(outstring, '576698677.52', width=8)

width < len (7) in center_string(outstring, '3544.85', width=6)

width < len (7) in center_string(outstring, '4366.34', width=5)

width < len (16) in center_string(outstring, ' 9.5325(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254928(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.22', width=5)

width < len (16) in center_string(outstring, ' 9.5232(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4361.30', width=5)

width < len (16) in center_string(outstring, ' 9.5105(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925949(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.62', width=5)

width < len (16) in center_string(outstring, ' 9.4944(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928757(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3920.41', width=5)

width < len (16) in center_string(outstring, ' 7.6848(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931580(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3914.22', width=5)

width < len (16) in center_string(outstring, ' 7.6606(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934402(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4342.11', width=5)

width < len (16) in center_string(outstring, ' 9.4270(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937210(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.48', width=5)

width < len (16) in center_string(outstring, ' 9.3982(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940033(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.470 sec, System: 0.000 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM15.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM15.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM65.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM65.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '952.87', width=5)

width < len (9) in center_string(outstring, '454083.31', width=6)

width < len (12) in center_string(outstring, '621138415.74', width=8)

width < len (7) in center_string(outstring, '3258.36', width=6)

width < len (7) in center_string(outstring, '4408.91', width=5)

width < len (16) in center_string(outstring, ' 9.7192(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00014651(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916565(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4408.15', width=5)

width < len (16) in center_string(outstring, ' 9.7159(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029303(23)', width=12)

width < len (15) in center_string(outstring, ' 166.915771(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4407.33', width=5)

width < len (16) in center_string(outstring, ' 9.7123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043954(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914993(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4406.42', width=5)

width < len (16) in center_string(outstring, ' 9.7083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00058605(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914200(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4405.44', width=5)

width < len (16) in center_string(outstring, ' 9.7040(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073256(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913422(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4404.39', width=5)

width < len (16) in center_string(outstring, ' 9.6993(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00087908(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912628(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4403.25', width=5)

width < len (16) in center_string(outstring, ' 9.6943(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00102559(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911850(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4402.04', width=5)

width < len (16) in center_string(outstring, ' 9.6890(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00117210(23)', width=12)

width < len (15) in center_string(outstring, ' 166.911057(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.9)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.500 sec, System: 0.010 sec)
  Total time: 0.510 sec

Final candidates in binary format are in 'Sband_DM65.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM65.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM68.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM68.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '988.47', width=5)

width < len (9) in center_string(outstring, '488634.94', width=6)

width < len (12) in center_string(outstring, '602340251.79', width=8)

width < len (7) in center_string(outstring, '3261.95', width=6)

width < len (7) in center_string(outstring, '4410.42', width=5)

width < len (16) in center_string(outstring, ' 9.7259(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.729(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253911(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4407.08', width=5)

width < len (16) in center_string(outstring, ' 9.7112(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017458(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922058(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4402.97', width=5)

width < len (16) in center_string(outstring, ' 9.6931(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026187(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924759(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.16', width=5)

width < len (16) in center_string(outstring, ' 9.6719(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034915(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927460(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.65', width=5)

width < len (16) in center_string(outstring, ' 9.6477(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930145(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4386.46', width=5)

width < len (16) in center_string(outstring, ' 9.6205(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052373(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932846(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3938.71', width=5)

width < len (16) in center_string(outstring, ' 7.7567(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061102(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935547(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4372.06', width=5)

width < len (16) in center_string(outstring, ' 9.5575(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069831(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^3', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.520 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM68.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM68.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM4.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM4.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '591.53', width=5)

width < len (9) in center_string(outstring, '175046.53', width=6)

width < len (12) in center_string(outstring, '589202831.14', width=8)

width < len (7) in center_string(outstring, '1595.80', width=6)

width < len (7) in center_string(outstring, '4356.81', width=5)

width < len (16) in center_string(outstring, ' 9.4909(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253769(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.83', width=5)

width < len (16) in center_string(outstring, ' 9.4823(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4352.07', width=5)

width < len (16) in center_string(outstring, ' 9.4702(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924789(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4348.55', width=5)

width < len (16) in center_string(outstring, ' 9.4549(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927597(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4344.28', width=5)

width < len (16) in center_string(outstring, ' 9.4364(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930420(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '3910.73', width=5)

width < len (16) in center_string(outstring, ' 7.6469(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933243(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4333.54', width=5)

width < len (16) in center_string(outstring, ' 9.3898(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936050(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4327.09', width=5)

width < len (16) in center_string(outstring, ' 9.3618(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938873(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(6.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.8(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.400 sec

Final candidates in binary format are in 'Sband_DM4.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM4.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM1.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM1.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '583.11', width=5)

width < len (9) in center_string(outstring, '170098.06', width=6)

width < len (12) in center_string(outstring, '589124678.09', width=8)

width < len (7) in center_string(outstring, '1437.18', width=6)

width < len (7) in center_string(outstring, '4355.97', width=5)

width < len (16) in center_string(outstring, ' 9.4873(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.11', width=5)

width < len (16) in center_string(outstring, ' 9.4792(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922882(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4351.47', width=5)

width < len (16) in center_string(outstring, ' 9.4676(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925690(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4348.07', width=5)

width < len (16) in center_string(outstring, ' 9.4529(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928513(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4343.93', width=5)

width < len (16) in center_string(outstring, ' 9.4349(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046053(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931320(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4339.04', width=5)

width < len (16) in center_string(outstring, ' 9.4137(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055263(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934143(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3905.95', width=5)

width < len (16) in center_string(outstring, ' 7.6282(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064474(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936951(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4327.09', width=5)

width < len (16) in center_string(outstring, ' 9.3619(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073684(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939774(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM1.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM1.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM13.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM13.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '659.82', width=5)

width < len (9) in center_string(outstring, '217777.88', width=6)

width < len (12) in center_string(outstring, '590716602.71', width=8)

width < len (7) in center_string(outstring, '3073.30', width=6)

width < len (7) in center_string(outstring, '4363.34', width=5)

width < len (16) in center_string(outstring, ' 9.5194(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253907(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.14', width=5)

width < len (16) in center_string(outstring, ' 9.5098(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018423(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922104(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.14', width=5)

width < len (16) in center_string(outstring, ' 9.4967(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924927(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '3924.19', width=5)

width < len (16) in center_string(outstring, ' 7.6997(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036846(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927734(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4349.88', width=5)

width < len (16) in center_string(outstring, ' 9.4607(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046057(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930557(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4344.64', width=5)

width < len (16) in center_string(outstring, ' 9.4380(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055269(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933365(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4338.67', width=5)

width < len (16) in center_string(outstring, ' 9.4120(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064480(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.97', width=5)

width < len (16) in center_string(outstring, ' 9.3830(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939011(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(3.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.510 sec, System: 0.010 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM13.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM13.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM74.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM74.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1015.31', width=5)

width < len (9) in center_string(outstring, '515529.34', width=6)

width < len (12) in center_string(outstring, '604100860.14', width=8)

width < len (7) in center_string(outstring, '2929.07', width=6)

width < len (7) in center_string(outstring, '3982.85', width=5)

width < len (16) in center_string(outstring, ' 7.9315(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252019(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(17)', width=10)

width < len (7) in center_string(outstring, '4412.45', width=5)

width < len (16) in center_string(outstring, ' 9.7349(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.919968(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4408.29', width=5)

width < len (16) in center_string(outstring, ' 9.7165(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027644(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922531(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4403.46', width=5)

width < len (16) in center_string(outstring, ' 9.6952(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036859(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925095(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4397.95', width=5)

width < len (16) in center_string(outstring, ' 9.6710(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927643(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4391.77', width=5)

width < len (16) in center_string(outstring, ' 9.6438(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930206(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4384.95', width=5)

width < len (16) in center_string(outstring, ' 9.6139(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064504(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4377.47', width=5)

width < len (16) in center_string(outstring, ' 9.5811(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073718(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935333(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.7(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(6.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM74.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM74.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM82.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM82.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 37 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  11%
Amount of optimization complete =  22%
Amount of optimization complete =  33%
Amount of optimization complete =  44%
Amount of optimization complete =  55%
Amount of optimization complete =  66%
Amount of optimization complete =  77%
Amount of optimization complete =  88%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1048.88', width=5)

width < len (9) in center_string(outstring, '550178.62', width=6)

width < len (12) in center_string(outstring, '606501071.79', width=8)

width < len (7) in center_string(outstring, '2593.40', width=6)

width < len (7) in center_string(outstring, '4426.87', width=5)

width < len (16) in center_string(outstring, ' 9.7986(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.605(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254018(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4423.15', width=5)

width < len (16) in center_string(outstring, ' 9.7821(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017210(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922150(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4418.68', width=5)

width < len (16) in center_string(outstring, ' 9.7624(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00025815(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924820(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4413.51', width=5)

width < len (16) in center_string(outstring, ' 9.7395(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927490(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4407.66', width=5)

width < len (16) in center_string(outstring, ' 9.7137(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043024(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930145(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4401.14', width=5)

width < len (16) in center_string(outstring, ' 9.6850(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00051629(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932816(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3951.04', width=5)

width < len (16) in center_string(outstring, ' 7.8054(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060234(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935486(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4386.12', width=5)

width < len (16) in center_string(outstring, ' 9.6190(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00068839(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(7.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.320 sec (User: 0.310 sec, System: 0.010 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM82.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM82.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM22.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM22.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 76 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '435.84', width=5)

width < len (8) in center_string(outstring, '95067.17', width=6)

width < len (12) in center_string(outstring, '606808007.73', width=8)

width < len (7) in center_string(outstring, '2505.51', width=6)

width < len (7) in center_string(outstring, '4367.20', width=5)

width < len (16) in center_string(outstring, ' 9.5362(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.156(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254323(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4365.13', width=5)

width < len (16) in center_string(outstring, ' 9.5272(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018313(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4362.26', width=5)

width < len (16) in center_string(outstring, ' 9.5147(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027469(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925323(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.65', width=5)

width < len (16) in center_string(outstring, ' 9.4989(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036626(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928131(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4354.30', width=5)

width < len (16) in center_string(outstring, ' 9.4800(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045782(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930923(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4349.21', width=5)

width < len (16) in center_string(outstring, ' 9.4578(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054939(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933731(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.39', width=5)

width < len (16) in center_string(outstring, ' 9.4325(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064095(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936523(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4336.85', width=5)

width < len (16) in center_string(outstring, ' 9.4042(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073252(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939331(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.530 sec, System: 0.010 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM22.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM22.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM65.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM65.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '950.91', width=5)

width < len (9) in center_string(outstring, '452209.34', width=6)

width < len (12) in center_string(outstring, '607294043.54', width=8)

width < len (7) in center_string(outstring, '3278.04', width=6)

width < len (7) in center_string(outstring, '3977.44', width=5)

width < len (16) in center_string(outstring, ' 7.9100(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00032364(25)', width=12)

width < len (15) in center_string(outstring, ' 166.913406(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(17)', width=10)

width < len (7) in center_string(outstring, '4410.09', width=5)

width < len (16) in center_string(outstring, ' 9.7244(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064728(23)', width=12)

width < len (15) in center_string(outstring, ' 166.908905(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4410.26', width=5)

width < len (16) in center_string(outstring, ' 9.7252(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00097092(23)', width=12)

width < len (15) in center_string(outstring, ' 166.904419(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(16)', width=10)

width < len (7) in center_string(outstring, '4410.41', width=5)

width < len (16) in center_string(outstring, ' 9.7259(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00129456(23)', width=12)

width < len (15) in center_string(outstring, ' 166.899918(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(16)', width=10)

width < len (7) in center_string(outstring, '4410.54', width=5)

width < len (16) in center_string(outstring, ' 9.7264(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00161820(23)', width=12)

width < len (15) in center_string(outstring, ' 166.895432(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4410.65', width=5)

width < len (16) in center_string(outstring, ' 9.7269(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00194184(23)', width=12)

width < len (15) in center_string(outstring, ' 166.890930(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4410.74', width=5)

width < len (16) in center_string(outstring, ' 9.7273(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00226548(23)', width=12)

width < len (15) in center_string(outstring, ' 166.886429(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(16)', width=10)

width < len (7) in center_string(outstring, '4410.81', width=5)

width < len (16) in center_string(outstring, ' 9.7276(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00258912(23)', width=12)

width < len (15) in center_string(outstring, ' 166.881943(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-2', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(2.1)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.9(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.450 sec, System: 0.010 sec)
  Total time: 0.450 sec

Final candidates in binary format are in 'Sband_DM65.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM65.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM78.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM78.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1040.27', width=5)

width < len (9) in center_string(outstring, '541177.81', width=6)

width < len (12) in center_string(outstring, '604845896.73', width=8)

width < len (7) in center_string(outstring, '2813.51', width=6)

width < len (7) in center_string(outstring, '4422.03', width=5)

width < len (16) in center_string(outstring, ' 9.7772(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256144(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4418.15', width=5)

width < len (16) in center_string(outstring, ' 9.7600(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924347(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4413.41', width=5)

width < len (16) in center_string(outstring, ' 9.7391(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927170(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4407.90', width=5)

width < len (16) in center_string(outstring, ' 9.7148(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929993(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788055(16)', width=10)

width < len (7) in center_string(outstring, '4401.62', width=5)

width < len (16) in center_string(outstring, ' 9.6871(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932816(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3952.38', width=5)

width < len (16) in center_string(outstring, ' 7.8106(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935638(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789352(17)', width=10)

width < len (7) in center_string(outstring, '4386.82', width=5)

width < len (16) in center_string(outstring, ' 9.6221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938446(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4378.32', width=5)

width < len (16) in center_string(outstring, ' 9.5848(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941269(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.300 sec (User: 0.290 sec, System: 0.010 sec)
  Total time: 0.290 sec

Final candidates in binary format are in 'Sband_DM78.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM78.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM44.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM44.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '703.53', width=5)

width < len (9) in center_string(outstring, '247572.73', width=6)

width < len (12) in center_string(outstring, '597364619.99', width=8)

width < len (7) in center_string(outstring, '3806.86', width=6)

width < len (7) in center_string(outstring, '4388.77', width=5)

width < len (16) in center_string(outstring, ' 9.6307(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.935(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254342(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4386.26', width=5)

width < len (16) in center_string(outstring, ' 9.6197(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017870(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922516(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3949.38', width=5)

width < len (16) in center_string(outstring, ' 7.7988(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026805(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925262(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4378.96', width=5)

width < len (16) in center_string(outstring, ' 9.5877(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035741(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928009(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4374.23', width=5)

width < len (16) in center_string(outstring, ' 9.5670(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930756(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4368.79', width=5)

width < len (16) in center_string(outstring, ' 9.5432(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053611(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933502(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4362.64', width=5)

width < len (16) in center_string(outstring, ' 9.5163(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062546(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936249(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4355.81', width=5)

width < len (16) in center_string(outstring, ' 9.4865(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071481(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938995(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM44.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM44.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM75.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM75.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1032.65', width=5)

width < len (9) in center_string(outstring, '533278.62', width=6)

width < len (12) in center_string(outstring, '605123312.66', width=8)

width < len (7) in center_string(outstring, '2929.40', width=6)

width < len (7) in center_string(outstring, '4421.00', width=5)

width < len (16) in center_string(outstring, ' 9.7726(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253083(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4417.52', width=5)

width < len (16) in center_string(outstring, ' 9.7572(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921036(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4413.28', width=5)

width < len (16) in center_string(outstring, ' 9.7385(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923584(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4408.37', width=5)

width < len (16) in center_string(outstring, ' 9.7169(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036856(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926147(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4402.78', width=5)

width < len (16) in center_string(outstring, ' 9.6922(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046070(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928711(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '3953.97', width=5)

width < len (16) in center_string(outstring, ' 7.8170(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055284(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931274(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(17)', width=10)

width < len (7) in center_string(outstring, '4389.61', width=5)

width < len (16) in center_string(outstring, ' 9.6344(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064498(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933838(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4382.05', width=5)

width < len (16) in center_string(outstring, ' 9.6012(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073712(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936386(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(5.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(8.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM75.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM75.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM58.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM58.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '868.02', width=5)

width < len (9) in center_string(outstring, '376829.97', width=6)

width < len (12) in center_string(outstring, '583845063.47', width=8)

width < len (7) in center_string(outstring, '3203.25', width=6)

width < len (7) in center_string(outstring, '4396.21', width=5)

width < len (16) in center_string(outstring, ' 9.6633(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.789(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254917(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4393.21', width=5)

width < len (16) in center_string(outstring, ' 9.6501(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017578(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923080(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4389.44', width=5)

width < len (16) in center_string(outstring, ' 9.6336(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026367(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925781(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3948.76', width=5)

width < len (16) in center_string(outstring, ' 7.7964(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035156(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928497(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '3942.33', width=5)

width < len (16) in center_string(outstring, ' 7.7710(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043945(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931213(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(17)', width=10)

width < len (7) in center_string(outstring, '4373.94', width=5)

width < len (16) in center_string(outstring, ' 9.5657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052735(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933914(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4367.40', width=5)

width < len (16) in center_string(outstring, ' 9.5371(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061524(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936630(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4360.18', width=5)

width < len (16) in center_string(outstring, ' 9.5056(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070313(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939331(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(2.5)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM58.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM58.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM24.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM24.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 88 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '401.15', width=5)

width < len (8) in center_string(outstring, '80548.95', width=6)

width < len (12) in center_string(outstring, '607363781.74', width=8)

width < len (7) in center_string(outstring, '2226.21', width=6)

width < len (7) in center_string(outstring, '4369.35', width=5)

width < len (16) in center_string(outstring, ' 9.5456(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.139(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255166(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4367.23', width=5)

width < len (16) in center_string(outstring, ' 9.5364(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018277(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923355(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4364.32', width=5)

width < len (16) in center_string(outstring, ' 9.5237(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027416(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926163(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.66', width=5)

width < len (16) in center_string(outstring, ' 9.5077(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036555(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928955(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4356.26', width=5)

width < len (16) in center_string(outstring, ' 9.4885(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045693(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931763(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.13', width=5)

width < len (16) in center_string(outstring, ' 9.4662(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054832(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934555(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4345.27', width=5)

width < len (16) in center_string(outstring, ' 9.4407(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937347(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4338.70', width=5)

width < len (16) in center_string(outstring, ' 9.4122(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073110(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940155(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.540 sec, System: 0.020 sec)
  Total time: 0.550 sec

Final candidates in binary format are in 'Sband_DM24.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM24.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM45.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM45.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 70 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '703.81', width=5)

width < len (9) in center_string(outstring, '247768.00', width=6)

width < len (12) in center_string(outstring, '597492484.17', width=8)

width < len (7) in center_string(outstring, '3626.52', width=6)

width < len (7) in center_string(outstring, '4389.90', width=5)

width < len (16) in center_string(outstring, ' 9.6356(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.927(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255266(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4387.39', width=5)

width < len (16) in center_string(outstring, ' 9.6246(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923431(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.10', width=5)

width < len (16) in center_string(outstring, ' 9.6102(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026781(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926178(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4380.09', width=5)

width < len (16) in center_string(outstring, ' 9.5926(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928925(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.35', width=5)

width < len (16) in center_string(outstring, ' 9.5719(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044635(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931671(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4369.91', width=5)

width < len (16) in center_string(outstring, ' 9.5481(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053563(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934418(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '3924.88', width=5)

width < len (16) in center_string(outstring, ' 7.7024(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062490(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937164(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(18)', width=10)

width < len (7) in center_string(outstring, '4356.92', width=5)

width < len (16) in center_string(outstring, ' 9.4914(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071417(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939911(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(1.1)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.5)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM45.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM45.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM19.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM19.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 64 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '556.96', width=5)

width < len (9) in center_string(outstring, '155195.59', width=6)

width < len (12) in center_string(outstring, '606702385.10', width=8)

width < len (7) in center_string(outstring, '3449.66', width=6)

width < len (7) in center_string(outstring, '4366.87', width=5)

width < len (16) in center_string(outstring, ' 9.5348(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253760(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.80', width=5)

width < len (16) in center_string(outstring, ' 9.5257(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921967(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.93', width=5)

width < len (16) in center_string(outstring, ' 9.5132(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924774(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.30', width=5)

width < len (16) in center_string(outstring, ' 9.4974(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927597(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4353.92', width=5)

width < len (16) in center_string(outstring, ' 9.4783(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930405(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.80', width=5)

width < len (16) in center_string(outstring, ' 9.4561(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055218(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933212(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.95', width=5)

width < len (16) in center_string(outstring, ' 9.4306(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936035(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4336.37', width=5)

width < len (16) in center_string(outstring, ' 9.4021(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938843(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.5(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM19.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM19.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM47.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM47.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '708.30', width=5)

width < len (9) in center_string(outstring, '250937.41', width=6)

width < len (12) in center_string(outstring, '583029030.53', width=8)

width < len (7) in center_string(outstring, '3293.08', width=6)

width < len (7) in center_string(outstring, '3960.65', width=5)

width < len (16) in center_string(outstring, ' 7.8434(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.908(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255105(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(17)', width=10)

width < len (7) in center_string(outstring, '4389.07', width=5)

width < len (16) in center_string(outstring, ' 9.6320(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017817(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923279(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4385.68', width=5)

width < len (16) in center_string(outstring, ' 9.6171(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026725(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926010(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4381.56', width=5)

width < len (16) in center_string(outstring, ' 9.5990(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035634(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928757(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4376.72', width=5)

width < len (16) in center_string(outstring, ' 9.5778(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044542(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931503(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.17', width=5)

width < len (16) in center_string(outstring, ' 9.5536(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053451(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934235(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4364.93', width=5)

width < len (16) in center_string(outstring, ' 9.5263(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062359(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936981(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3917.80', width=5)

width < len (16) in center_string(outstring, ' 7.6746(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071268(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939713(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM47.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM47.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM7.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM7.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '603.99', width=5)

width < len (9) in center_string(outstring, '182496.91', width=6)

width < len (12) in center_string(outstring, '574532225.15', width=8)

width < len (7) in center_string(outstring, '1925.78', width=6)

width < len (7) in center_string(outstring, '4357.33', width=5)

width < len (16) in center_string(outstring, ' 9.4932(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255544(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.19', width=5)

width < len (16) in center_string(outstring, ' 9.4838(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923752(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4352.26', width=5)

width < len (16) in center_string(outstring, ' 9.4711(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926559(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4348.58', width=5)

width < len (16) in center_string(outstring, ' 9.4551(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929382(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3915.52', width=5)

width < len (16) in center_string(outstring, ' 7.6656(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932190(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(18)', width=10)

width < len (7) in center_string(outstring, '3909.40', width=5)

width < len (16) in center_string(outstring, ' 7.6417(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935013(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4333.10', width=5)

width < len (16) in center_string(outstring, ' 9.3879(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937836(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4326.48', width=5)

width < len (16) in center_string(outstring, ' 9.3592(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940643(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM7.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM7.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM66.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM66.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '964.64', width=5)

width < len (9) in center_string(outstring, '465362.38', width=6)

width < len (12) in center_string(outstring, '616786190.07', width=8)

width < len (7) in center_string(outstring, '3275.20', width=6)

width < len (7) in center_string(outstring, '4407.00', width=5)

width < len (16) in center_string(outstring, ' 9.7108(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.732(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255902(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.66', width=5)

width < len (16) in center_string(outstring, ' 9.6961(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017463(23)', width=12)

width < len (13) in center_string(outstring, ' 0.257386(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4399.56', width=5)

width < len (16) in center_string(outstring, ' 9.6781(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026195(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926743(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.76', width=5)

width < len (16) in center_string(outstring, ' 9.6569(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034927(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929443(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4389.26', width=5)

width < len (16) in center_string(outstring, ' 9.6328(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043658(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932144(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4383.08', width=5)

width < len (16) in center_string(outstring, ' 9.6057(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052390(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934845(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4376.22', width=5)

width < len (16) in center_string(outstring, ' 9.5757(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937531(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4368.70', width=5)

width < len (16) in center_string(outstring, ' 9.5428(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940231(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.4)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(4.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.7)x10^2', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM66.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM66.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM73.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM73.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1014.47', width=5)

width < len (9) in center_string(outstring, '514670.31', width=6)

width < len (12) in center_string(outstring, '618352433.11', width=8)

width < len (7) in center_string(outstring, '3016.83', width=6)

width < len (7) in center_string(outstring, '4412.36', width=5)

width < len (16) in center_string(outstring, ' 9.7345(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255908(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4409.04', width=5)

width < len (16) in center_string(outstring, ' 9.7198(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923859(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4404.98', width=5)

width < len (16) in center_string(outstring, ' 9.7019(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027645(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926422(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4400.23', width=5)

width < len (16) in center_string(outstring, ' 9.6810(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928970(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4394.82', width=5)

width < len (16) in center_string(outstring, ' 9.6572(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046076(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931534(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4388.74', width=5)

width < len (16) in center_string(outstring, ' 9.6305(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055291(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934097(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4382.01', width=5)

width < len (16) in center_string(outstring, ' 9.6010(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064506(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936661(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4374.63', width=5)

width < len (16) in center_string(outstring, ' 9.5687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073721(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(2.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.360 sec (User: 0.350 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM73.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM73.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM26.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM26.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 76 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '368.79', width=5)

width < len (8) in center_string(outstring, '68086.95', width=6)

width < len (12) in center_string(outstring, '607789676.42', width=8)

width < len (7) in center_string(outstring, '1978.17', width=6)

width < len (7) in center_string(outstring, '4370.73', width=5)

width < len (16) in center_string(outstring, ' 9.5516(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.129(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253599(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.65', width=5)

width < len (16) in center_string(outstring, ' 9.5426(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018257(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921799(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.78', width=5)

width < len (16) in center_string(outstring, ' 9.5300(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027386(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924591(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4362.17', width=5)

width < len (16) in center_string(outstring, ' 9.5143(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036514(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927383(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4357.81', width=5)

width < len (16) in center_string(outstring, ' 9.4953(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930176(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4352.72', width=5)

width < len (16) in center_string(outstring, ' 9.4731(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054772(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932983(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4346.91', width=5)

width < len (16) in center_string(outstring, ' 9.4478(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063900(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935776(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4340.38', width=5)

width < len (16) in center_string(outstring, ' 9.4195(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073029(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938568(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.2(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(4.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(4.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.510 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM26.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM26.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM3.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM3.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '585.39', width=5)

width < len (9) in center_string(outstring, '171434.80', width=6)

width < len (12) in center_string(outstring, '589732538.67', width=8)

width < len (7) in center_string(outstring, '1532.28', width=6)

width < len (7) in center_string(outstring, '4358.75', width=5)

width < len (16) in center_string(outstring, ' 9.4994(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254645(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.80', width=5)

width < len (16) in center_string(outstring, ' 9.4908(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922852(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786224(16)', width=10)

width < len (7) in center_string(outstring, '4354.06', width=5)

width < len (16) in center_string(outstring, ' 9.4789(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.56', width=5)

width < len (16) in center_string(outstring, ' 9.4637(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928482(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.32', width=5)

width < len (16) in center_string(outstring, ' 9.4453(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931305(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.34', width=5)

width < len (16) in center_string(outstring, ' 9.4236(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934113(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.31', width=5)

width < len (16) in center_string(outstring, ' 7.6297(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936935(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.19', width=5)

width < len (16) in center_string(outstring, ' 9.3709(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939758(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(8.9)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.5(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM3.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM3.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM70.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM70.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  12%
Amount of optimization complete =  25%
Amount of optimization complete =  37%
Amount of optimization complete =  50%
Amount of optimization complete =  62%
Amount of optimization complete =  75%
Amount of optimization complete =  87%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1000.30', width=5)

width < len (9) in center_string(outstring, '500395.91', width=6)

width < len (12) in center_string(outstring, '602381883.48', width=8)

width < len (7) in center_string(outstring, '3176.69', width=6)

width < len (7) in center_string(outstring, '4409.58', width=5)

width < len (16) in center_string(outstring, ' 9.7222(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254945(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4406.26', width=5)

width < len (16) in center_string(outstring, ' 9.7076(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922897(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3967.28', width=5)

width < len (16) in center_string(outstring, ' 7.8697(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027608(25)', width=12)

width < len (15) in center_string(outstring, ' 166.925446(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4397.45', width=5)

width < len (16) in center_string(outstring, ' 9.6688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928009(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.04', width=5)

width < len (16) in center_string(outstring, ' 9.6450(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046014(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930557(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4385.97', width=5)

width < len (16) in center_string(outstring, ' 9.6184(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933121(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.25', width=5)

width < len (16) in center_string(outstring, ' 9.5889(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935684(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4371.88', width=5)

width < len (16) in center_string(outstring, ' 9.5567(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.0)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.0)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(9.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM70.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM70.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM50.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM50.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 46 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '747.56', width=5)

width < len (9) in center_string(outstring, '279519.56', width=6)

width < len (12) in center_string(outstring, '598842977.02', width=8)

width < len (7) in center_string(outstring, '2982.67', width=6)

width < len (7) in center_string(outstring, '4394.26', width=5)

width < len (16) in center_string(outstring, ' 9.6548(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252286(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '3958.37', width=5)

width < len (16) in center_string(outstring, ' 7.8344(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(26)', width=12)

width < len (15) in center_string(outstring, ' 166.920227(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(17)', width=10)

width < len (7) in center_string(outstring, '4388.21', width=5)

width < len (16) in center_string(outstring, ' 9.6282(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922791(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4384.14', width=5)

width < len (16) in center_string(outstring, ' 9.6103(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4379.40', width=5)

width < len (16) in center_string(outstring, ' 9.5896(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927917(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4374.00', width=5)

width < len (16) in center_string(outstring, ' 9.5660(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930481(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4367.95', width=5)

width < len (16) in center_string(outstring, ' 9.5395(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933029(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4361.26', width=5)

width < len (16) in center_string(outstring, ' 9.5103(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935593(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(3.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM50.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM50.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM60.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM60.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '888.60', width=5)

width < len (9) in center_string(outstring, '394906.84', width=6)

width < len (12) in center_string(outstring, '599467105.50', width=8)

width < len (7) in center_string(outstring, '3283.80', width=6)

width < len (7) in center_string(outstring, '4398.40', width=5)

width < len (16) in center_string(outstring, ' 9.6730(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.768(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254877(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3960.78', width=5)

width < len (16) in center_string(outstring, ' 7.8439(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017537(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923035(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4391.44', width=5)

width < len (16) in center_string(outstring, ' 9.6424(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026305(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925735(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4386.88', width=5)

width < len (16) in center_string(outstring, ' 9.6224(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035074(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928436(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4381.62', width=5)

width < len (16) in center_string(outstring, ' 9.5993(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043842(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4375.68', width=5)

width < len (16) in center_string(outstring, ' 9.5733(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052611(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933853(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4369.05', width=5)

width < len (16) in center_string(outstring, ' 9.5443(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061379(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936554(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4361.76', width=5)

width < len (16) in center_string(outstring, ' 9.5125(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070148(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939270(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM60.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM60.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM54.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM54.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '812.72', width=5)

width < len (9) in center_string(outstring, '330353.66', width=6)

width < len (12) in center_string(outstring, '615765096.61', width=8)

width < len (7) in center_string(outstring, '3092.47', width=6)

width < len (7) in center_string(outstring, '4401.69', width=5)

width < len (16) in center_string(outstring, ' 9.6874(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.850(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253714(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4398.86', width=5)

width < len (16) in center_string(outstring, ' 9.6750(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017700(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921875(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4395.26', width=5)

width < len (16) in center_string(outstring, ' 9.6591(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026550(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924606(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4390.93', width=5)

width < len (16) in center_string(outstring, ' 9.6402(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035400(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927322(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.90', width=5)

width < len (16) in center_string(outstring, ' 9.6181(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044250(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930054(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4380.16', width=5)

width < len (16) in center_string(outstring, ' 9.5929(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053100(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932785(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.73', width=5)

width < len (16) in center_string(outstring, ' 9.5648(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061950(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935501(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4366.62', width=5)

width < len (16) in center_string(outstring, ' 9.5337(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070800(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938232(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790573(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.6)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(6.4)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM54.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM54.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM44.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM44.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 69 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '706.99', width=5)

width < len (9) in center_string(outstring, '250014.12', width=6)

width < len (12) in center_string(outstring, '597562425.90', width=8)

width < len (7) in center_string(outstring, '3708.07', width=6)

width < len (7) in center_string(outstring, '4389.55', width=5)

width < len (16) in center_string(outstring, ' 9.6341(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.935(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4387.05', width=5)

width < len (16) in center_string(outstring, ' 9.6231(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017870(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923309(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3949.38', width=5)

width < len (16) in center_string(outstring, ' 7.7988(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026805(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926056(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4379.77', width=5)

width < len (16) in center_string(outstring, ' 9.5912(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035741(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928802(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4375.05', width=5)

width < len (16) in center_string(outstring, ' 9.5706(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044676(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931549(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4369.62', width=5)

width < len (16) in center_string(outstring, ' 9.5468(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053611(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934296(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4363.49', width=5)

width < len (16) in center_string(outstring, ' 9.5200(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062546(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937042(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4356.65', width=5)

width < len (16) in center_string(outstring, ' 9.4902(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071481(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939789(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(8.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM44.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM44.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM37.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM37.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '498.05', width=5)

width < len (9) in center_string(outstring, '124117.11', width=6)

width < len (12) in center_string(outstring, '610273512.24', width=8)

width < len (7) in center_string(outstring, '3037.01', width=6)

width < len (7) in center_string(outstring, '4380.43', width=5)

width < len (16) in center_string(outstring, ' 9.5941(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.019(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254621(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4378.10', width=5)

width < len (16) in center_string(outstring, ' 9.5839(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018037(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922806(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4374.99', width=5)

width < len (16) in center_string(outstring, ' 9.5703(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027056(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925568(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4371.14', width=5)

width < len (16) in center_string(outstring, ' 9.5535(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036075(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928345(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4366.57', width=5)

width < len (16) in center_string(outstring, ' 9.5335(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045094(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931107(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4361.27', width=5)

width < len (16) in center_string(outstring, ' 9.5104(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054112(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933884(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4355.27', width=5)

width < len (16) in center_string(outstring, ' 9.4842(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063131(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936646(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4348.55', width=5)

width < len (16) in center_string(outstring, ' 9.4550(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072150(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939423(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.540 sec (User: 0.520 sec, System: 0.020 sec)
  Total time: 0.530 sec

Final candidates in binary format are in 'Sband_DM37.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM37.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM7.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM7.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '606.36', width=5)

width < len (9) in center_string(outstring, '183928.16', width=6)

width < len (12) in center_string(outstring, '589044761.53', width=8)

width < len (7) in center_string(outstring, '1886.87', width=6)

width < len (7) in center_string(outstring, '4357.01', width=5)

width < len (16) in center_string(outstring, ' 9.4918(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254490(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.87', width=5)

width < len (16) in center_string(outstring, ' 9.4825(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4351.95', width=5)

width < len (16) in center_string(outstring, ' 9.4697(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925507(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4348.27', width=5)

width < len (16) in center_string(outstring, ' 9.4537(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928329(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4343.84', width=5)

width < len (16) in center_string(outstring, ' 9.4345(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931152(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4338.68', width=5)

width < len (16) in center_string(outstring, ' 9.4121(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3902.50', width=5)

width < len (16) in center_string(outstring, ' 7.6147(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936783(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4326.18', width=5)

width < len (16) in center_string(outstring, ' 9.3579(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939590(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM7.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM7.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM49.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM49.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 56 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '732.01', width=5)

width < len (9) in center_string(outstring, '268017.50', width=6)

width < len (12) in center_string(outstring, '598486953.17', width=8)

width < len (7) in center_string(outstring, '3043.28', width=6)

width < len (7) in center_string(outstring, '4393.71', width=5)

width < len (16) in center_string(outstring, ' 9.6523(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.897(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254238(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.04', width=5)

width < len (16) in center_string(outstring, ' 9.6406(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017795(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922409(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4387.60', width=5)

width < len (16) in center_string(outstring, ' 9.6255(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026692(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925140(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3947.07', width=5)

width < len (16) in center_string(outstring, ' 7.7897(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035589(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927887(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4378.55', width=5)

width < len (16) in center_string(outstring, ' 9.5859(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044486(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.96', width=5)

width < len (16) in center_string(outstring, ' 9.5614(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053384(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933350(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4366.67', width=5)

width < len (16) in center_string(outstring, ' 9.5339(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062281(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936096(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4359.70', width=5)

width < len (16) in center_string(outstring, ' 9.5035(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071178(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938828(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.4(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(8.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(5.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.8(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.620 sec (User: 0.610 sec, System: 0.010 sec)
  Total time: 0.610 sec

Final candidates in binary format are in 'Sband_DM49.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM49.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM58.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM58.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '849.34', width=5)

width < len (9) in center_string(outstring, '360783.47', width=6)

width < len (12) in center_string(outstring, '603527802.46', width=8)

width < len (7) in center_string(outstring, '3099.65', width=6)

width < len (7) in center_string(outstring, '4397.32', width=5)

width < len (16) in center_string(outstring, ' 9.6682(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00016590(23)', width=12)

width < len (15) in center_string(outstring, ' 166.916122(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4397.17', width=5)

width < len (16) in center_string(outstring, ' 9.6676(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00033179(23)', width=12)

width < len (15) in center_string(outstring, ' 166.914261(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785538(16)', width=10)

width < len (7) in center_string(outstring, '4397.02', width=5)

width < len (16) in center_string(outstring, ' 9.6669(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00049769(23)', width=12)

width < len (15) in center_string(outstring, ' 166.912399(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4396.84', width=5)

width < len (16) in center_string(outstring, ' 9.6661(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00066359(23)', width=12)

width < len (15) in center_string(outstring, ' 166.910538(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785614(16)', width=10)

width < len (7) in center_string(outstring, '4396.66', width=5)

width < len (16) in center_string(outstring, ' 9.6653(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00082948(23)', width=12)

width < len (15) in center_string(outstring, ' 166.908691(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '3965.43', width=5)

width < len (16) in center_string(outstring, ' 7.8623(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00099538(26)', width=12)

width < len (15) in center_string(outstring, ' 166.906830(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(17)', width=10)

width < len (7) in center_string(outstring, '4396.24', width=5)

width < len (16) in center_string(outstring, ' 9.6635(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00116128(23)', width=12)

width < len (15) in center_string(outstring, ' 166.904968(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4396.02', width=5)

width < len (16) in center_string(outstring, ' 9.6625(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00132717(23)', width=12)

width < len (15) in center_string(outstring, ' 166.903107(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.9)x10^-1', width=10)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM58.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM58.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM71.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM71.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1001.60', width=5)

width < len (9) in center_string(outstring, '501697.53', width=6)

width < len (12) in center_string(outstring, '587355437.83', width=8)

width < len (7) in center_string(outstring, '3148.66', width=6)

width < len (7) in center_string(outstring, '4410.54', width=5)

width < len (16) in center_string(outstring, ' 9.7265(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254059(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4407.21', width=5)

width < len (16) in center_string(outstring, ' 9.7117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922012(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4403.12', width=5)

width < len (16) in center_string(outstring, ' 9.6937(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924576(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4398.35', width=5)

width < len (16) in center_string(outstring, ' 9.6728(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927139(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '3955.04', width=5)

width < len (16) in center_string(outstring, ' 7.8212(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929688(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4386.82', width=5)

width < len (16) in center_string(outstring, ' 9.6221(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932251(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3940.29', width=5)

width < len (16) in center_string(outstring, ' 7.7630(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934814(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4372.67', width=5)

width < len (16) in center_string(outstring, ' 9.5601(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937378(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (13) in center_string(outstring, '0.0(4.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.1)x10^1', width=12)

width < len (11) in center_string(outstring, ' 333.28(80)', width=10)

width < len (14) in center_string(outstring, '-0.3(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.8)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM71.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM71.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM65.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM65.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 41 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '952.98', width=5)

width < len (9) in center_string(outstring, '454180.59', width=6)

width < len (12) in center_string(outstring, '601818739.64', width=8)

width < len (7) in center_string(outstring, '3276.74', width=6)

width < len (7) in center_string(outstring, '4407.79', width=5)

width < len (16) in center_string(outstring, ' 9.7143(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253229(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4404.63', width=5)

width < len (16) in center_string(outstring, ' 9.7004(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921173(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4400.73', width=5)

width < len (16) in center_string(outstring, ' 9.6832(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4396.16', width=5)

width < len (16) in center_string(outstring, ' 9.6631(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036861(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926300(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4390.91', width=5)

width < len (16) in center_string(outstring, ' 9.6400(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928864(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '3943.59', width=5)

width < len (16) in center_string(outstring, ' 7.7760(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055292(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931412(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(17)', width=10)

width < len (7) in center_string(outstring, '4378.44', width=5)

width < len (16) in center_string(outstring, ' 9.5854(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933975(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4371.23', width=5)

width < len (16) in center_string(outstring, ' 9.5538(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073723(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936539(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(4.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM65.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM65.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM42.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM42.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 63 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '698.99', width=5)

width < len (9) in center_string(outstring, '244385.88', width=6)

width < len (12) in center_string(outstring, '611269585.45', width=8)

width < len (7) in center_string(outstring, '4226.20', width=6)

width < len (7) in center_string(outstring, '4384.54', width=5)

width < len (16) in center_string(outstring, ' 9.6121(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.973(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254177(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4382.05', width=5)

width < len (16) in center_string(outstring, ' 9.6012(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017945(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922348(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4378.77', width=5)

width < len (16) in center_string(outstring, ' 9.5868(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026918(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925110(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4374.77', width=5)

width < len (16) in center_string(outstring, ' 9.5693(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035891(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927872(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4370.04', width=5)

width < len (16) in center_string(outstring, ' 9.5486(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044863(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930618(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4364.60', width=5)

width < len (16) in center_string(outstring, ' 9.5249(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053836(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933380(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4358.45', width=5)

width < len (16) in center_string(outstring, ' 9.4981(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062808(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936142(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.61', width=5)

width < len (16) in center_string(outstring, ' 9.4682(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071781(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938889(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.7)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.410 sec (User: 0.400 sec, System: 0.010 sec)
  Total time: 0.410 sec

Final candidates in binary format are in 'Sband_DM42.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM42.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM25.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM25.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 87 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '381.58', width=5)

width < len (8) in center_string(outstring, '72887.24', width=6)

width < len (12) in center_string(outstring, '592617367.42', width=8)

width < len (7) in center_string(outstring, '2089.61', width=6)

width < len (7) in center_string(outstring, '4369.90', width=5)

width < len (16) in center_string(outstring, ' 9.5480(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.136(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254716(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4367.82', width=5)

width < len (16) in center_string(outstring, ' 9.5389(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018271(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4364.95', width=5)

width < len (16) in center_string(outstring, ' 9.5264(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027407(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925705(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3930.12', width=5)

width < len (16) in center_string(outstring, ' 7.7229(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036542(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928497(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(18)', width=10)

width < len (7) in center_string(outstring, '4356.97', width=5)

width < len (16) in center_string(outstring, ' 9.4916(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045678(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931305(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4351.88', width=5)

width < len (16) in center_string(outstring, ' 9.4694(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054813(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934097(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4346.06', width=5)

width < len (16) in center_string(outstring, ' 9.4441(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063949(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936890(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.52', width=5)

width < len (16) in center_string(outstring, ' 9.4157(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073084(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939697(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(6.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.550 sec, System: 0.010 sec)
  Total time: 0.560 sec

Final candidates in binary format are in 'Sband_DM25.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM25.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM51.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM51.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 50 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '763.34', width=5)

width < len (9) in center_string(outstring, '291437.94', width=6)

width < len (12) in center_string(outstring, '583815124.53', width=8)

width < len (7) in center_string(outstring, '3056.38', width=6)

width < len (7) in center_string(outstring, '4394.89', width=5)

width < len (16) in center_string(outstring, ' 9.6575(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.871(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255447(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4392.14', width=5)

width < len (16) in center_string(outstring, ' 9.6455(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017743(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923615(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3954.17', width=5)

width < len (16) in center_string(outstring, ' 7.8178(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026614(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926346(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '3948.46', width=5)

width < len (16) in center_string(outstring, ' 7.7952(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035486(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929077(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4379.41', width=5)

width < len (16) in center_string(outstring, ' 9.5896(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044357(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931808(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4373.76', width=5)

width < len (16) in center_string(outstring, ' 9.5649(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053228(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934540(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4367.40', width=5)

width < len (16) in center_string(outstring, ' 9.5371(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062100(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937271(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4360.36', width=5)

width < len (16) in center_string(outstring, ' 9.5064(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070971(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940002(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.360 sec, System: 0.020 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM51.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM51.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM82.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM82.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 37 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  11%
Amount of optimization complete =  22%
Amount of optimization complete =  33%
Amount of optimization complete =  44%
Amount of optimization complete =  55%
Amount of optimization complete =  66%
Amount of optimization complete =  77%
Amount of optimization complete =  88%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1047.10', width=5)

width < len (9) in center_string(outstring, '548313.50', width=6)

width < len (12) in center_string(outstring, '606001772.98', width=8)

width < len (7) in center_string(outstring, '2600.39', width=6)

width < len (7) in center_string(outstring, '4426.55', width=5)

width < len (16) in center_string(outstring, ' 9.7972(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.204(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253830(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '3984.89', width=5)

width < len (16) in center_string(outstring, ' 7.9397(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018408(25)', width=12)

width < len (15) in center_string(outstring, ' 166.922104(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786835(17)', width=10)

width < len (7) in center_string(outstring, '4417.47', width=5)

width < len (16) in center_string(outstring, ' 9.7570(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027613(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925003(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4411.69', width=5)

width < len (16) in center_string(outstring, ' 9.7315(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036817(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927902(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(16)', width=10)

width < len (7) in center_string(outstring, '4405.11', width=5)

width < len (16) in center_string(outstring, ' 9.7025(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046021(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930786(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '4397.75', width=5)

width < len (16) in center_string(outstring, ' 9.6701(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055225(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933685(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(16)', width=10)

width < len (7) in center_string(outstring, '4389.63', width=5)

width < len (16) in center_string(outstring, ' 9.6344(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936569(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (7) in center_string(outstring, '4380.74', width=5)

width < len (16) in center_string(outstring, ' 9.5955(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073633(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939468(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790955(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.9)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(5.0)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.310 sec (User: 0.300 sec, System: 0.010 sec)
  Total time: 0.300 sec

Final candidates in binary format are in 'Sband_DM82.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM82.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM72.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM72.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 44 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  15%
Amount of optimization complete =  23%
Amount of optimization complete =  30%
Amount of optimization complete =  38%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  61%
Amount of optimization complete =  69%
Amount of optimization complete =  76%
Amount of optimization complete =  84%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1019.18', width=5)

width < len (9) in center_string(outstring, '519464.44', width=6)

width < len (12) in center_string(outstring, '587818223.19', width=8)

width < len (7) in center_string(outstring, '3107.85', width=6)

width < len (7) in center_string(outstring, '4412.11', width=5)

width < len (16) in center_string(outstring, ' 9.7334(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.215(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253441(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4408.80', width=5)

width < len (16) in center_string(outstring, ' 9.7188(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018431(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921387(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4404.74', width=5)

width < len (16) in center_string(outstring, ' 9.7009(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027646(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923950(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4400.00', width=5)

width < len (16) in center_string(outstring, ' 9.6800(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036862(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926514(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3956.84', width=5)

width < len (16) in center_string(outstring, ' 7.8283(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046077(26)', width=12)

width < len (15) in center_string(outstring, ' 166.929077(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4388.51', width=5)

width < len (16) in center_string(outstring, ' 9.6295(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931641(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3942.12', width=5)

width < len (16) in center_string(outstring, ' 7.7702(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064508(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934204(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4374.41', width=5)

width < len (16) in center_string(outstring, ' 9.5677(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073724(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(5.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.470 sec (User: 0.460 sec, System: 0.010 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM72.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM72.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM29.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM29.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 89 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  13%
Amount of optimization complete =  17%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  39%
Amount of optimization complete =  43%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  56%
Amount of optimization complete =  60%
Amount of optimization complete =  65%
Amount of optimization complete =  69%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  82%
Amount of optimization complete =  86%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '353.35', width=5)

width < len (8) in center_string(outstring, '62512.63', width=6)

width < len (12) in center_string(outstring, '593269077.79', width=8)

width < len (7) in center_string(outstring, '1872.50', width=6)

width < len (7) in center_string(outstring, '3945.74', width=5)

width < len (16) in center_string(outstring, ' 7.7844(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.106(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254299(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(17)', width=10)

width < len (7) in center_string(outstring, '4369.79', width=5)

width < len (16) in center_string(outstring, ' 9.5476(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018212(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922485(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4366.82', width=5)

width < len (16) in center_string(outstring, ' 9.5346(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027318(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925278(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4363.11', width=5)

width < len (16) in center_string(outstring, ' 9.5184(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036424(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928070(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.66', width=5)

width < len (16) in center_string(outstring, ' 9.4990(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045530(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930862(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4353.48', width=5)

width < len (16) in center_string(outstring, ' 9.4764(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054636(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933655(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4347.58', width=5)

width < len (16) in center_string(outstring, ' 9.4507(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063742(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936432(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4340.96', width=5)

width < len (16) in center_string(outstring, ' 9.4220(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072848(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939224(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(8.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.640 sec (User: 0.630 sec, System: 0.010 sec)
  Total time: 0.640 sec

Final candidates in binary format are in 'Sband_DM29.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM29.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM40.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM40.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  17%
Amount of optimization complete =  23%
Amount of optimization complete =  29%
Amount of optimization complete =  35%
Amount of optimization complete =  41%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  58%
Amount of optimization complete =  64%
Amount of optimization complete =  70%
Amount of optimization complete =  76%
Amount of optimization complete =  82%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '645.37', width=5)

width < len (9) in center_string(outstring, '208344.67', width=6)

width < len (12) in center_string(outstring, '580949517.68', width=8)

width < len (7) in center_string(outstring, '4141.63', width=6)

width < len (7) in center_string(outstring, '4383.30', width=5)

width < len (16) in center_string(outstring, ' 9.6067(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.000(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254439(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4380.91', width=5)

width < len (16) in center_string(outstring, ' 9.5962(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922623(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4377.74', width=5)

width < len (16) in center_string(outstring, ' 9.5823(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925385(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4373.83', width=5)

width < len (16) in center_string(outstring, ' 9.5652(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036000(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928146(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '3934.26', width=5)

width < len (16) in center_string(outstring, ' 7.7392(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045001(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930908(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '3927.79', width=5)

width < len (16) in center_string(outstring, ' 7.7138(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054001(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933670(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(18)', width=10)

width < len (7) in center_string(outstring, '4357.78', width=5)

width < len (16) in center_string(outstring, ' 9.4951(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063001(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936432(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4351.01', width=5)

width < len (16) in center_string(outstring, ' 9.4657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072001(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939194(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.600 sec (User: 0.580 sec, System: 0.020 sec)
  Total time: 0.590 sec

Final candidates in binary format are in 'Sband_DM40.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM40.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM48.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM48.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 56 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '719.74', width=5)

width < len (9) in center_string(outstring, '259109.88', width=6)

width < len (12) in center_string(outstring, '598933596.63', width=8)

width < len (7) in center_string(outstring, '3095.20', width=6)

width < len (7) in center_string(outstring, '4394.35', width=5)

width < len (16) in center_string(outstring, ' 9.6552(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.206(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.256177(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4391.83', width=5)

width < len (16) in center_string(outstring, ' 9.6441(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018412(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924118(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3953.39', width=5)

width < len (16) in center_string(outstring, ' 7.8147(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027618(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926682(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(17)', width=10)

width < len (7) in center_string(outstring, '4384.64', width=5)

width < len (16) in center_string(outstring, ' 9.6125(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036824(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929245(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4380.04', width=5)

width < len (16) in center_string(outstring, ' 9.5924(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046030(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931793(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4374.78', width=5)

width < len (16) in center_string(outstring, ' 9.5694(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055236(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934357(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4368.87', width=5)

width < len (16) in center_string(outstring, ' 9.5435(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064442(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936920(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4362.31', width=5)

width < len (16) in center_string(outstring, ' 9.5149(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939468(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(3.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.330 sec (User: 0.320 sec, System: 0.010 sec)
  Total time: 0.320 sec

Final candidates in binary format are in 'Sband_DM48.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM48.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM32.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM32.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 81 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '374.04', width=5)

width < len (8) in center_string(outstring, '70039.75', width=6)

width < len (12) in center_string(outstring, '593204615.65', width=8)

width < len (7) in center_string(outstring, '2031.28', width=6)

width < len (7) in center_string(outstring, '3946.31', width=5)

width < len (16) in center_string(outstring, ' 7.7867(39)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.061(26)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255549(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(17)', width=10)

width < len (7) in center_string(outstring, '4369.51', width=5)

width < len (16) in center_string(outstring, ' 9.5463(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018122(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923737(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4366.51', width=5)

width < len (16) in center_string(outstring, ' 9.5332(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027183(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926514(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4362.77', width=5)

width < len (16) in center_string(outstring, ' 9.5169(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036244(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4358.30', width=5)

width < len (16) in center_string(outstring, ' 9.4974(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045306(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932068(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(16)', width=10)

width < len (7) in center_string(outstring, '4353.11', width=5)

width < len (16) in center_string(outstring, ' 9.4748(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054367(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934845(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4347.20', width=5)

width < len (16) in center_string(outstring, ' 9.4491(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937622(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.59', width=5)

width < len (16) in center_string(outstring, ' 9.4203(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072489(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940399(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.4)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(6.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(8.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.620 sec (User: 0.610 sec, System: 0.010 sec)
  Total time: 0.620 sec

Final candidates in binary format are in 'Sband_DM32.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM32.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM35.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM35.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 79 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '423.16', width=5)

width < len (8) in center_string(outstring, '89621.38', width=6)

width < len (12) in center_string(outstring, '610537661.30', width=8)

width < len (7) in center_string(outstring, '2398.01', width=6)

width < len (7) in center_string(outstring, '4381.13', width=5)

width < len (16) in center_string(outstring, ' 9.5971(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.045(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254199(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4378.88', width=5)

width < len (16) in center_string(outstring, ' 9.5873(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018089(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922379(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4375.84', width=5)

width < len (16) in center_string(outstring, ' 9.5740(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027134(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925156(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4372.07', width=5)

width < len (16) in center_string(outstring, ' 9.5575(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036178(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927933(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4367.56', width=5)

width < len (16) in center_string(outstring, ' 9.5378(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045223(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930710(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4362.32', width=5)

width < len (16) in center_string(outstring, ' 9.5149(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054267(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933487(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.37', width=5)

width < len (16) in center_string(outstring, ' 9.4890(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063312(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936264(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4349.71', width=5)

width < len (16) in center_string(outstring, ' 9.4600(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072356(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939026(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.4)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(7.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.520 sec (User: 0.510 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM35.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM35.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM2.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM2.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 55 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '580.57', width=5)

width < len (9) in center_string(outstring, '168624.09', width=6)

width < len (12) in center_string(outstring, '575389126.37', width=8)

width < len (7) in center_string(outstring, '1470.44', width=6)

width < len (7) in center_string(outstring, '4359.27', width=5)

width < len (16) in center_string(outstring, ' 9.5016(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.208(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255233(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4357.40', width=5)

width < len (16) in center_string(outstring, ' 9.4935(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018415(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923431(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4354.74', width=5)

width < len (16) in center_string(outstring, ' 9.4819(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926254(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4351.34', width=5)

width < len (16) in center_string(outstring, ' 9.4671(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036831(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929062(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3919.65', width=5)

width < len (16) in center_string(outstring, ' 7.6818(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046038(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931885(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3913.77', width=5)

width < len (16) in center_string(outstring, ' 7.6588(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055246(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934692(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4336.65', width=5)

width < len (16) in center_string(outstring, ' 9.4033(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064454(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937515(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4330.30', width=5)

width < len (16) in center_string(outstring, ' 9.3758(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073661(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940323(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.6)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.3(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^3', width=12)

width < len (14) in center_string(outstring, '-0.3(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(2.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.6(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.600 sec (User: 0.590 sec, System: 0.010 sec)
  Total time: 0.600 sec

Final candidates in binary format are in 'Sband_DM2.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM2.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM67.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM67.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '983.22', width=5)

width < len (9) in center_string(outstring, '483456.34', width=6)

width < len (12) in center_string(outstring, '602575781.94', width=8)

width < len (7) in center_string(outstring, '3271.27', width=6)

width < len (7) in center_string(outstring, '4409.14', width=5)

width < len (16) in center_string(outstring, ' 9.7203(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.823(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.251596(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '3971.65', width=5)

width < len (16) in center_string(outstring, ' 7.8870(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017646(25)', width=12)

width < len (15) in center_string(outstring, ' 166.919495(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(17)', width=10)

width < len (7) in center_string(outstring, '4402.20', width=5)

width < len (16) in center_string(outstring, ' 9.6897(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026469(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921936(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4397.77', width=5)

width < len (16) in center_string(outstring, ' 9.6702(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035291(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924393(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '4392.72', width=5)

width < len (16) in center_string(outstring, ' 9.6480(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044114(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926849(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788361(16)', width=10)

width < len (7) in center_string(outstring, '4387.06', width=5)

width < len (16) in center_string(outstring, ' 9.6231(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052937(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929291(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4380.80', width=5)

width < len (16) in center_string(outstring, ' 9.5957(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061760(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931747(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4373.95', width=5)

width < len (16) in center_string(outstring, ' 9.5657(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070583(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934204(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790192(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.7)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.440 sec (User: 0.420 sec, System: 0.020 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM67.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM67.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM80.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM80.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 40 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1034.54', width=5)

width < len (9) in center_string(outstring, '535241.25', width=6)

width < len (12) in center_string(outstring, '605382672.69', width=8)

width < len (7) in center_string(outstring, '2636.64', width=6)

width < len (7) in center_string(outstring, '4424.17', width=5)

width < len (16) in center_string(outstring, ' 9.7866(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254702(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4420.22', width=5)

width < len (16) in center_string(outstring, ' 9.7692(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922913(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4415.41', width=5)

width < len (16) in center_string(outstring, ' 9.7480(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925735(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787521(16)', width=10)

width < len (7) in center_string(outstring, '4409.84', width=5)

width < len (16) in center_string(outstring, ' 9.7233(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928543(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4403.50', width=5)

width < len (16) in center_string(outstring, ' 9.6954(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931366(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788742(16)', width=10)

width < len (7) in center_string(outstring, '3954.37', width=5)

width < len (16) in center_string(outstring, ' 7.8185(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934189(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4388.56', width=5)

width < len (16) in center_string(outstring, ' 9.6297(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937012(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4379.98', width=5)

width < len (16) in center_string(outstring, ' 9.5921(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939835(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.3)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.9(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.360 sec, System: 0.010 sec)
  Total time: 0.370 sec

Final candidates in binary format are in 'Sband_DM80.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM80.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM62.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM62.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '903.14', width=5)

width < len (9) in center_string(outstring, '407926.75', width=6)

width < len (12) in center_string(outstring, '591387892.96', width=8)

width < len (7) in center_string(outstring, '3212.67', width=6)

width < len (7) in center_string(outstring, '4406.75', width=5)

width < len (16) in center_string(outstring, ' 9.7097(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00029661(23)', width=12)

width < len (15) in center_string(outstring, ' 166.913849(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4406.92', width=5)

width < len (16) in center_string(outstring, ' 9.7105(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00059321(23)', width=12)

width < len (15) in center_string(outstring, ' 166.909729(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4407.07', width=5)

width < len (16) in center_string(outstring, ' 9.7111(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00088982(23)', width=12)

width < len (15) in center_string(outstring, ' 166.905609(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(16)', width=10)

width < len (7) in center_string(outstring, '4407.20', width=5)

width < len (16) in center_string(outstring, ' 9.7117(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00118643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.901505(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '4407.32', width=5)

width < len (16) in center_string(outstring, ' 9.7123(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00148303(23)', width=12)

width < len (15) in center_string(outstring, ' 166.897385(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (7) in center_string(outstring, '3974.36', width=5)

width < len (16) in center_string(outstring, ' 7.8978(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00177964(25)', width=12)

width < len (15) in center_string(outstring, ' 166.893280(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785385(17)', width=10)

width < len (7) in center_string(outstring, '3974.29', width=5)

width < len (16) in center_string(outstring, ' 7.8975(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00207625(25)', width=12)

width < len (15) in center_string(outstring, ' 166.889160(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(17)', width=10)

width < len (7) in center_string(outstring, '4407.58', width=5)

width < len (16) in center_string(outstring, ' 9.7134(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00237285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.885040(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9785461(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(3.9)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(6.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM62.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM62.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM19.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM19.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '565.00', width=5)

width < len (9) in center_string(outstring, '159703.27', width=6)

width < len (12) in center_string(outstring, '591947252.12', width=8)

width < len (7) in center_string(outstring, '3540.70', width=6)

width < len (7) in center_string(outstring, '4367.07', width=5)

width < len (16) in center_string(outstring, ' 9.5356(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255359(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '3936.97', width=5)

width < len (16) in center_string(outstring, ' 7.7499(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018422(26)', width=12)

width < len (15) in center_string(outstring, ' 166.923569(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(17)', width=10)

width < len (7) in center_string(outstring, '4362.14', width=5)

width < len (16) in center_string(outstring, ' 9.5142(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027633(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926376(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4358.53', width=5)

width < len (16) in center_string(outstring, ' 9.4984(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036844(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929199(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4354.16', width=5)

width < len (16) in center_string(outstring, ' 9.4794(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932007(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4349.05', width=5)

width < len (16) in center_string(outstring, ' 9.4571(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055265(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934830(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4343.21', width=5)

width < len (16) in center_string(outstring, ' 9.4317(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064476(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937637(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4336.63', width=5)

width < len (16) in center_string(outstring, ' 9.4032(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073687(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940460(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.510 sec (User: 0.500 sec, System: 0.010 sec)
  Total time: 0.510 sec

Final candidates in binary format are in 'Sband_DM19.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM19.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM64.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM64.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '937.42', width=5)

width < len (9) in center_string(outstring, '439481.09', width=6)

width < len (12) in center_string(outstring, '601387397.29', width=8)

width < len (7) in center_string(outstring, '3238.19', width=6)

width < len (7) in center_string(outstring, '4406.87', width=5)

width < len (16) in center_string(outstring, ' 9.7103(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.751(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253676(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4403.63', width=5)

width < len (16) in center_string(outstring, ' 9.6960(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921829(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4399.62', width=5)

width < len (16) in center_string(outstring, ' 9.6783(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026252(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924530(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '4394.91', width=5)

width < len (16) in center_string(outstring, ' 9.6576(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035003(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927231(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4389.50', width=5)

width < len (16) in center_string(outstring, ' 9.6339(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043754(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929932(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4383.40', width=5)

width < len (16) in center_string(outstring, ' 9.6071(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052505(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932632(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '3933.93', width=5)

width < len (16) in center_string(outstring, ' 7.7379(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061256(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935333(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(17)', width=10)

width < len (7) in center_string(outstring, '4369.18', width=5)

width < len (16) in center_string(outstring, ' 9.5449(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070007(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938034(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.2)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(3.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(2.4)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.450 sec (User: 0.440 sec, System: 0.010 sec)
  Total time: 0.440 sec

Final candidates in binary format are in 'Sband_DM64.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM64.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM40.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM40.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 74 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '617.36', width=5)

width < len (9) in center_string(outstring, '190659.86', width=6)

width < len (12) in center_string(outstring, '595664577.07', width=8)

width < len (7) in center_string(outstring, '4012.70', width=6)

width < len (7) in center_string(outstring, '4382.34', width=5)

width < len (16) in center_string(outstring, ' 9.6025(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.997(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254412(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.97', width=5)

width < len (16) in center_string(outstring, ' 9.5921(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017994(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922592(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.80', width=5)

width < len (16) in center_string(outstring, ' 9.5782(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026991(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4372.91', width=5)

width < len (16) in center_string(outstring, ' 9.5612(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035988(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928131(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787750(16)', width=10)

width < len (7) in center_string(outstring, '3933.61', width=5)

width < len (16) in center_string(outstring, ' 7.7367(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044985(26)', width=12)

width < len (15) in center_string(outstring, ' 166.930893(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(17)', width=10)

width < len (7) in center_string(outstring, '4362.95', width=5)

width < len (16) in center_string(outstring, ' 9.5177(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053982(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933655(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.90', width=5)

width < len (16) in center_string(outstring, ' 9.4913(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062979(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936417(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4350.14', width=5)

width < len (16) in center_string(outstring, ' 9.4619(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071976(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939194(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.3)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(9.7)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.660 sec (User: 0.650 sec, System: 0.010 sec)
  Total time: 0.650 sec

Final candidates in binary format are in 'Sband_DM40.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM40.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM18.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM18.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 73 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  30%
Amount of optimization complete =  34%
Amount of optimization complete =  40%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  60%
Amount of optimization complete =  64%
Amount of optimization complete =  69%
Amount of optimization complete =  75%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '594.98', width=5)

width < len (9) in center_string(outstring, '177095.73', width=6)

width < len (12) in center_string(outstring, '591282680.23', width=8)

width < len (7) in center_string(outstring, '3596.40', width=6)

width < len (7) in center_string(outstring, '4365.20', width=5)

width < len (16) in center_string(outstring, ' 9.5275(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.209(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254491(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.08', width=5)

width < len (16) in center_string(outstring, ' 9.5182(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018419(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922699(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4360.16', width=5)

width < len (16) in center_string(outstring, ' 9.5055(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027628(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925507(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3925.59', width=5)

width < len (16) in center_string(outstring, ' 7.7052(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036838(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928329(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4352.07', width=5)

width < len (16) in center_string(outstring, ' 9.4703(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046047(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931137(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4346.91', width=5)

width < len (16) in center_string(outstring, ' 9.4478(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055257(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933960(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.02', width=5)

width < len (16) in center_string(outstring, ' 9.4222(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064466(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936768(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4334.40', width=5)

width < len (16) in center_string(outstring, ' 9.3935(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073675(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939590(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.9(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(8.4)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.5)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.3(7.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.7(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(2.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.610 sec (User: 0.590 sec, System: 0.020 sec)
  Total time: 0.600 sec

Final candidates in binary format are in 'Sband_DM18.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM18.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM73.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM73.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 48 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1013.38', width=5)

width < len (9) in center_string(outstring, '513574.12', width=6)

width < len (12) in center_string(outstring, '573529543.28', width=8)

width < len (7) in center_string(outstring, '2955.17', width=6)

width < len (7) in center_string(outstring, '3981.83', width=5)

width < len (16) in center_string(outstring, ' 7.9275(40)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(25)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254463(72)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(17)', width=10)

width < len (7) in center_string(outstring, '4410.52', width=5)

width < len (16) in center_string(outstring, ' 9.7264(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018428(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922409(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4406.39', width=5)

width < len (16) in center_string(outstring, ' 9.7081(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027642(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924973(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(16)', width=10)

width < len (7) in center_string(outstring, '3964.67', width=5)

width < len (16) in center_string(outstring, ' 7.8593(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036857(26)', width=12)

width < len (15) in center_string(outstring, ' 166.927536(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(17)', width=10)

width < len (7) in center_string(outstring, '4396.09', width=5)

width < len (16) in center_string(outstring, ' 9.6628(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046071(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930084(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4389.95', width=5)

width < len (16) in center_string(outstring, ' 9.6358(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055285(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932648(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '3943.10', width=5)

width < len (16) in center_string(outstring, ' 7.7740(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064499(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935211(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(17)', width=10)

width < len (7) in center_string(outstring, '4375.70', width=5)

width < len (16) in center_string(outstring, ' 9.5734(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073713(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937775(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, '0.0(9.4)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.1(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(7.2)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.3(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.3(3.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM73.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM73.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM36.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM36.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 72 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '461.58', width=5)

width < len (9) in center_string(outstring, '106615.48', width=6)

width < len (12) in center_string(outstring, '595363891.11', width=8)

width < len (7) in center_string(outstring, '2724.11', width=6)

width < len (7) in center_string(outstring, '4381.31', width=5)

width < len (16) in center_string(outstring, ' 9.5980(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.042(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254135(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4379.05', width=5)

width < len (16) in center_string(outstring, ' 9.5881(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018084(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922318(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4376.00', width=5)

width < len (16) in center_string(outstring, ' 9.5747(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027126(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925095(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787140(16)', width=10)

width < len (7) in center_string(outstring, '4372.22', width=5)

width < len (16) in center_string(outstring, ' 9.5581(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036167(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927872(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4367.70', width=5)

width < len (16) in center_string(outstring, ' 9.5384(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045209(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930634(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4362.45', width=5)

width < len (16) in center_string(outstring, ' 9.5155(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054251(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933411(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4356.49', width=5)

width < len (16) in center_string(outstring, ' 9.4895(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063293(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936188(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3911.68', width=5)

width < len (16) in center_string(outstring, ' 7.6506(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072335(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938965(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(18)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.560 sec (User: 0.550 sec, System: 0.010 sec)
  Total time: 0.560 sec

Final candidates in binary format are in 'Sband_DM36.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM36.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM15.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM15.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 71 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '657.96', width=5)

width < len (9) in center_string(outstring, '216547.16', width=6)

width < len (12) in center_string(outstring, '591135791.94', width=8)

width < len (7) in center_string(outstring, '3516.09', width=6)

width < len (7) in center_string(outstring, '4365.13', width=5)

width < len (16) in center_string(outstring, ' 9.5272(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254338(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.01', width=5)

width < len (16) in center_string(outstring, ' 9.5179(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922546(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4360.08', width=5)

width < len (16) in center_string(outstring, ' 9.5052(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925354(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4356.40', width=5)

width < len (16) in center_string(outstring, ' 9.4891(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928177(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4351.97', width=5)

width < len (16) in center_string(outstring, ' 9.4698(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931000(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4346.80', width=5)

width < len (16) in center_string(outstring, ' 9.4474(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933807(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.49', width=5)

width < len (16) in center_string(outstring, ' 7.6304(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936630(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4334.27', width=5)

width < len (16) in center_string(outstring, ' 9.3929(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939438(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.7)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(5.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM15.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM15.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM8.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM8.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '606.86', width=5)

width < len (9) in center_string(outstring, '184230.16', width=6)

width < len (12) in center_string(outstring, '574622163.67', width=8)

width < len (7) in center_string(outstring, '1944.15', width=6)

width < len (7) in center_string(outstring, '4357.59', width=5)

width < len (16) in center_string(outstring, ' 9.4943(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255561(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4355.48', width=5)

width < len (16) in center_string(outstring, ' 9.4851(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923767(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4352.59', width=5)

width < len (16) in center_string(outstring, ' 9.4725(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926575(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4348.94', width=5)

width < len (16) in center_string(outstring, ' 9.4566(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929398(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3915.73', width=5)

width < len (16) in center_string(outstring, ' 7.6665(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932220(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3909.63', width=5)

width < len (16) in center_string(outstring, ' 7.6426(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935028(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4333.56', width=5)

width < len (16) in center_string(outstring, ' 9.3899(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937851(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4326.98', width=5)

width < len (16) in center_string(outstring, ' 9.3614(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940659(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(5.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(6.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.1(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(3.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.460 sec (User: 0.440 sec, System: 0.020 sec)
  Total time: 0.460 sec

Final candidates in binary format are in 'Sband_DM8.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM8.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM5.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM5.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '594.36', width=5)

width < len (9) in center_string(outstring, '176722.64', width=6)

width < len (12) in center_string(outstring, '588989829.56', width=8)

width < len (7) in center_string(outstring, '1662.92', width=6)

width < len (7) in center_string(outstring, '4356.24', width=5)

width < len (16) in center_string(outstring, ' 9.4884(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252968(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4354.20', width=5)

width < len (16) in center_string(outstring, ' 9.4795(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921173(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4351.37', width=5)

width < len (16) in center_string(outstring, ' 9.4672(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923981(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4347.79', width=5)

width < len (16) in center_string(outstring, ' 9.4517(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926804(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4343.47', width=5)

width < len (16) in center_string(outstring, ' 9.4329(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929626(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3909.92', width=5)

width < len (16) in center_string(outstring, ' 7.6438(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.932434(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4332.61', width=5)

width < len (16) in center_string(outstring, ' 9.3858(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935257(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4326.10', width=5)

width < len (16) in center_string(outstring, ' 9.3576(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938065(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(7.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.440 sec (User: 0.430 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM5.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM5.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM70.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM70.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1005.93', width=5)

width < len (9) in center_string(outstring, '506042.97', width=6)

width < len (12) in center_string(outstring, '602507991.95', width=8)

width < len (7) in center_string(outstring, '3155.05', width=6)

width < len (7) in center_string(outstring, '4410.00', width=5)

width < len (16) in center_string(outstring, ' 9.7241(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254467(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4406.69', width=5)

width < len (16) in center_string(outstring, ' 9.7095(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922409(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '3967.61', width=5)

width < len (16) in center_string(outstring, ' 7.8710(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027608(25)', width=12)

width < len (15) in center_string(outstring, ' 166.924973(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787292(17)', width=10)

width < len (7) in center_string(outstring, '4397.91', width=5)

width < len (16) in center_string(outstring, ' 9.6708(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036811(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927521(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4392.51', width=5)

width < len (16) in center_string(outstring, ' 9.6471(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046014(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930084(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4386.46', width=5)

width < len (16) in center_string(outstring, ' 9.6205(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932648(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4379.75', width=5)

width < len (16) in center_string(outstring, ' 9.5911(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064420(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935196(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4372.39', width=5)

width < len (16) in center_string(outstring, ' 9.5589(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937759(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(2.3)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.0)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.8)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(3.7)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.470 sec, System: 0.010 sec)
  Total time: 0.480 sec

Final candidates in binary format are in 'Sband_DM70.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM70.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM31.20.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM31.20_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 86 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   8%
Amount of optimization complete =  12%
Amount of optimization complete =  16%
Amount of optimization complete =  20%
Amount of optimization complete =  25%
Amount of optimization complete =  29%
Amount of optimization complete =  33%
Amount of optimization complete =  37%
Amount of optimization complete =  41%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  58%
Amount of optimization complete =  62%
Amount of optimization complete =  66%
Amount of optimization complete =  70%
Amount of optimization complete =  75%
Amount of optimization complete =  79%
Amount of optimization complete =  83%
Amount of optimization complete =  87%
Amount of optimization complete =  91%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '364.30', width=5)

width < len (8) in center_string(outstring, '66443.94', width=6)

width < len (12) in center_string(outstring, '592721560.57', width=8)

width < len (7) in center_string(outstring, '1940.81', width=6)

width < len (7) in center_string(outstring, '4370.67', width=5)

width < len (16) in center_string(outstring, ' 9.5514(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.078(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254947(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4368.51', width=5)

width < len (16) in center_string(outstring, ' 9.5419(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018156(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923141(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4365.55', width=5)

width < len (16) in center_string(outstring, ' 9.5290(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027234(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925919(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4361.86', width=5)

width < len (16) in center_string(outstring, ' 9.5129(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036312(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928696(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4357.43', width=5)

width < len (16) in center_string(outstring, ' 9.4936(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045390(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931488(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3919.97', width=5)

width < len (16) in center_string(outstring, ' 7.6831(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054467(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934265(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4346.42', width=5)

width < len (16) in center_string(outstring, ' 9.4457(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063545(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937042(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4339.84', width=5)

width < len (16) in center_string(outstring, ' 9.4171(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072623(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939835(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.6)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(2.5)x10^3', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(6.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.8)x10^-1', width=12)

width < len (14) in center_string(outstring, '0.0(5.3)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(5.0)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.7(1.1)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.6(3.7)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.640 sec (User: 0.620 sec, System: 0.020 sec)
  Total time: 0.620 sec

Final candidates in binary format are in 'Sband_DM31.20_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM31.20_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM18.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM18.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 72 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  11%
Amount of optimization complete =  16%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  44%
Amount of optimization complete =  50%
Amount of optimization complete =  55%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  83%
Amount of optimization complete =  88%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '583.83', width=5)

width < len (9) in center_string(outstring, '170521.89', width=6)

width < len (12) in center_string(outstring, '606351097.47', width=8)

width < len (7) in center_string(outstring, '3582.92', width=6)

width < len (7) in center_string(outstring, '4365.62', width=5)

width < len (16) in center_string(outstring, ' 9.5293(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.203(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254931(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.54', width=5)

width < len (16) in center_string(outstring, ' 9.5203(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018406(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4360.67', width=5)

width < len (16) in center_string(outstring, ' 9.5077(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027609(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925949(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.04', width=5)

width < len (16) in center_string(outstring, ' 9.4919(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928757(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.66', width=5)

width < len (16) in center_string(outstring, ' 9.4728(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046015(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931580(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4347.54', width=5)

width < len (16) in center_string(outstring, ' 9.4506(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055218(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934387(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4341.69', width=5)

width < len (16) in center_string(outstring, ' 9.4251(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937210(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4335.11', width=5)

width < len (16) in center_string(outstring, ' 9.3966(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940018(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(5.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(7.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.480 sec (User: 0.460 sec, System: 0.020 sec)
  Total time: 0.470 sec

Final candidates in binary format are in 'Sband_DM18.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM18.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM33.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM33.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 97 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  13%
Amount of optimization complete =  18%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  40%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  59%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  81%
Amount of optimization complete =  86%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '392.37', width=5)

width < len (8) in center_string(outstring, '77064.32', width=6)

width < len (12) in center_string(outstring, '593273778.88', width=8)

width < len (7) in center_string(outstring, '2168.10', width=6)

width < len (7) in center_string(outstring, '4372.95', width=5)

width < len (16) in center_string(outstring, ' 9.5613(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.038(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253727(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4370.72', width=5)

width < len (16) in center_string(outstring, ' 9.5516(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018077(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921906(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4367.72', width=5)

width < len (16) in center_string(outstring, ' 9.5385(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027115(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924683(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4363.99', width=5)

width < len (16) in center_string(outstring, ' 9.5222(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036153(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927460(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4359.52', width=5)

width < len (16) in center_string(outstring, ' 9.5027(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045191(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930222(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4354.34', width=5)

width < len (16) in center_string(outstring, ' 9.4801(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054230(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932999(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '3915.21', width=5)

width < len (16) in center_string(outstring, ' 7.6645(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063268(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935776(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4341.84', width=5)

width < len (16) in center_string(outstring, ' 9.4258(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072306(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938538(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(3.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.2(3.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.590 sec (User: 0.580 sec, System: 0.010 sec)
  Total time: 0.580 sec

Final candidates in binary format are in 'Sband_DM33.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM33.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM75.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM75.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 37 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =  10%
Amount of optimization complete =  20%
Amount of optimization complete =  30%
Amount of optimization complete =  40%
Amount of optimization complete =  50%
Amount of optimization complete =  60%
Amount of optimization complete =  69%
Amount of optimization complete =  80%
Amount of optimization complete =  89%
Amount of optimization complete = 100%
width < len (7) in center_string(outstring, '1019.40', width=5)

width < len (9) in center_string(outstring, '519689.88', width=6)

width < len (12) in center_string(outstring, '604114310.95', width=8)

width < len (7) in center_string(outstring, '2908.70', width=6)

width < len (7) in center_string(outstring, '4419.08', width=5)

width < len (16) in center_string(outstring, ' 9.7641(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.211(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255961(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786148(16)', width=10)

width < len (7) in center_string(outstring, '4415.27', width=5)

width < len (16) in center_string(outstring, ' 9.7473(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018421(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924164(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786758(16)', width=10)

width < len (7) in center_string(outstring, '4410.62', width=5)

width < len (16) in center_string(outstring, ' 9.7268(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027632(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926987(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9787445(16)', width=10)

width < len (7) in center_string(outstring, '4405.20', width=5)

width < len (16) in center_string(outstring, ' 9.7029(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036843(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929810(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788132(16)', width=10)

width < len (7) in center_string(outstring, '4399.02', width=5)

width < len (16) in center_string(outstring, ' 9.6757(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046054(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932632(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788666(16)', width=10)

width < len (7) in center_string(outstring, '3950.01', width=5)

width < len (16) in center_string(outstring, ' 7.8013(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055264(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935455(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9789429(17)', width=10)

width < len (7) in center_string(outstring, '4384.39', width=5)

width < len (16) in center_string(outstring, ' 9.6115(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064475(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938263(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790039(16)', width=10)

width < len (7) in center_string(outstring, '4375.98', width=5)

width < len (16) in center_string(outstring, ' 9.5746(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073686(23)', width=12)

width < len (15) in center_string(outstring, ' 166.941086(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790726(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.270 sec (User: 0.260 sec, System: 0.010 sec)
  Total time: 0.260 sec

Final candidates in binary format are in 'Sband_DM75.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM75.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM9.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM9.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '623.97', width=5)

width < len (9) in center_string(outstring, '194759.66', width=6)

width < len (12) in center_string(outstring, '589579131.78', width=8)

width < len (7) in center_string(outstring, '2211.39', width=6)

width < len (7) in center_string(outstring, '4359.07', width=5)

width < len (16) in center_string(outstring, ' 9.5008(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254411(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.90', width=5)

width < len (16) in center_string(outstring, ' 9.4913(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018429(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922623(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4353.94', width=5)

width < len (16) in center_string(outstring, ' 9.4784(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027643(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925430(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.22', width=5)

width < len (16) in center_string(outstring, ' 9.4622(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036858(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928253(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4345.76', width=5)

width < len (16) in center_string(outstring, ' 9.4428(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931061(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4340.57', width=5)

width < len (16) in center_string(outstring, ' 9.4203(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055286(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933884(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3904.42', width=5)

width < len (16) in center_string(outstring, ' 7.6222(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064501(26)', width=12)

width < len (15) in center_string(outstring, ' 166.936707(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(18)', width=10)

width < len (7) in center_string(outstring, '4327.98', width=5)

width < len (16) in center_string(outstring, ' 9.3657(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073715(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939514(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.2(5.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.3(4.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM9.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM9.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM15.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM15.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 65 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '640.33', width=5)

width < len (9) in center_string(outstring, '205105.48', width=6)

width < len (12) in center_string(outstring, '591373825.77', width=8)

width < len (7) in center_string(outstring, '3541.74', width=6)

width < len (7) in center_string(outstring, '4365.80', width=5)

width < len (16) in center_string(outstring, ' 9.5301(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253543(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4363.70', width=5)

width < len (16) in center_string(outstring, ' 9.5209(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921753(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4360.79', width=5)

width < len (16) in center_string(outstring, ' 9.5083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924561(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4357.14', width=5)

width < len (16) in center_string(outstring, ' 9.4923(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927383(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4352.73', width=5)

width < len (16) in center_string(outstring, ' 9.4731(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930191(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '3914.14', width=5)

width < len (16) in center_string(outstring, ' 7.6602(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.933014(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4341.70', width=5)

width < len (16) in center_string(outstring, ' 9.4252(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064494(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935822(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4335.09', width=5)

width < len (16) in center_string(outstring, ' 9.3965(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938644(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(4.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(5.5)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.410 sec, System: 0.020 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM15.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM15.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM21.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM21.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 68 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '493.54', width=5)

width < len (9) in center_string(outstring, '121878.81', width=6)

width < len (12) in center_string(outstring, '607237565.25', width=8)

width < len (7) in center_string(outstring, '3043.26', width=6)

width < len (7) in center_string(outstring, '4368.87', width=5)

width < len (16) in center_string(outstring, ' 9.5435(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.175(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254657(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4366.77', width=5)

width < len (16) in center_string(outstring, ' 9.5343(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018350(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922852(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4363.87', width=5)

width < len (16) in center_string(outstring, ' 9.5217(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027525(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925659(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4360.22', width=5)

width < len (16) in center_string(outstring, ' 9.5058(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036700(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928467(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787598(16)', width=10)

width < len (7) in center_string(outstring, '4355.83', width=5)

width < len (16) in center_string(outstring, ' 9.4866(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045875(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931274(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4350.69', width=5)

width < len (16) in center_string(outstring, ' 9.4643(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055050(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934097(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4344.83', width=5)

width < len (16) in center_string(outstring, ' 9.4388(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064226(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936905(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4338.24', width=5)

width < len (16) in center_string(outstring, ' 9.4102(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073401(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939713(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(6.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.2(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.530 sec (User: 0.520 sec, System: 0.010 sec)
  Total time: 0.520 sec

Final candidates in binary format are in 'Sband_DM21.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM21.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM2.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM2.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 53 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   7%
Amount of optimization complete =  14%
Amount of optimization complete =  21%
Amount of optimization complete =  28%
Amount of optimization complete =  35%
Amount of optimization complete =  42%
Amount of optimization complete =  50%
Amount of optimization complete =  57%
Amount of optimization complete =  64%
Amount of optimization complete =  71%
Amount of optimization complete =  78%
Amount of optimization complete =  85%
Amount of optimization complete =  92%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '578.41', width=5)

width < len (9) in center_string(outstring, '167370.45', width=6)

width < len (12) in center_string(outstring, '589788691.67', width=8)

width < len (7) in center_string(outstring, '1473.78', width=6)

width < len (7) in center_string(outstring, '4358.84', width=5)

width < len (16) in center_string(outstring, ' 9.4997(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.213(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253299(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.94', width=5)

width < len (16) in center_string(outstring, ' 9.4915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921509(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786301(16)', width=10)

width < len (7) in center_string(outstring, '4354.25', width=5)

width < len (16) in center_string(outstring, ' 9.4797(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027640(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924316(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4350.81', width=5)

width < len (16) in center_string(outstring, ' 9.4648(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036853(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927139(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4346.62', width=5)

width < len (16) in center_string(outstring, ' 9.4465(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929947(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4341.69', width=5)

width < len (16) in center_string(outstring, ' 9.4251(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055280(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932770(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '3906.19', width=5)

width < len (16) in center_string(outstring, ' 7.6292(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064493(26)', width=12)

width < len (15) in center_string(outstring, ' 166.935577(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(18)', width=10)

width < len (7) in center_string(outstring, '4329.63', width=5)

width < len (16) in center_string(outstring, ' 9.3729(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073707(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938400(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.3)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(1.1)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.400 sec (User: 0.390 sec, System: 0.010 sec)
  Total time: 0.390 sec

Final candidates in binary format are in 'Sband_DM2.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM2.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM59.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM59.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 42 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '884.25', width=5)

width < len (9) in center_string(outstring, '391045.25', width=6)

width < len (12) in center_string(outstring, '599090001.13', width=8)

width < len (7) in center_string(outstring, '3255.94', width=6)

width < len (7) in center_string(outstring, '4397.19', width=5)

width < len (16) in center_string(outstring, ' 9.6676(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.776(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254963(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4394.13', width=5)

width < len (16) in center_string(outstring, ' 9.6542(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017552(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923126(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4390.31', width=5)

width < len (16) in center_string(outstring, ' 9.6374(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026327(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925827(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '3949.04', width=5)

width < len (16) in center_string(outstring, ' 7.7975(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035103(26)', width=12)

width < len (15) in center_string(outstring, ' 166.928528(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(17)', width=10)

width < len (7) in center_string(outstring, '4380.56', width=5)

width < len (16) in center_string(outstring, ' 9.5947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043879(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931244(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4374.65', width=5)

width < len (16) in center_string(outstring, ' 9.5688(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052655(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933945(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4368.06', width=5)

width < len (16) in center_string(outstring, ' 9.5400(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061430(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936661(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4360.79', width=5)

width < len (16) in center_string(outstring, ' 9.5083(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070206(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939362(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (13) in center_string(outstring, '0.0(1.4)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(5.5)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(1.6)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM59.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM59.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM31.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM31.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 78 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  14%
Amount of optimization complete =  19%
Amount of optimization complete =  23%
Amount of optimization complete =  28%
Amount of optimization complete =  33%
Amount of optimization complete =  38%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  61%
Amount of optimization complete =  66%
Amount of optimization complete =  71%
Amount of optimization complete =  76%
Amount of optimization complete =  80%
Amount of optimization complete =  85%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '367.10', width=5)

width < len (8) in center_string(outstring, '67465.91', width=6)

width < len (12) in center_string(outstring, '592969215.47', width=8)

width < len (7) in center_string(outstring, '1986.75', width=6)

width < len (7) in center_string(outstring, '4371.47', width=5)

width < len (16) in center_string(outstring, ' 9.5549(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.072(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254921(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785767(16)', width=10)

width < len (7) in center_string(outstring, '4369.30', width=5)

width < len (16) in center_string(outstring, ' 9.5454(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018145(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923111(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4366.35', width=5)

width < len (16) in center_string(outstring, ' 9.5325(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027217(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925888(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '4362.66', width=5)

width < len (16) in center_string(outstring, ' 9.5164(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928665(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3926.68', width=5)

width < len (16) in center_string(outstring, ' 7.7094(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045362(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931458(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '4353.09', width=5)

width < len (16) in center_string(outstring, ' 9.4747(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054435(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934235(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(16)', width=10)

width < len (7) in center_string(outstring, '4347.23', width=5)

width < len (16) in center_string(outstring, ' 9.4492(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937012(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4340.66', width=5)

width < len (16) in center_string(outstring, ' 9.4207(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072580(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939789(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (13) in center_string(outstring, '0.0(6.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(4.5)x10^-1', width=10)

width < len (13) in center_string(outstring, '0.0(5.2)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(3.7)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.590 sec (User: 0.570 sec, System: 0.020 sec)
  Total time: 0.580 sec

Final candidates in binary format are in 'Sband_DM31.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM31.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM48.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM48.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '725.23', width=5)

width < len (9) in center_string(outstring, '263073.12', width=6)

width < len (12) in center_string(outstring, '613375486.12', width=8)

width < len (7) in center_string(outstring, '3075.24', width=6)

width < len (7) in center_string(outstring, '4392.58', width=5)

width < len (16) in center_string(outstring, ' 9.6474(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.902(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254171(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.93', width=5)

width < len (16) in center_string(outstring, ' 9.6357(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017804(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922333(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.50', width=5)

width < len (16) in center_string(outstring, ' 9.6207(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026706(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925079(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4382.34', width=5)

width < len (16) in center_string(outstring, ' 9.6025(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035608(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927811(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4377.47', width=5)

width < len (16) in center_string(outstring, ' 9.5811(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044510(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930557(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.90', width=5)

width < len (16) in center_string(outstring, ' 9.5568(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053412(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933289(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4365.62', width=5)

width < len (16) in center_string(outstring, ' 9.5293(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062314(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936035(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4358.66', width=5)

width < len (16) in center_string(outstring, ' 9.4990(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071216(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938766(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(2.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(3.2)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(2.0)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.370 sec (User: 0.350 sec, System: 0.020 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM48.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM48.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM62.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM62.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 52 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '908.80', width=5)

width < len (9) in center_string(outstring, '413058.16', width=6)

width < len (12) in center_string(outstring, '600767949.72', width=8)

width < len (7) in center_string(outstring, '3248.10', width=6)

width < len (7) in center_string(outstring, '4404.37', width=5)

width < len (16) in center_string(outstring, ' 9.6992(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.756(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254201(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4401.21', width=5)

width < len (16) in center_string(outstring, ' 9.6853(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017511(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922363(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786606(16)', width=10)

width < len (7) in center_string(outstring, '4397.29', width=5)

width < len (16) in center_string(outstring, ' 9.6681(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026267(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925064(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4392.66', width=5)

width < len (16) in center_string(outstring, ' 9.6477(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035022(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927765(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4387.33', width=5)

width < len (16) in center_string(outstring, ' 9.6244(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043778(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930466(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4381.32', width=5)

width < len (16) in center_string(outstring, ' 9.5980(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052533(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933182(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4374.62', width=5)

width < len (16) in center_string(outstring, ' 9.5687(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061289(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935883(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '3924.37', width=5)

width < len (16) in center_string(outstring, ' 7.7004(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070045(26)', width=12)

width < len (15) in center_string(outstring, ' 166.938583(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (13) in center_string(outstring, '0.0(1.5)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.6)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM62.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM62.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM54.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM54.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 51 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '811.07', width=5)

width < len (9) in center_string(outstring, '329017.03', width=6)

width < len (12) in center_string(outstring, '585273848.72', width=8)

width < len (7) in center_string(outstring, '3124.07', width=6)

width < len (7) in center_string(outstring, '4401.18', width=5)

width < len (16) in center_string(outstring, ' 9.6852(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.858(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255006(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4398.39', width=5)

width < len (16) in center_string(outstring, ' 9.6729(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017716(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923172(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '3959.11', width=5)

width < len (16) in center_string(outstring, ' 7.8373(40)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026574(26)', width=12)

width < len (15) in center_string(outstring, ' 166.925903(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(17)', width=10)

width < len (7) in center_string(outstring, '4390.55', width=5)

width < len (16) in center_string(outstring, ' 9.6385(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035432(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928619(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4385.56', width=5)

width < len (16) in center_string(outstring, ' 9.6166(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044290(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931351(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4379.87', width=5)

width < len (16) in center_string(outstring, ' 9.5916(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053148(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934082(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4373.48', width=5)

width < len (16) in center_string(outstring, ' 9.5637(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062005(23)', width=12)

width < len (15) in center_string(outstring, ' 166.936813(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '3925.11', width=5)

width < len (16) in center_string(outstring, ' 7.7033(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070863(26)', width=12)

width < len (15) in center_string(outstring, ' 166.939529(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(1.2)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.5(1.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM54.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM54.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM57.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM57.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 43 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   9%
Amount of optimization complete =  18%
Amount of optimization complete =  27%
Amount of optimization complete =  36%
Amount of optimization complete =  45%
Amount of optimization complete =  54%
Amount of optimization complete =  63%
Amount of optimization complete =  72%
Amount of optimization complete =  81%
Amount of optimization complete =  90%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '846.74', width=5)

width < len (9) in center_string(outstring, '358582.22', width=6)

width < len (12) in center_string(outstring, '613805648.93', width=8)

width < len (7) in center_string(outstring, '3103.10', width=6)

width < len (7) in center_string(outstring, '4395.25', width=5)

width < len (16) in center_string(outstring, ' 9.6591(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.795(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255388(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785995(16)', width=10)

width < len (7) in center_string(outstring, '4392.24', width=5)

width < len (16) in center_string(outstring, ' 9.6459(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017589(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923538(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4388.47', width=5)

width < len (16) in center_string(outstring, ' 9.6293(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026384(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926254(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4383.99', width=5)

width < len (16) in center_string(outstring, ' 9.6097(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035178(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928970(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4378.81', width=5)

width < len (16) in center_string(outstring, ' 9.5870(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043973(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931686(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4372.94', width=5)

width < len (16) in center_string(outstring, ' 9.5613(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052767(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934387(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789200(16)', width=10)

width < len (7) in center_string(outstring, '4366.39', width=5)

width < len (16) in center_string(outstring, ' 9.5327(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00061562(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937103(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789810(16)', width=10)

width < len (7) in center_string(outstring, '4359.17', width=5)

width < len (16) in center_string(outstring, ' 9.5012(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00070356(23)', width=12)

width < len (15) in center_string(outstring, ' 166.939819(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.7)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.0)x10^2', width=12)

width < len (14) in center_string(outstring, '-0.1(5.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(4.3)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.350 sec (User: 0.340 sec, System: 0.010 sec)
  Total time: 0.350 sec

Final candidates in binary format are in 'Sband_DM57.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM57.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM69.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM69.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 45 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   8%
Amount of optimization complete =  16%
Amount of optimization complete =  25%
Amount of optimization complete =  33%
Amount of optimization complete =  41%
Amount of optimization complete =  50%
Amount of optimization complete =  58%
Amount of optimization complete =  66%
Amount of optimization complete =  75%
Amount of optimization complete =  83%
Amount of optimization complete =  91%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '986.40', width=5)

width < len (9) in center_string(outstring, '486595.91', width=6)

width < len (12) in center_string(outstring, '618070709.30', width=8)

width < len (7) in center_string(outstring, '3109.39', width=6)

width < len (7) in center_string(outstring, '4411.90', width=5)

width < len (16) in center_string(outstring, ' 9.7324(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.691(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253435(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786072(16)', width=10)

width < len (7) in center_string(outstring, '4408.46', width=5)

width < len (16) in center_string(outstring, ' 9.7173(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017381(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921585(65)', width=10)

width < len (15) in center_string(outstring, ' 64.9786682(16)', width=10)

width < len (7) in center_string(outstring, '4404.26', width=5)

width < len (16) in center_string(outstring, ' 9.6987(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026072(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924271(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787369(16)', width=10)

width < len (7) in center_string(outstring, '4399.36', width=5)

width < len (16) in center_string(outstring, ' 9.6772(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00034762(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926956(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787979(16)', width=10)

width < len (7) in center_string(outstring, '4393.77', width=5)

width < len (16) in center_string(outstring, ' 9.6526(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00043453(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929642(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788513(16)', width=10)

width < len (7) in center_string(outstring, '4387.51', width=5)

width < len (16) in center_string(outstring, ' 9.6251(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00052143(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932327(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4380.57', width=5)

width < len (16) in center_string(outstring, ' 9.5947(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00060834(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935013(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4372.97', width=5)

width < len (16) in center_string(outstring, ' 9.5614(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00069525(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937698(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.0(4.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.8)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(5.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.4(1.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(3.1)x10^-1', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(5.9)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.390 sec (User: 0.380 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM69.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM69.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM45.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM45.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 67 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '700.89', width=5)

width < len (9) in center_string(outstring, '245719.05', width=6)

width < len (12) in center_string(outstring, '612863032.46', width=8)

width < len (7) in center_string(outstring, '3454.54', width=6)

width < len (7) in center_string(outstring, '4390.46', width=5)

width < len (16) in center_string(outstring, ' 9.6381(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.930(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253915(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4387.89', width=5)

width < len (16) in center_string(outstring, ' 9.6268(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017859(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922089(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4384.55', width=5)

width < len (16) in center_string(outstring, ' 9.6121(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026789(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924835(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4380.48', width=5)

width < len (16) in center_string(outstring, ' 9.5943(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035718(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927582(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787827(16)', width=10)

width < len (7) in center_string(outstring, '4375.69', width=5)

width < len (16) in center_string(outstring, ' 9.5733(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044648(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930328(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4370.19', width=5)

width < len (16) in center_string(outstring, ' 9.5493(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053578(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933075(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789124(16)', width=10)

width < len (7) in center_string(outstring, '4363.99', width=5)

width < len (16) in center_string(outstring, ' 9.5222(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062507(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935822(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789734(16)', width=10)

width < len (7) in center_string(outstring, '4357.10', width=5)

width < len (16) in center_string(outstring, ' 9.4921(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071437(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938553(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790497(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.0)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(2.8)x10^2', width=12)

width < len (14) in center_string(outstring, '0.0(6.8)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.430 sec (User: 0.420 sec, System: 0.010 sec)
  Total time: 0.420 sec

Final candidates in binary format are in 'Sband_DM45.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM45.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM47.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM47.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 62 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  13%
Amount of optimization complete =  20%
Amount of optimization complete =  26%
Amount of optimization complete =  33%
Amount of optimization complete =  40%
Amount of optimization complete =  46%
Amount of optimization complete =  53%
Amount of optimization complete =  60%
Amount of optimization complete =  66%
Amount of optimization complete =  73%
Amount of optimization complete =  80%
Amount of optimization complete =  86%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '719.01', width=5)

width < len (9) in center_string(outstring, '258583.34', width=6)

width < len (12) in center_string(outstring, '613359805.97', width=8)

width < len (7) in center_string(outstring, '3241.74', width=6)

width < len (7) in center_string(outstring, '4392.42', width=5)

width < len (16) in center_string(outstring, ' 9.6467(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 8.906(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254051(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785919(16)', width=10)

width < len (7) in center_string(outstring, '4389.80', width=5)

width < len (16) in center_string(outstring, ' 9.6352(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00017812(23)', width=12)

width < len (15) in center_string(outstring, ' 166.922226(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786530(16)', width=10)

width < len (7) in center_string(outstring, '4386.39', width=5)

width < len (16) in center_string(outstring, ' 9.6202(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00026718(23)', width=12)

width < len (15) in center_string(outstring, ' 166.924957(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787216(16)', width=10)

width < len (7) in center_string(outstring, '4382.27', width=5)

width < len (16) in center_string(outstring, ' 9.6022(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00035624(23)', width=12)

width < len (15) in center_string(outstring, ' 166.927704(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787903(16)', width=10)

width < len (7) in center_string(outstring, '4377.43', width=5)

width < len (16) in center_string(outstring, ' 9.5810(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00044530(23)', width=12)

width < len (15) in center_string(outstring, ' 166.930435(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788437(16)', width=10)

width < len (7) in center_string(outstring, '4371.89', width=5)

width < len (16) in center_string(outstring, ' 9.5567(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00053436(23)', width=12)

width < len (15) in center_string(outstring, ' 166.933182(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789047(16)', width=10)

width < len (7) in center_string(outstring, '4365.64', width=5)

width < len (16) in center_string(outstring, ' 9.5294(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00062342(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935913(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4358.70', width=5)

width < len (16) in center_string(outstring, ' 9.4992(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00071248(23)', width=12)

width < len (15) in center_string(outstring, ' 166.938660(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(16)', width=10)

width < len (14) in center_string(outstring, ' 0.1(1.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(5.1)x10^-1', width=12)

width < len (14) in center_string(outstring, ' 0.0(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(8.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.4(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.5(1.6)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.8(2.0)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.9(1.2)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.440 sec (User: 0.420 sec, System: 0.020 sec)
  Total time: 0.430 sec

Final candidates in binary format are in 'Sband_DM47.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM47.60_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM34.80.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM34.80_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 86 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   4%
Amount of optimization complete =   9%
Amount of optimization complete =  13%
Amount of optimization complete =  18%
Amount of optimization complete =  22%
Amount of optimization complete =  27%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  40%
Amount of optimization complete =  45%
Amount of optimization complete =  50%
Amount of optimization complete =  54%
Amount of optimization complete =  59%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  72%
Amount of optimization complete =  77%
Amount of optimization complete =  81%
Amount of optimization complete =  86%
Amount of optimization complete =  90%
Amount of optimization complete =  95%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '411.97', width=5)

width < len (8) in center_string(outstring, '84945.06', width=6)

width < len (12) in center_string(outstring, '578915558.61', width=8)

width < len (7) in center_string(outstring, '2320.13', width=6)

width < len (7) in center_string(outstring, '4374.42', width=5)

width < len (16) in center_string(outstring, ' 9.5678(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.034(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.253082(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785843(16)', width=10)

width < len (7) in center_string(outstring, '4372.19', width=5)

width < len (16) in center_string(outstring, ' 9.5580(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018067(23)', width=12)

width < len (15) in center_string(outstring, ' 166.921265(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786453(16)', width=10)

width < len (7) in center_string(outstring, '3939.96', width=5)

width < len (16) in center_string(outstring, ' 7.7616(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027101(26)', width=12)

width < len (15) in center_string(outstring, ' 166.924042(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(17)', width=10)

width < len (7) in center_string(outstring, '4365.42', width=5)

width < len (16) in center_string(outstring, ' 9.5285(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036134(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926819(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '4360.94', width=5)

width < len (16) in center_string(outstring, ' 9.5089(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045168(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929596(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4355.75', width=5)

width < len (16) in center_string(outstring, ' 9.4863(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00054201(23)', width=12)

width < len (15) in center_string(outstring, ' 166.932373(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4349.83', width=5)

width < len (16) in center_string(outstring, ' 9.4605(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00063235(23)', width=12)

width < len (15) in center_string(outstring, ' 166.935150(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '3908.40', width=5)

width < len (16) in center_string(outstring, ' 7.6378(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00072269(26)', width=12)

width < len (15) in center_string(outstring, ' 166.937927(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9790421(18)', width=10)

width < len (14) in center_string(outstring, ' 0.0(2.2)x10^1', width=12)

width < len (13) in center_string(outstring, '0.0(1.1)x10^2', width=12)

width < len (14) in center_string(outstring, ' 0.2(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(2.5)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(3.9)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.7)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.490 sec

Final candidates in binary format are in 'Sband_DM34.80_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM34.80_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM19.40.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM19.40_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 74 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   5%
Amount of optimization complete =  10%
Amount of optimization complete =  15%
Amount of optimization complete =  21%
Amount of optimization complete =  26%
Amount of optimization complete =  31%
Amount of optimization complete =  36%
Amount of optimization complete =  42%
Amount of optimization complete =  47%
Amount of optimization complete =  52%
Amount of optimization complete =  57%
Amount of optimization complete =  63%
Amount of optimization complete =  68%
Amount of optimization complete =  73%
Amount of optimization complete =  78%
Amount of optimization complete =  84%
Amount of optimization complete =  89%
Amount of optimization complete =  94%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '548.90', width=5)

width < len (9) in center_string(outstring, '150739.09', width=6)

width < len (12) in center_string(outstring, '591771409.72', width=8)

width < len (7) in center_string(outstring, '3444.08', width=6)

width < len (7) in center_string(outstring, '4366.80', width=5)

width < len (16) in center_string(outstring, ' 9.5345(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.188(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.252540(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4364.72', width=5)

width < len (16) in center_string(outstring, ' 9.5254(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018376(23)', width=12)

width < len (15) in center_string(outstring, ' 166.920746(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4361.84', width=5)

width < len (16) in center_string(outstring, ' 9.5128(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027563(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923553(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786987(16)', width=10)

width < len (7) in center_string(outstring, '3927.61', width=5)

width < len (16) in center_string(outstring, ' 7.7131(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036751(26)', width=12)

width < len (15) in center_string(outstring, ' 166.926361(73)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(18)', width=10)

width < len (7) in center_string(outstring, '4353.83', width=5)

width < len (16) in center_string(outstring, ' 9.4779(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00045939(23)', width=12)

width < len (15) in center_string(outstring, ' 166.929169(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(16)', width=10)

width < len (7) in center_string(outstring, '4348.71', width=5)

width < len (16) in center_string(outstring, ' 9.4556(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055127(23)', width=12)

width < len (15) in center_string(outstring, ' 166.931992(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(16)', width=10)

width < len (7) in center_string(outstring, '4342.86', width=5)

width < len (16) in center_string(outstring, ' 9.4302(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064314(23)', width=12)

width < len (15) in center_string(outstring, ' 166.934799(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4336.29', width=5)

width < len (16) in center_string(outstring, ' 9.4017(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073502(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937607(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.1(2.4)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.6(2.1)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(1.5)x10^1', width=12)

width < len (14) in center_string(outstring, '-0.1(1.1)x10^1', width=12)

width < len (14) in center_string(outstring, '0.0(9.8)x10^-1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.500 sec (User: 0.490 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM19.40_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM19.40_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM9.00.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM9.00_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 57 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '617.20', width=5)

width < len (9) in center_string(outstring, '190563.44', width=6)

width < len (12) in center_string(outstring, '574984876.29', width=8)

width < len (7) in center_string(outstring, '2149.96', width=6)

width < len (7) in center_string(outstring, '4359.09', width=5)

width < len (16) in center_string(outstring, ' 9.5008(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.255127(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4356.94', width=5)

width < len (16) in center_string(outstring, ' 9.4915(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923325(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4354.01', width=5)

width < len (16) in center_string(outstring, ' 9.4787(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.926147(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4350.32', width=5)

width < len (16) in center_string(outstring, ' 9.4627(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928970(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3916.97', width=5)

width < len (16) in center_string(outstring, ' 7.6713(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931778(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788208(18)', width=10)

width < len (7) in center_string(outstring, '3910.84', width=5)

width < len (16) in center_string(outstring, ' 7.6473(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934601(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788895(18)', width=10)

width < len (7) in center_string(outstring, '4334.82', width=5)

width < len (16) in center_string(outstring, ' 9.3954(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937408(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789581(16)', width=10)

width < len (7) in center_string(outstring, '4328.20', width=5)

width < len (16) in center_string(outstring, ' 9.3667(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940231(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790268(16)', width=10)

width < len (14) in center_string(outstring, '0.0(6.0)x10^-1', width=10)

width < len (14) in center_string(outstring, '-0.2(1.3)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.0)x10^1', width=12)

width < len (14) in center_string(outstring, ' 0.0(8.8)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.380 sec (User: 0.370 sec, System: 0.010 sec)
  Total time: 0.380 sec

Final candidates in binary format are in 'Sband_DM9.00_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM9.00_ACCEL_0'.


    Fourier-Domain Acceleration and Jerk Search Routine
                    by Scott M. Ransom

Analyzing J2000-1234 data from 'Sband_DM12.60.fft'.

Memory mapping the input FFT.  This may take a while...
Normalizing powers using median-blocks (default).

Full f-fdot plane would need 0.00 GB: using in-memory accelsearch.

Searching with up to 8 harmonics summed:
  f = 1.0 to 2543.1 Hz
  r = 25.0 to 65499.0 Fourier bins
  z = 0.0 to 0.0 Fourier bins drifted

Generating correlation kernels:
  Harm  1/1 :     1 kernels,    0 < z < 0    (2048 pt FFTs)
Total RAM used by correlation kernels:  0.000 GB
Done generating kernels.

Starting the search.

  Working candidates in a test format are in 'Sband_DM12.60_ACCEL_0.txtcand'.


Amount of search complete =   0%
Amount of search complete =   1%
Amount of search complete =   3%
Amount of search complete =   4%
Amount of search complete =   6%
Amount of search complete =   7%
Amount of search complete =   9%
Amount of search complete =  10%
Amount of search complete =  12%
Amount of search complete =  13%
Amount of search complete =  15%
Amount of search complete =  16%
Amount of search complete =  18%
Amount of search complete =  19%
Amount of search complete =  21%
Amount of search complete =  22%
Amount of search complete =  24%
Amount of search complete =  25%
Amount of search complete =  27%
Amount of search complete =  28%
Amount of search complete =  30%
Amount of search complete =  31%
Amount of search complete =  33%
Amount of search complete =  34%
Amount of search complete =  36%
Amount of search complete =  37%
Amount of search complete =  39%
Amount of search complete =  40%
Amount of search complete =  42%
Amount of search complete =  43%
Amount of search complete =  45%
Amount of search complete =  46%
Amount of search complete =  48%
Amount of search complete =  49%
Amount of search complete =  51%
Amount of search complete =  53%
Amount of search complete =  54%
Amount of search complete =  56%
Amount of search complete =  57%
Amount of search complete =  59%
Amount of search complete =  60%
Amount of search complete =  62%
Amount of search complete =  63%
Amount of search complete =  65%
Amount of search complete =  66%
Amount of search complete =  68%
Amount of search complete =  69%
Amount of search complete =  71%
Amount of search complete =  72%
Amount of search complete =  74%
Amount of search complete =  75%
Amount of search complete =  77%
Amount of search complete =  78%
Amount of search complete =  80%
Amount of search complete =  81%
Amount of search complete =  83%
Amount of search complete =  84%
Amount of search complete =  86%
Amount of search complete =  87%
Amount of search complete =  89%
Amount of search complete =  90%
Amount of search complete =  92%
Amount of search complete =  93%
Amount of search complete =  95%
Amount of search complete =  96%
Amount of search complete =  98%
Amount of search complete = 100%

Done searching.  Now optimizing each candidate.

Removed 59 likely harmonically related candidates.

Amount of optimization complete =   0%
Amount of optimization complete =   6%
Amount of optimization complete =  12%
Amount of optimization complete =  18%
Amount of optimization complete =  25%
Amount of optimization complete =  31%
Amount of optimization complete =  37%
Amount of optimization complete =  43%
Amount of optimization complete =  50%
Amount of optimization complete =  56%
Amount of optimization complete =  62%
Amount of optimization complete =  68%
Amount of optimization complete =  75%
Amount of optimization complete =  81%
Amount of optimization complete =  87%
Amount of optimization complete =  93%
Amount of optimization complete = 100%
width < len (6) in center_string(outstring, '653.53', width=5)

width < len (9) in center_string(outstring, '213643.19', width=6)

width < len (12) in center_string(outstring, '575951796.44', width=8)

width < len (7) in center_string(outstring, '2927.47', width=6)

width < len (7) in center_string(outstring, '4363.30', width=5)

width < len (16) in center_string(outstring, ' 9.5192(44)x10^6', width=15)

width < len (16) in center_string(outstring, ' 9.214(23)x10^-5', width=12)

width < len (13) in center_string(outstring, ' 0.254958(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9785690(16)', width=10)

width < len (7) in center_string(outstring, '4361.10', width=5)

width < len (16) in center_string(outstring, ' 9.5096(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00018427(23)', width=12)

width < len (15) in center_string(outstring, ' 166.923157(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9786377(16)', width=10)

width < len (7) in center_string(outstring, '4358.10', width=5)

width < len (16) in center_string(outstring, ' 9.4965(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00027641(23)', width=12)

width < len (15) in center_string(outstring, ' 166.925980(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787064(16)', width=10)

width < len (7) in center_string(outstring, '4354.35', width=5)

width < len (16) in center_string(outstring, ' 9.4802(44)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00036854(23)', width=12)

width < len (15) in center_string(outstring, ' 166.928787(66)', width=10)

width < len (15) in center_string(outstring, ' 64.9787674(16)', width=10)

width < len (7) in center_string(outstring, '3919.24', width=5)

width < len (16) in center_string(outstring, ' 7.6802(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00046068(26)', width=12)

width < len (15) in center_string(outstring, ' 166.931610(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788284(18)', width=10)

width < len (7) in center_string(outstring, '3913.02', width=5)

width < len (16) in center_string(outstring, ' 7.6559(39)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00055281(26)', width=12)

width < len (15) in center_string(outstring, ' 166.934433(74)', width=10)

width < len (15) in center_string(outstring, ' 64.9788971(18)', width=10)

width < len (7) in center_string(outstring, '4338.64', width=5)

width < len (16) in center_string(outstring, ' 9.4119(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00064495(23)', width=12)

width < len (15) in center_string(outstring, ' 166.937241(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9789658(16)', width=10)

width < len (7) in center_string(outstring, '4331.95', width=5)

width < len (16) in center_string(outstring, ' 9.3829(43)x10^6', width=15)

width < len (15) in center_string(outstring, ' 0.00073708(23)', width=12)

width < len (15) in center_string(outstring, ' 166.940063(67)', width=10)

width < len (15) in center_string(outstring, ' 64.9790344(16)', width=10)

width < len (14) in center_string(outstring, '-0.1(1.0)x10^1', width=12)


Searched the following approx numbers of independent points:
  1 harmonic:       65474
  2 harmonics:      32737
  4 harmonics:      16368
  8 harmonics:       8184

Timing summary:
    CPU time: 0.490 sec (User: 0.480 sec, System: 0.010 sec)
  Total time: 0.500 sec

Final candidates in binary format are in 'Sband_DM12.60_ACCEL_0.cand'.
Final Candidates in a text format are in 'Sband_DM12.60_ACCEL_0'.
